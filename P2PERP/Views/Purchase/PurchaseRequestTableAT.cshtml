@{
    ViewBag.Title = "PR Reports";
}

@model IEnumerable<P2PLibray.Purchase.Purchase>

<div class="main-content" id="pageContent">
    <div class="container mt-5">
        <!-- ✅ Date Range Picker -->
        <div class="row mb-3">
            <div class="col-md-3">
                <div class="input-group">
                    <span class="input-group-text bg-primary text-white">
                        <i class="bi bi-calendar-event"></i>
                    </span>
                    <input type="text" id="dateRange" class="form-control" placeholder="Select Date Range" />
                </div>
            </div>
        </div>

        @*✅ Pie Chart Section with total count on left*@
        <div class="row mb-4">
            @*Chart on Right*@
            <div class="col-md-12">
                <div class="card p-3 shadow h-100">
                    <h4 class="text-primary fw-bold text-center mb-3">PR Converted vs Not Converted</h4>
                    <div id="statusPieChart" style="height:350px;"></div>
                </div>
            </div>
        </div>


        <!-- ✅ Table Section -->
        <div class="card p-3 shadow">
            <h3 class="mb-3 text-center text-primary">Purchase Requisition List</h3>
            <div class="table-responsive">
                <table id="purchaseTable" class="table table-striped table-bordered nowrap w-100">
                    <thead class="table-dark">
                        <tr>
                            <th><input type="checkbox" id="selectAll" /></th> <!-- ✅ now first column is checkbox -->
                            <th>Sr.</th> <!-- ✅ second column serial number -->
                            <th>PR Code</th>
                            <th>PR Created</th>
                            <th>PR Approved</th>
                            <th>Converted RFQ</th>
                            <th>RFQ Code</th>
                            <th>RFQ Created</th>
                            <th>Days To Convert</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td><input type="checkbox" class="rowCheckbox" value="@item.PRCode" /></td> <!-- 0 -->
                                <td></td> <!-- 1 -->
                                <td>@item.PRCode</td> <!-- 2 -->
                                <td>@(item.PRCreatedDate.HasValue ? item.PRCreatedDate.Value.ToString("dd'/'MM'/'yyyy", System.Globalization.CultureInfo.InvariantCulture) : "")</td>
                                <td>@(item.PRApprovedDate.HasValue ? item.PRApprovedDate.Value.ToString("dd'/'MM'/'yyyy", System.Globalization.CultureInfo.InvariantCulture) : "")</td>
                                <td>@item.ConvertedToRFQ</td>
                                <td>@item.RFQCode</td>
                                <td>@(item.RFQCreatedDate.HasValue ? item.RFQCreatedDate.Value.ToString("dd'/'MM'/'yyyy", System.Globalization.CultureInfo.InvariantCulture) : "")</td>
                                <td>@item.DaysToConvert</td>
                                <td>@item.StatusName</td>
                                <td>
                                    <button id="btnview" type="button"
                                            class="btn btn-sm btn-primary view-items"
                                            data-prcode="@item.PRCode">
                                        <i class="bi bi-eye"></i>
                                    </button>

                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>



@*Modal View*@

<div class="modal fade" data-bs-backdrop="true" id="prItemsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white position-relative">
                <h5 class="modal-title text-white w-100 text-center mb-2">Purchase Requisition Items</h5>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3 mb-2" data-bs-dismiss="modal"></button>
            </div>

            <div class="modal-body">
                <table id="prItemsTable" class="table table-striped table-bordered w-100">
                    <thead class="table-dark">
                        <tr>
                            <th class="text-center">Sr.</th>
                            <th class="text-center">PRCode</th>
                            <th class="text-center">Item Name</th>
                            <th class="text-center">Cost Per Unit</th>
                            <th class="text-center">RequiredQuantity</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
</div>





<style>
    #purchaseTable th,
    #purchaseTable td {
        text-align: center;
        vertical-align: middle;
    }

    .status-badge {
        background-color: green;
        padding: 2px 6px;
        border-radius: 4px;
        /*        font-weight: bold;*/
        /*        display: inline-block;*/
        font-size: 0.9em;
        /*        border-radius :40px;*/
    }

    .bg-warning {
        background-color: orange;
    }
</style>


<script>


    // Clear processing state for all DataTable buttons
    window.__dt_clearAllProcessing = function () {
        try {
            // Try to clear via DataTables API
            var tables = $.fn.dataTable.tables();
            for (var i = 0; i < tables.length; i++) {
                try {
                    var api = $(tables[i]).DataTable();
                    if (!api || !api.buttons) continue;
                    var btnCount = (api.buttons().nodes && api.buttons().nodes().length) || 0;
                    for (var j = 0; j < btnCount; j++) {
                        try { api.button(j).processing(false); } catch (e) { }
                    }
                } catch (e) { }
            }
        } catch (e) { }

        // Fallback DOM cleanup
        try {
            $('.dt-button').removeClass('dt-button-processing');
            $('.dt-button').prop('disabled', false);
        } catch (e) { }
    };

    // Listen for print-done message from print window
    window.addEventListener('message', function (ev) {
        if (ev && ev.data === 'dt_print_done') {
            window.__dt_clearAllProcessing();
        }
    });

    // Store original button actions if not already stored
    if (!$.fn.dataTable.ext.buttons.pdfHtml5.__originalAction) {
        $.fn.dataTable.ext.buttons.pdfHtml5.__originalAction =
            $.fn.dataTable.ext.buttons.pdfHtml5.action;
    }
    if (!$.fn.dataTable.ext.buttons.print.__originalAction) {
        $.fn.dataTable.ext.buttons.print.__originalAction =
            $.fn.dataTable.ext.buttons.print.action;
    }
    if (!$.fn.dataTable.ext.buttons.excelHtml5.__originalAction) {
        $.fn.dataTable.ext.buttons.excelHtml5.__originalAction =
            $.fn.dataTable.ext.buttons.excelHtml5.action;
    }
    if (!$.fn.dataTable.ext.buttons.csvHtml5.__originalAction) {
        $.fn.dataTable.ext.buttons.csvHtml5.__originalAction =
            $.fn.dataTable.ext.buttons.csvHtml5.action;
    }



    var table;
    var statusChart;
    var startDate = null;
    var endDate = null;
    var selectedPRCodes = [];

    $(document).ready(function () {
        table = $('#purchaseTable').DataTable({
            scrollX: false,
            scrollCollapse: true,
            ordering: false,
            autoWidth: false,
            dom:
                "<'row mb-2'<'col-6'B><'col-6 text-end'f>>" +
                "<'row'<'col-12'tr>>" +
                "<'row mt-2'<'col-5'i><'col-7 text-end'p>>",
            columnDefs: [
                { targets: 0, orderable: false, searchable: false }, // checkbox col
                { targets: 1, orderable: false, searchable: false }  // serial col
            ],

            createdRow: function (row, data, dataIndex) {
                var status = data[9]; // Status column index (0-based)
                var $cell = $('td', row).eq(9);

                if (status === "Approved") {
                    $cell.html('<span class="status-badge text-white bg-success">Approved</span>');
                } else if (status === "Rejected") {
                    $cell.html('<span class="status-badge text-white bg-danger">Rejected</span>');
                }
            },



            // Show Approved (Status) first (col 9), then PR Code (col 2)
            order: [[9, 'asc'], [2, 'asc']],
            buttons: [
                {
                    extend: 'print',
                    title: '', // remove default title
                    text: '<i class="bi bi-printer-fill text-dark"></i>',
                    className: 'btn bg-muted btn-outline-dark border-2 fw-bold',

                    exportOptions: {
                        columns: [1, 2, 3, 4, 6, 7, 8, 9], // include Sr.No, exclude checkbox & action
                        rows: function (idx, data, node) {
                            return selectedPRCodes.length === 0 || selectedPRCodes.includes(data[2]);
                        },
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                // remove HTML tags
                                if (typeof data === 'string') return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                return data;
                            }
                        }
                    },

                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);

                        // 🔹 Check both .row-select and .rowCheckbox for flexibility
                        var selectedCount = selected || $('.rowCheckbox:checked').length;

                        // --- No selection: show toast and stop ---
                        if (selectedCount === 0) {
                            showExportToast();
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        // --- Show spinner ---
                        try { btnApi.processing(true); } catch (err) { }

                        // --- Execute original Print action safely ---
                        try {
                            $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                        } catch (err) {
                            setTimeout(function () {
                                try { btnApi.processing(false); } catch (e) { }
                            }, 300);
                            throw err;
                        }

                        // --- Final safeguard to stop spinner if print window doesn't respond ---
                        setTimeout(function () {
                            try { btnApi.processing(false); } catch (err) { }
                        }, 2000);
                    },

                    customize: function (win) {
                        var exportDate = new Date().toLocaleDateString('en-GB');

                        // Remove default DataTables title
                        $(win.document.body).find('h1').remove();

                        // Add custom title and export date
                        $(win.document.body).prepend(`
            <h2 style="text-align:center; margin-bottom:0.2em;">Purchase Requisition List</h2>
            <p style="text-align:center; font-size:10pt; margin-top:0;">Generated Date: ${exportDate}</p>
        `);

                        var $table = $(win.document.body).find('table');
                        $table
                            .addClass('display')
                            .css({
                                'font-size': '10pt',
                                'border-collapse': 'collapse',
                                'width': '100%'
                            });

                        // 🖤 Black header with white text (fixed request)
                        $table.find('thead th').css({
                            'background-color': 'black',
                            'color': 'white',
                            'font-weight': 'bold',
                            'text-align': 'center',
                            'vertical-align': 'middle',
                            'padding': '8px',
                            'border': '1px solid #000'
                        });

                        // Style table body cells
                        $table.find('tbody td').css({
                            'text-align': 'center',
                            'vertical-align': 'middle',
                            'padding': '6px',
                            'border': '1px solid #000'
                        });

                        // Recompute Sr.No in print (first column)
                        $table.find('tbody tr').each(function (i, row) {
                            $(row).find('td').eq(0).text(i + 1);
                        });
                    }
                },


                // ----- PDF: exclude checkbox column, keep PR Code intact, add Export Date & header style -----

                {
                    extend: 'pdfHtml5',
                    title: 'Purchase Requisition List',
                    text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                    className: 'btn bg-muted btn-outline-dark border-2 fw-bold',

                    exportOptions: {
                        // Exclude the actual first and last columns dynamically
                        columns: function (idx, data, node) {
                            var dt = table; // uses your existing DataTable instance
                            var colIndexes = dt.columns().indexes().toArray(); // actual column indexes
                            var firstIdx = colIndexes[0];
                            var lastIdx = colIndexes[colIndexes.length - 1];
                            return idx !== firstIdx && idx !== lastIdx;
                        },

                        // Export only selected PRs if any
                        rows: function (idx, data, node) {
                            return selectedPRCodes.length === 0 || selectedPRCodes.includes(data[2]);
                        },

                        // Recalculate serial number based on exported first column
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                var dt = table;
                                var colIndexes = dt.columns().indexes().toArray();
                                var firstIdx = colIndexes[0];
                                if (colIdx === firstIdx) return rowIdx + 1; // Serial no.
                                if (typeof data === 'string') return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                return data;
                            }
                        }
                    },

                    // ✅ Prevent export if no row selected
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);

                        // Check both row-select and rowCheckbox for flexibility
                        var selectedCount = selected || $('.rowCheckbox:checked').length;

                        if (selectedCount === 0) {
                            showExportToast();
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        // Show spinner
                        try { btnApi.processing(true); } catch (err) { }

                        // ✅ Call original PDF export action
                        try {
                            $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                        } catch (err) {
                            // Ensure spinner not left running
                            setTimeout(function () {
                                try { btnApi.processing(false); } catch (e) { }
                            }, 300);
                            throw err;
                        }

                        // Final fallback: if export takes long or fails silently, clear spinner
                        setTimeout(function () {
                            try { btnApi.processing(false); } catch (err) { }
                        }, 2000);
                    },


                    customize: function (doc) {
                        try {
                            // --- Center title ---
                            if (doc.content && doc.content.length > 0 && doc.content[0].text) {
                                doc.content[0].alignment = 'center';
                                doc.content[0].fontSize = 14;
                            }

                            // --- Add Export Date below title ---
                            const exportDate = new Date().toLocaleDateString('en-GB'); // dd/mm/yyyy
                            doc.content.splice(1, 0, {
                                text: 'Generated Date: ' + exportDate,
                                alignment: 'center',
                                margin: [0, 0, 0, 8],
                                fontSize: 10
                            });

                            // --- Locate table node ---
                            let tableNodeIndex = doc.content.findIndex(n => n.table);
                            if (tableNodeIndex === -1) return;
                            const tableNode = doc.content[tableNodeIndex];

                            // --- Table header/body style ---
                            doc.styles = doc.styles || {};
                            doc.styles.tableHeader = {
                                alignment: 'center',
                                fillColor: '#212529',
                                color: '#ffffff',
                                bold: true
                            };
                            doc.styles.tableBodyEven = { alignment: 'center' };
                            doc.styles.tableBodyOdd = { alignment: 'center' };

                            // --- Borders and padding ---
                            tableNode.layout = {
                                hLineWidth: () => 0.5,
                                vLineWidth: () => 0.5,
                                hLineColor: () => '#dddddd',
                                vLineColor: () => '#dddddd',
                                paddingLeft: () => 6,
                                paddingRight: () => 6,
                                paddingTop: () => 4,
                                paddingBottom: () => 4
                            };

                            // --- Recompute Sr.No in exported table body ---
                            const body = tableNode.table.body;
                            for (let r = 1; r < body.length; r++) {
                                body[r][0] = { text: String(r), alignment: 'center' };
                            }
                        } catch (err) {
                            console.error('PDF customize error:', err);
                        }
                    }
                },

                //EXCEL
                {
                    extend: 'excelHtml5',
                    text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                    titleAttr: 'Export Excel',
                    title: '',
                    filename: 'Purchase_Requisition_List',
                    className: 'btn bg-muted btn-outline-dark border-2 fw-bold',

                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked, input.rowCheckbox:checked').length;
                        var btnApi = dt.button(button);

                        if (selected === 0) {
                            showExportToast();
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        try { btnApi.processing(true); } catch (err) { }

                        // Call original excelHtml5 action
                        $.fn.dataTable.ext.buttons.excelHtml5.__originalAction.call(this, e, dt, button, config);

                        // Fallback clear spinner after short delay
                        setTimeout(function () {
                            try { btnApi.processing(false); } catch (err) { }
                        }, 300);
                    },

                    exportOptions: {
                        columns: [2, 3, 4, 6, 7, 8, 9],
                        rows: function (idx, data, node) {
                            return selectedPRCodes.length === 0 || selectedPRCodes.includes(data[2]);
                        },
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                if (colIdx === 0) return getExportSrNo(rowIdx, table);
                                return typeof data === 'string'
                                    ? data.replace(/<[^>]*>/g, '').trim()
                                    : data;
                            }
                        }
                    },

                    customize: function (xlsx) {
                        // ✅ Rename worksheet
                        var sheet = xlsx.xl.worksheets['sheet1.xml'];
                        $('sheet', xlsx.xl['workbook.xml']).attr('name', 'Purchase_Requisition');

                        // ✅ Date in dd/mm/yyyy format
                        var now = new Date();
                        var day = String(now.getDate()).padStart(2, '0');
                        var month = String(now.getMonth() + 1).padStart(2, '0');
                        var year = now.getFullYear();
                        var formattedDate = day + '/' + month + '/' + year;

                        var sheetData = $('sheetData', sheet);

                        // Shift all data rows down by 2 (for title + date)
                        sheetData.find('row').each(function () {
                            var r = parseInt($(this).attr('r'));
                            $(this).attr('r', r + 2);
                            $(this).find('c').each(function () {
                                var cellRef = $(this).attr('r');
                                var col = cellRef.replace(/[0-9]/g, '');
                                $(this).attr('r', col + (r + 2));
                            });
                        });

                        // ✅ Insert Title row (merged across all columns)
                        var titleRow =
                            '<row r="1">' +
                            '<c t="inlineStr" r="A1">' +
                            '<is><t>Purchase Requisition List</t></is>' +
                            '</c>' +
                            '</row>';

                        // ✅ Insert Export Date row (merged across all columns)
                        var dateRow =
                            '<row r="2">' +
                            '<c t="inlineStr" r="A2">' +
                            '<is><t>Generated Date: ' + formattedDate + '</t></is>' +
                            '</c>' +
                            '</row>';

                        // Add rows to the top
                        sheetData.prepend(dateRow);
                        sheetData.prepend(titleRow);

                        // ✅ Add merge cells for centering title and date across all columns
                        var mergeCells = $('mergeCells', sheet);
                        if (mergeCells.length === 0) {
                            $('worksheet', sheet).append('<mergeCells count="2"/>');
                            mergeCells = $('mergeCells', sheet);
                        } else {
                            var currentCount = parseInt(mergeCells.attr('count') || 0);
                            mergeCells.attr('count', currentCount + 2);
                        }

                        // Calculate total columns (8 columns from export + Sr.No = 9 columns)
                        var totalCols = 9;
                        var endCol = String.fromCharCode(64 + totalCols); // A=65, I=73 for 9 columns

                        // Add title merge (A1:I1)
                        mergeCells.append('<mergeCell ref="A1:' + endCol + '1"/>');
                        // Add date merge (A2:I2)
                        mergeCells.append('<mergeCell ref="A2:' + endCol + '2"/>');

                        // ✅ Add Sr.No header and serial numbers to data rows
                        var dataRows = $(sheet).find('row').slice(2); // Skip title and date rows

                        // Add Sr.No header to the first data row (which is now row 3)
                        var headerRow = $(dataRows[0]);
                        var headerCells = headerRow.find('c');

                        // Create Sr.No header cell
                        var srNoHeader = '<c t="inlineStr" r="A3"><is><t>Sr.No</t></is></c>';

                        // Shift existing headers to the right
                        headerCells.each(function () {
                            var cellRef = $(this).attr('r');
                            var col = cellRef.replace(/\d+/g, '');
                            var newCol = String.fromCharCode(65 + (col.charCodeAt(0) - 64)); // B, C, D, etc.
                            $(this).attr('r', newCol + '3');
                        });

                        // Add Sr.No header at the beginning
                        headerRow.prepend(srNoHeader);

                        // Add serial numbers to data rows (starting from row 4)
                        dataRows.slice(1).each(function (index) {
                            var row = $(this);
                            var rowNum = parseInt(row.attr('r'));
                            var cells = row.find('c');

                            // Create serial number cell
                            var srNoCell = '<c t="inlineStr" r="A' + rowNum + '"><is><t>' + (index + 1) + '</t></is></c>';

                            // Shift existing cells to the right
                            cells.each(function () {
                                var cellRef = $(this).attr('r');
                                var col = cellRef.replace(/\d+/g, '');
                                var newCol = String.fromCharCode(65 + (col.charCodeAt(0) - 64)); // B, C, D, etc.
                                $(this).attr('r', newCol + rowNum);
                            });

                            // Add serial number at the beginning
                            row.prepend(srNoCell);
                        });

                        // ✅ Add styles for centering + font
                        var styles = xlsx.xl['styles.xml'];
                        var cellXfs = $('cellXfs', styles);
                        var fonts = $('fonts', styles);

                        // Count existing fonts
                        var fontCount = $('font', fonts).length;

                        // Add new font for title (bold, size 14)
                        fonts.append(
                            '<font>' +
                            '<sz val="14"/>' +  // Font size 14
                            '<b/>' +             // Bold
                            '<color rgb="000000"/>' +  // Black
                            '</font>'
                        );

                        // Add new font for date (size 11)
                        fonts.append(
                            '<font>' +
                            '<sz val="11"/>' +   // Font size 11
                            '<color rgb="000000"/>' +  // Black
                            '</font>'
                        );

                        // Count existing cellXfs
                        var styleCount = $('xf', cellXfs).length;

                        // Add new style for title (use new bold/large font, center alignment)
                        cellXfs.append(
                            '<xf numFmtId="0" fontId="' + fontCount + '" fillId="0" borderId="0" xfId="0" applyFont="1" applyAlignment="1">' +
                            '<alignment horizontal="center" vertical="center" wrapText="1"/>' +
                            '</xf>'
                        );

                        // Add new style for date (use new font, center alignment)
                        cellXfs.append(
                            '<xf numFmtId="0" fontId="' + (fontCount + 1) + '" fillId="0" borderId="0" xfId="0" applyFont="1" applyAlignment="1">' +
                            '<alignment horizontal="center" vertical="center" wrapText="1"/>' +
                            '</xf>'
                        );

                        // Apply new style indexes to the cells
                        $('c[r=A1]', sheet).attr('s', styleCount);       // Title style
                        $('c[r=A2]', sheet).attr('s', styleCount + 1);   // Date style
                    }
                },


                //// ----- CSV: same -----

                {
                    extend: 'csvHtml5',
                    title: 'Purchase_Requisition_List',
                    text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                    className: 'btn bg-muted btn-outline-dark border-2 fw-bold',

                    exportOptions: {
                        columns: [2, 3, 4, 5, 6, 7, 8, 9], // All columns except checkbox and action
                        rows: function (idx, data, node) {
                            return selectedPRCodes.length === 0 || selectedPRCodes.includes(data[2]);
                        },
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                if (typeof data === 'string') {
                                    return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                }
                                return data;
                            }
                        }
                    },

                    customize: function (csv) {
                        var lines = csv.split('\n');
                        if (!lines || lines.length === 0) return csv;

                        var newLines = [];

                        // Process header row - add "Sr.No" as first column
                        if (lines[0]) {
                            var headers = ['"Sr.No"'];
                            var originalHeaders = lines[0].split(',');
                            headers = headers.concat(originalHeaders);
                            newLines.push(headers.join(','));
                        }

                        // Process data rows - add serial numbers
                        for (var i = 1; i < lines.length; i++) {
                            if (lines[i].trim()) {
                                var row = ['"' + i + '"']; // Serial number starting from 1
                                var originalCells = lines[i].split(',');
                                row = row.concat(originalCells);
                                newLines.push(row.join(','));
                            }
                        }

                        return newLines.join('\n');
                    },

                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);
                        var selectedCount = selected || $('.rowCheckbox:checked').length;

                        if (selectedCount === 0) {
                            showExportToast();
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        try { btnApi.processing(true); } catch (err) { }

                        try {
                            $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                        } catch (err) {
                            console.error('CSV export error:', err);
                            setTimeout(function () { try { btnApi.processing(false); } catch (e) { } }, 300);
                            throw err;
                        }

                        setTimeout(function () {
                            try { btnApi.processing(false); } catch (err) { }
                        }, 300);
                    }
                },

                'colvis'
            ]
        });

        // fill serial number in column index 1 for the UI (visible table)
        table.on('order.dt search.dt draw.dt', function () {
            table.column(1, { search: 'applied', order: 'applied' }).nodes().each(function (cell, i) {
                cell.innerHTML = i + 1;
                $(cell).css({ textAlign: 'center', verticalAlign: 'middle' });
            });
        }).draw();

        table.columns.adjust().draw();

        // custom date filter (PR Created Date column index 3)

        $.fn.dataTable.ext.search.push(function (settings, data) {
            var reqDateStr = data[3]; // PR Created column
            if (!reqDateStr) return true;

            var parts = reqDateStr.split("/"); // correct for dd/MM/yyyy
            if (parts.length !== 3) return true;

            var reqDate = new Date(parts[2], parts[1] - 1, parts[0]);
            reqDate.setHours(0, 0, 0, 0);

            var s = startDate ? new Date(startDate) : null;
            var e = endDate ? new Date(endDate) : null;
            if (s) s.setHours(0, 0, 0, 0);
            if (e) e.setHours(0, 0, 0, 0);

            if (s && reqDate < s) return false;
            if (e && reqDate > e) return false;
            return true;
        });

        // checkbox logic (select all + individual)
        $(document).on('change', '#selectAll', function () {
            var checked = this.checked;
            $('.rowCheckbox').prop('checked', checked);
            selectedPRCodes = checked ? $('.rowCheckbox').map(function () { return $(this).val(); }).get() : [];
        });
        $(document).on('change', '.rowCheckbox', function () {
            var val = $(this).val();
            if (this.checked) {
                if (!selectedPRCodes.includes(val)) selectedPRCodes.push(val);
            } else {
                selectedPRCodes = selectedPRCodes.filter(x => x !== val);
            }
            $('#selectAll').prop('checked', $('.rowCheckbox:checked').length === $('.rowCheckbox').length);
        });

        // ✅ Date range picker with predefined ranges and placeholder
        $('#dateRange').daterangepicker({
            autoUpdateInput: false, // keep placeholder until user picks something
            alwaysShowCalendars: false, // calendars show only on Custom Range
            locale: {
                cancelLabel: 'Clear',
                format: 'DD/MM/YYYY',
                applyLabel: 'Apply',
                customRangeLabel: 'Custom Range'
            },
            ranges: {
                'Today': [moment(), moment()],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
                'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
                'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]
            }
        }, function (start, end, label) {
            // Fires after a range is selected (predefined or custom)
            startDate = start.toDate();
            endDate = end.toDate();
            $('#dateRange').val(start.format('DD/MM/YYYY') + ' - ' + end.format('DD/MM/YYYY'));
            table.draw();
        });

        // ✅ Clear selection on cancel
        $('#dateRange').on('cancel.daterangepicker', function () {
            $(this).val('Select Date Range'); // restore placeholder
            startDate = null;
            endDate = null;
            table.draw();
        });

        // ✅ Set initial placeholder text
        $('#dateRange').val('Select Date Range');


        //function for buildchart
        function buildChart(data, totalPR) {
            var dataArray = [];
            for (var key in data) dataArray.push({ name: key, y: data[key] });

            statusChart = Highcharts.chart('statusPieChart', {
                chart: { type: 'pie' },
                title: { text: 'Converted vs Not Converted to RFQ' },
                subtitle: {
                    text: '<span style="font-size:32px; font-weight:bold;">Total PR: ' + totalPR + '</span>',
                    align: 'left', verticalAlign: 'top', x: 10, y: 20, useHTML: true
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: {
                            enabled: true,
                            format: '<b>{point.name}</b>: {point.y}'
                        },
                        // ✅ add click event for filtering table
                        point: {
                            events: {
                                click: function () {
                                    // this.name will be "Converted" or "Not Converted"
                                    var filterValue = this.name === 'Converted' ? 'Yes' : 'No';
                                    // search the ConvertedToRFQ column (index 5) for Yes/No
                                    table.column(5).search(filterValue).draw();
                                }
                            }
                        }
                    }
                },
                series: [{
                    name: 'Count',
                    colorByPoint: true,
                    data: dataArray
                }]
            });
        }

        // 🟢 Double-click anywhere on the chart container to clear the filter
        $('#statusPieChart').on('dblclick', function () {
            // clear the search applied on ConvertedToRFQ column (index 5)
            table.column(5).search('').draw();
        });




        function updateChart() {
            var convCounts = { 'Yes': 0, 'No': 0 };
            table.rows({ filter: 'applied' }).every(function () {
                var converted = this.data()[5]; // Converted To RFQ at index 5 in your layout
                convCounts[converted] = (convCounts[converted] || 0) + 1;
            });
            var totalPR = table.rows({ filter: 'applied' }).count();
            var newData = [{ name: 'Converted', y: convCounts['Yes'] }, { name: 'Not Converted', y: convCounts['No'] }];
            if (statusChart) {
                statusChart.series[0].setData(newData, true);
                statusChart.setSubtitle({ text: '<span style="font-size:32px; font-weight:bold;">Total PR: ' + totalPR + '</span>', align: 'left', verticalAlign: 'top', x: 10, y: 20, useHTML: true });
            } else {
                buildChart({ 'Converted': convCounts['Yes'], 'Not Converted': convCounts['No'] }, totalPR);
            }
        }
        updateChart();
        table.on('draw', function () { updateChart(); });



        // ✅ Configure toastr once
        toastr.options = {
            closeButton: true,
            progressBar: true,
            preventDuplicates: true,
            newestOnTop: true,
            positionClass: "toast-top-right",
            timeOut: "3000" // 3 seconds
        };

        // ✅ Helper function for warning toast
        function showExportToast() {
            toastr.warning("Please select at least one row before exporting.", "Warning");
        }




        //// click event for view items
        //$(document).on('click', '.view-items', function () {
        //    var prCode = $(this).data('prcode');

        //    // clear previous table rows
        //    $('#prItemsTable tbody').empty();

        //    $.ajax({
        //        url: '/Purchase/GetPRItems',  // adjust controller name if needed
        //        type: 'GET',
        //        data: { prCode: prCode },
        //        success: function (data) {
        //            if (data && data.length > 0) {
        //                data.forEach(function (item, index) {
        //                    $('#prItemsTable tbody').append(
        //                        `<tr>
        //        <td class="text-center">${index + 1}</td>  <!-- 🆕 Serial number -->
        //        <td class="text-center">${item.PRCode}</td>
        //        <td class="text-center">${item.ItemName}</td>
        //        <td class="text-center">₹${item.UnitRates}</td>
        //        <td class="text-center">${item.RequiredQuantity}</td>
        //    </tr>`
        //                    );
        //                });
        //            }
        //            else {
        //                $('#prItemsTable tbody').append(
        //                    `<tr><td colspan="4" class="text-center text-muted">No items found.</td></tr>`
        //                );
        //            }

        //            // finally show the modal
        //            $('#prItemsModal').modal('show');
        //        },
        //        error: function () {
        //            toastr.error("Error fetching PR items", "Error");
        //        }
        //    });
        //});

        // click event for view items
        $(document).on('click', '.view-items', function () {
            var prCode = $(this).data('prcode');

            // clear previous table rows
            $('#prItemsTable tbody').empty();

            $.ajax({
                url: '/Purchase/GetPRItems',
                type: 'GET',
                data: { prCode: prCode },
                success: function (data) {
                    if (data && data.length > 0) {
                        data.forEach(function (item, index) {
                            $('#prItemsTable tbody').append(`
                        <tr>
                            <td class="text-center">${index + 1}</td>
                            <td class="text-center">${item.PRCode}</td>
                            <td class="text-center">${item.ItemName}</td>
                            <td class="text-center">₹${item.UnitRates}</td>
                            <td class="text-center">${item.RequiredQuantity}</td>
                        </tr>
                    `);
                        });
                    } else {
                        $('#prItemsTable tbody').append(
                            `<tr><td colspan="5" class="text-center text-muted">No items found.</td></tr>`
                        );
                    }

                    // Destroy existing DataTable before reinitializing
                    if ($.fn.DataTable.isDataTable('#prItemsTable')) {
                        $('#prItemsTable').DataTable().destroy();
                    }

                    // Initialize DataTable with search, pagination, and responsive design
                    $('#prItemsTable').DataTable({
                        searching: true,      // ✅ enables search box
                        paging: true,         // ✅ enables pagination
                        info: true,           // ✅ shows "Showing X of Y entries"
                        lengthChange: false,  // ❌ hides entries-per-page dropdown
                        ordering: false,       // ✅ enables sorting
                        responsive: true,
                        language: {
                            search: "Search:", // optional custom search label
                            zeroRecords: "No matching items found"
                        }
                    });

                    // finally show the modal
                    $('#prItemsModal').modal('show');
                },
                error: function () {
                    toastr.error("Error fetching PR items", "Error");
                }
            });
        });



        // Helper function to recalc SrNo for export across all pages
        function getExportSrNo(rowIdx, tbl) {
            // Get all rows nodes
            let allRows = tbl.rows({ order: 'applied', search: 'applied' }).nodes().toArray();
            // Filter only the checked rows
            let checkedRows = allRows.filter(row => $(row).find('input.row-select').prop('checked'));
            // Find the position of this row in the checkedRows array
            let sr = checkedRows.findIndex(row => tbl.row(row).index() === rowIdx) + 1;
            return sr; // consecutive Sr.No
        }


    });
</script>



