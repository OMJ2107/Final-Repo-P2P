@{
    ViewBag.Title = "Create Purchase Order";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Purchase Order Form</title>
    <style>
             /* ==========================
        Global Styles
        ========================== */
             body {
                 background-color: #f4f5f7;
                 font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
                 color: #333;
             }

             .po-form {
                 background: #fff;
                 padding: 30px;
                 border-radius: 16px;
                 box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
                 margin: 30px auto;
                 max-width: 1150px;
             }

             .section-title {
                 font-size: 1.1rem;
                 font-weight: 600;
                 color: #000;
                 margin-bottom: 12px;
                 border-left: 4px solid #000;
                 padding-left: 10px;
             }

             .form-label {
                 font-weight: 500;
                 margin-bottom: 8px;
             }

             /* ==========================
        Form Controls
        ========================== */
             .form-control,
             .form-select {
                 border-radius: 8px;
                 border: 1px solid #ddd;
                 box-shadow: none !important;
                 outline: none !important;
                 transition: none !important;
                 background-color: #fff;
             }

                 /* Focus: light-sky blue border */
                 .form-control:focus,
                 .form-select:focus {
                     border-color: #ddd !important;
                     box-shadow: none !important;
                     outline: none !important;
                 }

                 /* Invalid fields: red border */
                 .form-control.is-invalid,
                 .form-select.is-invalid {
                     border-color: #dc3545 !important;
                     box-shadow: none !important;
                     background-image: none !important;
                 }
             /* Validation feedback */
             .invalid-feedback {
                 display: none;
                 width: 100%;
                 margin-top: 0.25rem;
                 font-size: 0.875em;
                 color: #dc3545;
             }
             /*        Revome Green Color*/

             .was-validated .form-control:invalid ~ .invalid-feedback,
             .was-validated .form-select:invalid ~ .invalid-feedback {
                 display: block;
             }

             .was-validated .form-select:valid, .form-select.is-valid {
                 border: 1px solid;
                 border-color: #ddd !important;
                 box-shadow: none !important;
                 outline: none !important;
             }

             .was-validated .form-control:valid, .form-control.is-valid {
                 border: 1px solid;
                 border-color: #ddd !important;
                 box-shadow: none !important;
                 outline: none !important;
             }

             .was-validated .form-check-input:valid:checked,
             .form-check-input.is-valid:checked {
                 background-color: #0d6efd !important; /* sky blue */
                 border-color: #0d6efd !important;
             }

             .was-validated .form-control:invalid, .form-control.is-invalid {
                 border: 1px solid #ddd;
             }
             /* ==========================
        Tables
        ========================== */
             .table thead {
                 background: #000;
                 color: #fff;
             }

             .table tbody tr td {
                 font-size: 0.9rem;
             }

             #tblItems tbody td,
             #tblItems thead th,
             #tblItems tfoot td {
                 padding: 0.3rem 0.5rem;
                 font-size: 0.85rem;
                 vertical-align: middle;
             }

             #tblItems tbody tr {
                 line-height: 1.2;
             }

             .table-sm th,
             .table-sm td {
                 padding: 0.25rem 0.5rem;
             }

             .totals {
                 text-align: right;
                 font-weight: 600;
             }

             .totals-row td {
                 border-top: 2px solid #000;
             }

             /* ==========================
        Buttons
        ========================== */
             .btn-cancel {
                 background: #dc3545;
                 color: #fff;
                 border-radius: 10px;
                 padding: 8px 20px;
                 font-weight: 500;
             }

             /* ==========================
        Tooltip (Dark)
        ========================== */
             .tooltip-dark .tooltip-inner {
                 background-color: #000;
                 color: #fff;
             }

             .tooltip-dark .tooltip-arrow::before {
                 border-top-color: #000 !important;
             }

             /* ==========================
        Terms & Conditions (Checkbox)
        ========================== */
             #termsList .form-check-label {
                 color: #000 !important;
                 font-weight: 500;
             }

             /* Invalid checkbox state */
             #termsList input[type="checkbox"]:not(:checked):invalid + .form-check-label {
                 color: #000 !important;
                 border-color: #dc3545 !important;
             }

             /* ✅ Checked checkbox color: light-sky blue */
             #termsList input[type="checkbox"] {
                 accent-color: #0d6efd !important; /* sky blue */
                 border: 1.5px solid #0d6efd !important;
             }

             /* List styling */
             .terms-list {
                 padding-left: 20px;
                 margin-top: 5px;
             }

                 .terms-list li {
                     margin-bottom: 6px;
                     font-size: 0.92rem;
                 }
        /* Add spacing between buttons */
        .swal2-custom-actions {
            gap: 12px; /* adjust gap as needed */
        }

            /* Optional: small visual consistency */
            .swal2-custom-actions .btn {
                font-weight: 600;
                border-radius: 6px;
                min-width: 120px;
            }


    </style>
</head>
<body>
    <!-- Toast container -->
    <div id="toastContainer"
         class="toast-container position-fixed top-0 end-0 p-3"
         style="z-index: 2000;">
    </div>

    <div class="container">
        <form class="po-form needs-validation" novalidate>
            <h3 class="text-center text-primary mb-4">Purchase Order</h3>

            <!-- Hidden fields -->
            <input type="hidden" id="TotalAmount" name="TotalAmount" />

            <!-- General Details -->
            <h5 class="section-title">General Details</h5>
            <div class="row g-3">
                <div class="col-md-4">
                    <label for="QuotationNo" class="form-label">Quotation Number</label>
                    <input type="text" class="form-control form-control-sm bg-light" id="QuotationNo" name="RegisterQuotationCode" readonly>
                </div>
                <div class="col-md-4">
                    <label for="QuotationDate" class="form-label">Quotation Date</label>
                    <input type="text" class="form-control form-control-sm bg-light" name="QuotationDate" id="QuotationDate" readonly>
                </div>
                <div class="col-md-4">
                    <label for="ApprovedBy" class="form-label">Approved By</label>
                    <input type="text" class="form-control form-control-sm bg-light" name="ApprovedRejectedBy" id="ApprovedBy" readonly>
                </div>
                <div class="col-md-4">
                    <label for="ApprovedDate" class="form-label">Approved Date</label>
                    <input type="text" class="form-control form-control-sm bg-light" name="ApprovedRejectedDate" id="ApprovedDate" readonly>
                </div>
                <div class="col-md-4">
                    <label for="ddlAccountant" class="form-label">
                        Accountant Email <span class="text-danger">*</span>
                    </label>
                    <select class="form-select" name="Usercode" id="ddlAccountant" required>
                        <option value="">Select Accountant Email</option>
                        <!-- Options will be dynamically populated via AJAX -->
                    </select>
                    <div class="invalid-feedback">
                        Please select an accountant email.
                    </div>
                </div>
            </div>

            <!-- Vendor Details -->
            <h5 class="section-title mt-4">Vendor Details</h5>
            <div class="row g-3">
                <div class="col-md-4">
                    <label for="VendorName" class="form-label">Vendor Name</label>
                    <input type="text" class="form-control form-control-sm bg-light" id="VendorName" name="VendorName" readonly>
                </div>
                <div class="col-md-4">
                    <label for="CompanyName" class="form-label">Company Name</label>
                    <input type="text" class="form-control form-control-sm bg-light" id="CompanyName" name="CompanyName" readonly>
                </div>
                <div class="col-md-4">
                    <label for="CompanyAddress" class="form-label">Company Address</label>
                    <input type="text" class="form-control form-control-sm bg-light" id="CompanyAddress" name="CompanyAddress" readonly>
                </div>
                <div class="col-md-4">
                    <label for="VendorContactNumber" class="form-label">Vendor Contact Number</label>
                    <input type="tel" class="form-control form-control-sm bg-light" id="VendorContactNumber" name="MobileNo" readonly>
                </div>
                <div class="col-md-4">
                    <label for="VendorEmail" class="form-label">Vendor Email</label>
                    <input type="email" class="form-control form-control-sm bg-light" id="VendorEmail" name="Email" readonly>
                </div>
                <div class="col-md-4">
                    <label for="VendorAccountNumber" class="form-label">Vendor Account Number</label>
                    <input type="text" class="form-control form-control-sm bg-light" id="VendorAccountNumber" name="AccountNumber" readonly>
                </div>
                <div class="col-md-4">
                    <label for="IFSCcode" class="form-label">IFSC Code</label>
                    <input type="text" class="form-control form-control-sm bg-light" id="IFSCcode" name="IFSCcode" readonly>
                </div>
                <div class="col-md-4">
                    <label for="SwiftCode" class="form-label">Swift Code</label>
                    <input type="text" class="form-control form-control-sm bg-light" id="SwiftCode" name="SwiftCode" readonly>
                </div>
            </div>

            <!-- Company Details -->
            <h5 class="section-title mt-4">Company Details</h5>
            <div class="row g-3">
                <div class="col-md-6">
                    <label for="BillingAddress" class="form-label">
                        Billing Address <span class="text-danger">*</span>
                    </label>
                    <textarea class="form-control"
                              id="BillingAddress"
                              name="BillingAddress"
                              placeholder="Enter billing address"
                              minlength="10"
                              required></textarea>
                    <div class="invalid-feedback">
                        Billing address must be at least 10 characters long.
                    </div>
                </div>

                <div class="col-md-6">
                    <label for="DeliveryAddress" class="form-label">Delivery Address</label>
                    <textarea class="form-control form-control-sm bg-light" id="DeliveryAddress" name="DeliveryAddress" readonly></textarea>
                </div>
            </div>

            <!-- Terms & Conditions -->
            <h5 class="section-title mt-4">Terms & Conditions</h5>
            <div id="termsList" class="mb-3">
                <!-- Terms will be populated dynamically -->
            </div>
            <div class="invalid-feedback" id="termsFeedback" style="display: none;">
                Please select at least one term and condition.
            </div>

            <!-- Item Details -->
            <h5 class="section-title mt-4">Item Details</h5>
            <!-- Items Table -->
            <div class="table-responsive mt-4">
                <button type="button" class="btn btn-primary d-flex justify-content-end me-3 ms-auto" id="btnRestoreItem">Restore Items</button>
                <table class="table table-bordered table-striped text-center" id="tblItems">
                    <thead class="table-dark">
                        <tr>
                            <th>SRNo</th>
                            <th>Item Code</th>
                            <th class="d-none">RegisterQuotationItemCode</th>
                            <th>Item Name</th>
                            <th class="d-none">ItemCode</th>
                            <th>Description</th>
                            <th>Quantity</th>
                            <th>UOM</th>
                            <th>Unit Rate</th>
                            <th>Discount</th>
                            <th>GST</th>
                            <th>Amount</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Dynamically populated rows -->
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="11" class="text-end fw-bold">Sub Total</td>
                            <td colspan="2" class="text-center" id="subTotal"></td>
                        </tr>
                        <tr>
                            <td colspan="11" class="text-end fw-bold">Transportation Charges</td>
                            <td colspan="2" class="text-center" id="transportationCharges"></td>
                        </tr>
                        <tr class="table-secondary">
                            <td colspan="11" class="text-end fw-bold">Grand Total</td>
                            <td colspan="2" class="text-center" id="grandTotal" name="TotalAmount"></td>
                        </tr>
                    </tfoot>
                </table>
            </div>

            <!-- Action Buttons -->
            <div class="text-end mt-4">
                <button type="submit" class="btn btn-success">
                    <i class="bi bi-check2-circle me-2"></i>Create PO
                </button>
                <button type="button" class="btn btn-danger" onclick="window.location.href='SelectedQuotationListShowOK'">
                    <i class="bi bi-x-circle me-2"></i>Cancel
                </button>
            </div>
        </form>
    </div>

    <!-- Restore Modal -->
    <div class="modal fade" id="restoreModal" tabindex="-1" aria-labelledby="restoreModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white text-center">
                    <h5 class="d-flex justify-content-center text-center ms-auto text-white" id="restoreModalLabel">Restore Removed Item</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="ddlRemovedItems" class="form-label">Select Removed Item</label>
                        <select id="ddlRemovedItems" class="form-select">
                            <option value="">Select Item</option>
                        </select>
                    </div>
                    <div id="restoreDetails" style="display:none;">
                        <div class="mb-2">
                            <label class="form-label">Quantity</label>
                            <input type="number" id="restoreQty" class="form-control" min="1">
                        </div>
                        <div class="mb-2">
                            <label class="form-label">Description</label>
                            <input type="text" id="restoreDesc" class="form-control">
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" id="btnAddBack" class="btn btn-success">Add Back</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let removedItems = [];
        // ====================================================
        // ✅ Define SweetAlert mixin
        // ====================================================
        const swalWithBootstrapButtons = Swal.mixin({
            customClass: {
                confirmButton: "btn btn-success",
                cancelButton: "btn btn-danger"
            },
            buttonsStyling: false
        });

        // ====================================================
        // ✅ Global Variables
        // ====================================================
        var table;

        // ✅ Cookie Helper Functions
        function getCookie(name) {
            const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
            return match ? match[2] : null;
        }

        function setCookie(name, value, minutes) {
            const expiry = new Date(Date.now() + minutes * 60 * 1000).toUTCString();
            document.cookie = `${name}=${value}; expires=${expiry}; path=/`;
        }

        // ====================================================
        // ✅ Form Validation
        // ====================================================
        (function () {
            'use strict'

            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            const forms = document.querySelectorAll('.needs-validation')

            // Loop over them and prevent submission
            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                    // Check terms and conditions
                    const termsChecked = document.querySelectorAll('#termsList input[type=checkbox]:checked').length > 0;
                    const termsFeedback = document.getElementById('termsFeedback');

                    // ✅ Billing address validation
                    const billingAddress = document.getElementById('BillingAddress');
                    if (billingAddress.value.trim().length < 10) {
                        billingAddress.setCustomValidity('Billing address must be at least 10 characters.');
                    } else {
                        billingAddress.setCustomValidity('');
                    }

                    if (!termsChecked) {
                        termsFeedback.style.display = 'block';
                        event.preventDefault();
                        event.stopPropagation();
                    } else {
                        termsFeedback.style.display = 'none';
                    }

                    if (!form.checkValidity() || !termsChecked) {
                        event.preventDefault();
                        event.stopPropagation();
                    } else {
                        // If form is valid, proceed with PO creation
                        event.preventDefault();
                        CretePO(event);
                    }

                    form.classList.add('was-validated');
                }, false);
            });
        })()

        // ====================================================
        // ✅ Document Ready - Fetch PO Details and Initialize Page
        // ====================================================
        $(document).ready(function () {
            const mode = getCookie("POMode");
            if (mode === "JIT") {
                // CallJITPOMethod();
                console.log("Call JIT PO");
                const itemCodes = JSON.parse(localStorage.getItem("SelectedJITItems") || "[]");
                 $.ajax({
                    url: '@Url.Action("FetchJITItemPODetailsOk", "Purchase")',
                    type: "POST",
                     data: JSON.stringify({ items: itemCodes }),
                    contentType: "application/json; charset=utf-8",
                     success: function (response) {
                        console.log(response);
                        let header = response.QuotationHeader[0];
                        let staff = response.AccountantStaff;
                        let terms = response.TermsConditions;
                        let items = response.Items;

                        console.log("terms", terms);
                        console.log("items", items);
                        console.log("HEADER", header);

                        // ------------------------------
                        // 📝 Populate Header Details
                        // ------------------------------
                        $("#QuotationNo").val(header.QuotationID);
                      //  $("#QuotationDate").val(header.QuotationDateString);
                        $("#ApprovedBy").val(header.ApprovedBy);
                       // $("#ApprovedDate").val(header.OriginalApprovedDate);
                        $("#VendorName").val(header.VendorName);
                        $("#CompanyName").val(header.CompanyName);
                        $("#CompanyAddress").val(header.CompanyAddress);
                        $("#VendorContactNumber").val(header.MobileNo);
                        $("#VendorEmail").val(header.Email);
                        $("#VendorAccountNumber").val(header.AccountNumber);
                        $("#IFSCcode").val(header.IFSCCode);
                        $("#SwiftCode").val(header.SwiftCode);
                        $("#DeliveryAddress").val(header.DeliveryAddress);
                         $("#transportationCharges").text(header.ShippingCharges);


                         if (header.QuotationDateString) {
                             console.log(header.QuotationDateString);
                             $("#QuotationDate").val(moment(header.QuotationDateString, "YYYY-MM-DD").format("DD/MM/YYYY"));
                         }

                         //// Convert QuotationDateString to dd/mm/yyyy
                         if (header.OriginalApprovedDate) {
                             $("#ApprovedDate").val(moment(header.OriginalApprovedDate, "YYYY-MM-DD").format("DD/MM/YYYY"));
                         }
                         //if (row.VendorDeliveryDateString) {
                         //    $("#vendordeliverydate").val(moment(row.VendorDeliveryDateString, ["YYYY-MM-DD", "YYYY-MM-DDTHH:mm:ss"]).format("DD/MM/YYYY"));
                         //}

                        // ------------------------------
                        // 👨‍💼 Accountant Dropdown
                        // ------------------------------
                        $("#ddlAccountant").empty().append('<option value="">Select Accountant Email</option>');
                        $.each(staff, function (i, row) {
                            $("#ddlAccountant").append(`<option value="${row.StaffCode}">${row.AccountEmail}</option>`);
                        });

                        // ------------------------------
                        // 📜 Terms & Conditions
                        // ------------------------------
                        $("#termsList").empty();
                        $.each(terms, function (i, row) {
                            $("#termsList").append(`
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="${row.TermConditionId}" id="term${row.TermConditionId}">
                                    <label class="form-check-label" for="term${row.TermConditionId}">${row.TermConditionName}</label>
                                </div>
                            `);
                        });

                        // ------------------------------
                        // 📦 Items Table Initialization
                        // ------------------------------
                        table = $('#tblItems').DataTable({
                            destroy: true,
                            data: items,
                            columns: [
                                { data: "SRNO", className: "text-center"},
                                { data: "ItemCode", className: "text-center"},
                                { data: "RegisterQuotationItemCode", className: "text-center",visible: false },
                                { data: "ItemName", className: "text-center"},
                                { data: "ItemCode", className: "text-center", visible: false},
                                {
                                    data: "Description",
                                    className: "text-center",
                                    render: function (data) {
                                        let safe = (data === null || data === undefined) ? '' : String(data);
                                        return `<span data-bs-toggle="tooltip" title="${safe}">${safe}</span>`;
                                    }
                                },
                                { data: "Quantity", className: "text-center"},
                                { data: "UOM",className: "text-center" },
                                { data: "CostPerUnit", render: data => '₹' + parseFloat(data).toFixed(2) },
                                {
                                    data: "Discount",
                                    className: "text-center",
                                    render: function (data) {
                                        if (data == null || data === "") return "0%";
                                        return data + "%";
                                    }
                                },
                                { data: "GST",className: "text-center"},
                                { data: "Amount",className: "text-center", render: data => '₹' + parseFloat(data).toFixed(2) },
                                { data: null, orderable: false, searchable: false, render: () => '<a href="#" class="remove-link">Remove</a>' }
                            ],
                            paging: true,
                            searching: false,
                            ordering: false,
                            lengthChange: false,
                            pageLength: 10,
                            drawCallback: function () {
                                // Re-number rows
                                this.api().rows({ order: 'applied', search: 'applied' }).nodes().each(function (row, i) {
                                    $(row).find('td:eq(0)').text(i + 1);
                                });
                                // Recalculate totals
                                updateTableCalculations();

                                // Initialize tooltips
                                initializeTooltips();

                            }
                        });
                        // Recalculate totals
                        updateTableCalculations();
                        // Remove link handler
                        $('#tblItems tbody').on('click', '.remove-link', function (e) {
                            e.preventDefault();
                            let row = table.row($(this).closest('tr'));
                            let rowData = row.data();
                            if (row) {
                                removedItems.push(rowData); // store removed item
                                row.remove().draw();
                                console.log("Removed item stored:", removedItems);
                            }
                        });
                    },
                    error: function (err) {
                        console.error(err);
                        alert("Failed to create JIT PO.");
                    }
                });
            } else {
                $.ajax({
                url: '/Purchase/GetCreatePoDetailsOK',
                type: 'GET',
                success: function (response) {
                    let header = response.QuotationHeader[0];
                    let staff = response.AccountantStaff;
                    let terms = response.TermsConditions;
                    let items = response.Items;

                    console.log("terms", terms);
                    console.log("items", items);
                    console.log("HEADER", header);

                    // ------------------------------
                    // 📝 Populate Header Details
                    // ------------------------------
                    $("#QuotationNo").val(header.QuotationID);
                    // $("#QuotationDate").val(header.QuotationDateString);
                    if (header.QuotationDateString) {
                        console.log(header.QuotationDateString);
                        $("#QuotationDate").val(moment(header.QuotationDateString, "YYYY-MM-DD").format("DD/MM/YYYY"));
                    }
                    $("#ApprovedBy").val(header.ApprovedBy);
                    // $("#ApprovedDate").val(header.OriginalApprovedDate);
                    if (header.OriginalApprovedDate) {
                        $("#ApprovedDate").val(moment(header.OriginalApprovedDate, "YYYY-MM-DD").format("DD/MM/YYYY"));
                    }
                    $("#VendorName").val(header.VendorName);
                    $("#CompanyName").val(header.CompanyName);
                    $("#CompanyAddress").val(header.CompanyAddress);
                    $("#VendorContactNumber").val(header.MobileNo);
                    $("#VendorEmail").val(header.Email);
                    $("#VendorAccountNumber").val(header.AccountNumber);
                    $("#IFSCcode").val(header.IFSCCode);
                    $("#SwiftCode").val(header.SwiftCode);
                    $("#DeliveryAddress").val(header.DeliveryAddress);
                    $("#TotalAmount").val(header.TotalAmount);
                    $("#transportationCharges").text(header.ShippingCharges);
                    $("#grandTotal").text(header.TotalAmount);
                    $("#subTotal").text('₹' + (header.SubAmount).toFixed(2));

                    // ------------------------------
                    // 👨‍💼 Accountant Dropdown
                    // ------------------------------
                    $("#ddlAccountant").empty().append('<option value="">Select Accountant Email</option>');
                    $.each(staff, function (i, row) {
                        $("#ddlAccountant").append(`<option value="${row.StaffCode}">${row.AccountEmail}</option>`);
                    });

                    // ------------------------------
                    // 📜 Terms & Conditions
                    // ------------------------------
                    $("#termsList").empty();
                    $.each(terms, function (i, row) {
                        $("#termsList").append(`
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="${row.TermConditionId}" id="term${row.TermConditionId}">
                                <label class="form-check-label" for="term${row.TermConditionId}">${row.TermConditionName}</label>
                            </div>
                        `);
                    });

                    // ------------------------------
                    // 📦 Items Table Initialization
                    // ------------------------------
                    table = $('#tblItems').DataTable({
                        destroy: true,
                        data: items,
                        columns: [
                            { data: "SRNO" },
                            { data: "ItemCode" },
                            { data: "RegisterQuotationItemCode", visible: false },
                            { data: "ItemName" },
                            {data:"ItemCode", visible: false},
                            {
                                data: "Description",
                                render: function (data) {
                                    let safe = (data === null || data === undefined) ? '' : String(data);
                                    return `<span data-bs-toggle="tooltip" title="${safe}">${safe}</span>`;
                                }
                            },
                            { data: "Quantity" },
                            { data: "UOM" },
                            { data: "CostPerUnit", render: data => '₹' + parseFloat(data).toFixed(2) },
                            { data: "Discount" },
                            { data: "GST" },
                            { data: "Amount", render: data => '₹' + parseFloat(data).toFixed(2) },
                            { data: null, orderable: false, searchable: false, render: () => '<a href="#" class="remove-link">Remove</a>' }
                        ],
                        paging: true,
                      //  searching: true,
                        ordering: false,
                        lengthChange: false,
                        pageLength: 10,
                        drawCallback: function () {
                            // Re-number rows
                            this.api().rows({ order: 'applied', search: 'applied' }).nodes().each(function (row, i) {
                                $(row).find('td:eq(0)').text(i + 1);
                            });

                            // Initialize tooltips
                            initializeTooltips();

                            // Recalculate totals
                            updateTableCalculations();
                        }
                    });

                    // Remove link handler
                    $('#tblItems tbody').on('click', '.remove-link', function (e) {
                        e.preventDefault();
                        let row = table.row($(this).closest('tr'));
                        let rowData = row.data();
                        if (row) {
                            removedItems.push(rowData); // store removed item
                            row.remove().draw();
                            console.log("Removed item stored:", removedItems);
                        }
                    });
                },
                error: function (err) {
                    console.log(err);
                }
            });
            }

        });
        $("#btnRestoreItem").click(function () {
            if (removedItems.length === 0) {
                showWarningToast("No removed items to restore!");
                return;
            }

            // clear and repopulate dropdown
            $("#ddlRemovedItems").empty().append('<option value="">Select Item</option>');
            $.each(removedItems, function (i, item) {
                $("#ddlRemovedItems").append(`<option value="${i}">${item.ItemName} (${item.ItemCode})</option>`);
            });

            // reset fields
            $("#restoreDetails").hide();
            $("#restoreQty").val('');
            $("#restoreDesc").val('');

            // show modal
            $("#restoreModal").modal('show');
        });

        $("#ddlRemovedItems").change(function () {
            let index = $(this).val();
            if (index === "") {
                $("#restoreDetails").hide();
                return;
            }

            let item = removedItems[index];
            $("#restoreDetails").show();
            $("#restoreQty").val(item.Quantity).prop("readonly", true);
            $("#restoreDesc").val(item.Description).prop("readonly", true);

        });


        $("#btnAddBack").click(function () {
            let index = $("#ddlRemovedItems").val();
            if (index === "") {
                showWarningToast("Please select an item to restore!");
                return;
            }

            let item = removedItems[index];
            item.Quantity = $("#restoreQty").val();
            item.Description = $("#restoreDesc").val();

            // Add back to DataTable
            table.row.add(item).draw();

            // Remove from removedItems array
            removedItems.splice(index, 1);

            $("#restoreModal").modal('hide');
            updateTableCalculations();
            showSuccessToast("Item restored successfully!");
        });


        // ====================================================
        // ✅ Toast Notification Helper
        // ====================================================
        toastr.options = {
            closeButton: true,
            progressBar: true,
            newestOnTop: true,
            positionClass: "toast-top-right",
            preventDuplicates: true,
            timeOut: 3000,
            extendedTimeOut: 1000,
            showDuration: 300,
            hideDuration: 300,
            showMethod: "slideDown",
            hideMethod: "fadeOut"
        };
        // ⚠️ Warning Toast
        function showWarningToast(message) {
            toastr.warning(message, "Warning");
        }

        // ✅ Success Toast
        function showSuccessToast(message) {
            toastr.success(message, "Success");
        }

        // ====================================================
        // ✅ Tooltip Initializer
        // ====================================================
        function initializeTooltips() {
            $('[data-bs-toggle="tooltip"]').each(function () {
                const existing = bootstrap.Tooltip.getInstance(this);
                if (existing) existing.dispose();
            });

            $('[data-bs-toggle="tooltip"]').each(function () {
                new bootstrap.Tooltip(this, {
                    placement: 'top',
                    customClass: 'tooltip-dark',
                    popperConfig: {
                        modifiers: [
                            { name: 'flip', options: { fallbackPlacements: [] } }
                        ]
                    }
                });
            });
        }

        // ====================================================
        // ✅ Recalculate Subtotal & Grand Total
        // ====================================================
        function updateTableCalculations() {
            if (!table) return;
            let subamount = 0;

            table.rows({ search: 'applied' }).every(function () {
                let rowData = this.data();
                let amount = parseFloat(rowData.Amount) || 0;
                subamount += amount;
            });

            $("#subTotal").text('₹' + subamount.toFixed(2));
            let transportation = parseFloat($("#transportationCharges").text().replace(/[^0-9.-]+/g, '')) || 0;
            let grandTotal = subamount + transportation;

            $("#grandTotal").text('₹' + grandTotal.toFixed(2));
            $("#TotalAmount").val(grandTotal.toFixed(2));

            console.log("Grand Total Recalculated:", grandTotal);
            console.log("Subamount:", subamount);
        }

        function CretePO(e) {
            e.preventDefault();

            // Remove old hidden fields
            $(".po-form input[name='ItemsJson']").remove();
            $(".po-form input[name='Terms']").remove();

            // Collect items
            let poItems = [];
            table.rows({ search: 'applied' }).every(function () {
                let rowData = this.data();
                poItems.push({ RQItemCode: rowData.RegisterQuotationItemCode });
            });
            console.log("PO Items:", poItems);
            // Add hidden field for items
            $(".po-form").append(
                `<input type="hidden" name="POItems" value='${JSON.stringify(poItems)}'/>`
            );

            let Itemslst = [];
            table.rows({ search: 'applied' }).every(function () {
                let rowData = this.data();
                Itemslst.push({ ItemCode: rowData.ItemCode });
            });
            console.log("Itemslst:", Itemslst);

            // Add hidden field for items
            $(".po-form").append(
                `<input type="hidden" name="Itemslst" value='${JSON.stringify(Itemslst)}'/>`
            );

            // Collect terms
            let checkedTermIds = [];
            $('#termsList input[type=checkbox]:checked').each(function () {
                checkedTermIds.push($(this).val());
            });
            let idsString = checkedTermIds.join(",");
            $(".po-form").append(
                `<input type="hidden" name="TermConditionIds" value="${idsString}" />`
            );

            console.log("Selected TermCondition IDs:", idsString);

            // Calculate grand total
            let grandTotalNumber = parseFloat($("#grandTotal").text().replace(/[^0-9.-]+/g, ''));
            $("#TotalAmount").val(grandTotalNumber.toFixed(2));

            // Serialize form
            let formData = $(".po-form").serialize();
            console.log("Serialized Form Data:", formData);

            // Build model (for debug)
            let model = {
                RegisterQuotationCode: $("#QuotationNo").val(),
                UserCode: $("#ddlAccountant").val(),
                TotalAmount: $("#grandTotal").val(),
                TermsConditionId: idsString,
                BillingAddress: $("#BillingAddress").val(),
                POItems: poItems,
                Itemcodes: Itemslst
            };
            console.log("Model", model);

            //-----------------------------------------------
            // ✅ Confirmation Alert
            //-----------------------------------------------
            swalWithBootstrapButtons.fire({
                title: "Are you sure?",
                text: "Do you really want to create this Purchase Order?",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, create it!",
                cancelButtonText: "No, cancel!",
                reverseButtons: false, // Yes first, Cancel second
                customClass: {
                    confirmButton: 'btn btn-success px-4', // green button
                    cancelButton: 'btn btn-danger px-4',   // red button
                    actions: 'swal2-custom-actions'        // for spacing between buttons
                },
                buttonsStyling: false // disable SweetAlert2 default button styling
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Purchase/SavePOOK',
                        type: 'POST',
                        data: formData,
                        success: function (res) {
                            if (res.success) {
                                swalWithBootstrapButtons.fire({
                                    title: "Created!",
                                    text: res.message,
                                    icon: "success",
                                    showConfirmButton: false,
                                    timer: 1500
                                }).then(() => {
                                    if (res.sessionValue === "OK") {
                                        setTimeout(function () {
                                            window.location.href = "/Purchase/JustInTimeItemListOK";
                                        }, 800);
                                    } else {
                                        setTimeout(function () {
                                            window.location.href = "/Purchase/SelectedQuotationListShowOK";
                                        }, 800);
                                    }
                                });
                            } else {
                                swalWithBootstrapButtons.fire({
                                    title: "Error",
                                    text: res.message,
                                    icon: "error"
                                });
                            }
                        },
                        error: function (err) {
                            console.error(err);
                            swalWithBootstrapButtons.fire({
                                title: "Error",
                                text: "An unexpected error occurred while saving PO.",
                                icon: "error"
                            });
                        }
                    });
                }
            });
        }

        // ====================================================
        // ✅ End of Script
        // ====================================================
    </script>
</body>
</html>