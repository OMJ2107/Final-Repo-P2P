@{
    ViewBag.Title = "PO Reports";
}

@model IEnumerable<P2PLibray.Purchase.Purchase>


<div id="pagecontent" class="main-content">
    <div class="container mt-5">
        <!-- Date Range Picker -->
        <div class="row mb-3">
            <div class="col-md-3">
                <div class="input-group">
                    <span class="input-group-text bg-primary text-white">
                        <i class="bi bi-calendar-event"></i>
                    </span>
                    <input type="text" id="dateRange" class="form-control" placeholder="Select Date Range" />
                </div>
            </div>
        </div>

        <!-- Bar Chart + Total -->
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card p-3 shadow h-100">
                    <h4 class="text-primary fw-bold text-center mb-3">Purchase Orders by Vendor</h4>
                    <div id="poBarChart" style="height:400px;"></div>
                </div>
            </div>
        </div>



        <!-- Toast warning -->
        <div class="position-fixed top-0 end-0 p-3" style="z-index:1100">
            <div id="exportToast" class="toast align-items-center text-bg-warning border-0" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                    <div class="toast-body">⚠️ Select at least one row before exporting.</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            </div>
        </div>

        <!-- Table -->
        <div class="card p-3 shadow">
            <h3 class="mb-3 text-center text-primary">Purchase Order List</h3>
            <div class="table-responsive">
                <table id="poTable" class="table table-striped table-bordered nowrap w-100">
                    <thead class="table-dark">
                        <tr>
                            <th><input type="checkbox" id="selectAll" /></th>
                            <th>Sr.No</th>
                            <th>PO Code</th>
                            <th>Vendor Name</th>
                            <th>Company Name</th>
                            <th>Added By</th>
                            <th>Approved By</th>
                            <th>Approved Date</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var po in Model)
                        {
                            <tr>
                                <td><input type="checkbox" class="rowCheckbox" value="@po.POCode" /></td>
                                <td></td> <!-- serial number -->
                                <td>@po.POCode</td>
                                <td>@po.VendorName</td>
                                <td>@po.VendorCompanyName</td>
                                <td>@po.AddedByName</td>
                                <td>@po.ApprovedRejectedByName</td>
                                <td>@(po.ApprovedRejectedDateAT.HasValue? po.ApprovedRejectedDateAT.Value.ToString("dd'/'MM'/'yyyy", System.Globalization.CultureInfo.InvariantCulture): "")</td>
                                <td>
                                    <span class="@(po.StatusName == "Approved" ? "badge bg-success" :
                                           po.StatusName == "Rejected" ? "badge bg-danger" : "badge bg-secondary")">
                                        @po.StatusName
                                    </span>
                                </td>

                                <td>
                                    <button id="btnview" type="button"
                                            class="btn btn-sm btn-primary view-items"
                                            data-pocode="@po.POCode">
                                        <i class="bi bi-eye"></i>
                                    </button>

                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

    </div>
</div>


@*Modal View*@
<div class="modal fade" data-bs-backdrop="true" id="poItemsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <div class="w-100 text-center">
                    <h5 class="modal-title text-white bg-gradient-primary mb-3">Purchase Order Items</h5>
                </div>

                <button type="button" class="btn-close btn-close-white mb-2" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <table id="poItemsTable" class="table table-striped table-bordered w-100">
                    <thead class="table-dark">
                        <tr>
                            <th class="text-center">Sr.</th>
                            <th class="text-center">Item Name</th>
                            <th class="text-center">Quantity</th>
                            <th class="text-center">Cost Per Unit</th>
                            <th class="text-center">Discount</th>
                            <th class="text-center">Tax Rate</th>
                            <th class="text-center">Total Amount</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                    <tfoot>
                        <tr>
                            <th colspan="6" class="text-end">Total Amount:</th>
                            <th></th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
</div>




<style>
    #poTable th, #poTable td {
        text-align: center !important;
        vertical-align: middle !important;
    }
</style>
<style>
    /* Center headings and cells in the modal table */
    #poItemsTable thead th {
        text-align: center;
        vertical-align: middle;
    }

    #poItemsTable tbody td {
        text-align: center;
        vertical-align: middle;
    }
</style>



<script>


    // Clear processing state for all DataTable buttons
    window.__dt_clearAllProcessing = function () {
        try {
            // Try to clear via DataTables API
            var tables = $.fn.dataTable.tables();
            for (var i = 0; i < tables.length; i++) {
                try {
                    var api = $(tables[i]).DataTable();
                    if (!api || !api.buttons) continue;
                    var btnCount = (api.buttons().nodes && api.buttons().nodes().length) || 0;
                    for (var j = 0; j < btnCount; j++) {
                        try { api.button(j).processing(false); } catch (e) { }
                    }
                } catch (e) { }
            }
        } catch (e) { }

        // Fallback DOM cleanup
        try {
            $('.dt-button').removeClass('dt-button-processing');
            $('.dt-button').prop('disabled', false);
        } catch (e) { }
    };

    // Listen for print-done message from print window
    window.addEventListener('message', function (ev) {
        if (ev && ev.data === 'dt_print_done') {
            window.__dt_clearAllProcessing();
        }
    });

    // Store original button actions if not already stored
    if (!$.fn.dataTable.ext.buttons.pdfHtml5.__originalAction) {
        $.fn.dataTable.ext.buttons.pdfHtml5.__originalAction =
            $.fn.dataTable.ext.buttons.pdfHtml5.action;
    }
    if (!$.fn.dataTable.ext.buttons.print.__originalAction) {
        $.fn.dataTable.ext.buttons.print.__originalAction =
            $.fn.dataTable.ext.buttons.print.action;
    }
    if (!$.fn.dataTable.ext.buttons.excelHtml5.__originalAction) {
        $.fn.dataTable.ext.buttons.excelHtml5.__originalAction =
            $.fn.dataTable.ext.buttons.excelHtml5.action;
    }
    if (!$.fn.dataTable.ext.buttons.csvHtml5.__originalAction) {
        $.fn.dataTable.ext.buttons.csvHtml5.__originalAction =
            $.fn.dataTable.ext.buttons.csvHtml5.action;
    }



    var table, poChart;
    var startDate = null, endDate = null;

    $(document).ready(function () {

        // Toastr settings
        toastr.options = {
            closeButton: true,
            progressBar: true,
            preventDuplicates: true,
            newestOnTop: true,
            positionClass: "toast-top-right",
            timeOut: "3000"
        };

        function showExportToast() {
            toastr.warning("⚠️ Select at least one row before exporting.");
        }

        // Initialize DataTable

        table = $('#poTable').DataTable({
            scrollX: false,
            autoWidth: false,
            renderer: 'bootstrap',
            ordering: false,
            dom: "<'row mb-2'<'col-6'B><'col-6 text-end'f>>" +
                "<'row'<'col-12'tr>>" +
                "<'row mt-2'<'col-5'i><'col-7 text-end'p>>",

            columnDefs: [
                { targets: 0, orderable: false, searchable: false },
                { targets: 1, orderable: false, searchable: false },
                { targets: -1, orderable: false, searchable: false }, // Action column
                { targets: 5, visible: false, searchable: false }
            ],

            //color of status
            createdRow: function (row, data, dataIndex) {
                var status = data[8]; // Status column index (0-based)
                if (status === "Approved") {
                    $('td', row).eq(8).addClass('text-success');
                } else if (status === "Rejected") {
                    $('td', row).eq(8).addClass('text-danger');
                }
            },

            order: [[9, 'asc'], [2, 'asc']],

            //print
            buttons: [
                //print
                {
                    extend: 'print',
                    title: 'RFQ List',
                    text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('input.rowCheckbox').prop('checked');
                        },
                        columns: [1, 2, 3, 4, 5, 6, 7, 8, 9],
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 1) {
                                    // Serial number based on filtered & checked rows
                                    var filteredIndexes = table.rows({ filter: 'applied' }).indexes().toArray();
                                    var checkedIndexes = filteredIndexes.filter(i => {
                                        var node = table.row(i).node();
                                        return $(node).find('input.rowCheckbox').prop('checked');
                                    });
                                    return checkedIndexes.indexOf(row) + 1;
                                }
                                if (typeof data === 'string') return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                return data;
                            }
                        }
                    },
                    //action: function (e, dt, button, config) {
                    //    if ($('.rowCheckbox:checked').length === 0) {
                    //        showExportToast();
                    //        return;
                    //    }
                    //    $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                    //},
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);

                        // Support both checkbox classes
                        var selectedCount = selected || $('.rowCheckbox:checked').length;

                        // --- No selection ---
                        if (selectedCount === 0) {
                            showExportToast();
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        // --- Show spinner ---
                        try { btnApi.processing(true); } catch (err) { }

                        // --- Call original Print action ---
                        try {
                            $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                        } catch (err) {
                            console.error('Print export error:', err);
                            // Ensure spinner stops on error
                            setTimeout(function () { try { btnApi.processing(false); } catch (e) { } }, 300);
                            throw err;
                        }

                        // --- Fallback: stop spinner after 2s ---
                        setTimeout(function () {
                            try { btnApi.processing(false); } catch (err) { }
                        }, 2000);
                    },

                    customize: function (win) {
                        // Center the title
                        $(win.document.body).find('h1').css({
                            'text-align': 'center',
                            'font-size': '16pt'
                        }).text('RFQ List');

                        // Add export date below the title
                        var exportDate = new Date().toLocaleDateString('en-GB');
                        $(win.document.body).find('h1').after('<div style="text-align:center; margin-bottom:10px;">Generated Date: ' + exportDate + '</div>');

                        // Style table header black
                        $(win.document.body).find('table thead').css({
                            'background-color': '#212529',
                            'color': '#ffffff',
                            'text-align': 'center'
                        });

                        // Center table cells
                        $(win.document.body).find('table tbody td').css('text-align', 'center');
                    }
                },


                //pdf

                {
                    extend: 'pdfHtml5',
                    title: 'Purchase Order List',
                    text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                    orientation: 'landscape',
                    pageSize: 'A4',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('input.rowCheckbox').prop('checked');
                        },
                        columns: [1, 2, 3, 4, 5, 6, 7, 8], // exclude Action column
                        format: {
                            body: function (data, row, column, node) {
                                // Strip HTML tags
                                if (typeof data === 'string') {
                                    data = data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                }
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);

                        // Support both checkbox classes
                        var selectedCount = selected || $('.rowCheckbox:checked').length;

                        // --- No selection ---
                        if (selectedCount === 0) {
                            showExportToast();
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        // --- Show spinner ---
                        try { btnApi.processing(true); } catch (err) { }

                        // --- Patch pdfMake download to stop spinner (only once) ---
                        if (window.pdfMake && pdfMake.createPdf && !pdfMake._patchedForDT) {
                            (function () {
                                var origCreate = pdfMake.createPdf;
                                pdfMake.createPdf = function (docDefinition) {
                                    var pdfDoc = origCreate.call(pdfMake, docDefinition);
                                    var origDownload = pdfDoc.download;
                                    pdfDoc.download = function (filename, cb) {
                                        origDownload.call(pdfDoc, filename, function () {
                                            try { btnApi.processing(false); } catch (err) { }
                                            if (typeof cb === 'function') cb();
                                        });
                                    };
                                    return pdfDoc;
                                };
                                pdfMake._patchedForDT = true; // patch only once
                            })();
                        }

                        // --- Call original PDF action ---
                        $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);

                        // --- Fallback: stop spinner after 1.5s if something fails ---
                        setTimeout(function () {
                            try { btnApi.processing(false); } catch (err) { }
                        }, 1500);
                    },

                    customize: function (doc) {
                        // Center the title
                        doc.content[0].alignment = 'center';
                        doc.content[0].fontSize = 14;

                        // Add export date below title
                        var exportDate = new Date().toLocaleDateString('en-GB');
                        doc.content.splice(1, 0, {
                            text: 'Generated Date: ' + exportDate,
                            alignment: 'center',
                            margin: [0, 0, 0, 8],
                            fontSize: 10
                        });

                        // Table header styling
                        doc.styles.tableHeader.alignment = 'center';
                        doc.styles.tableHeader.fillColor = '#212529';
                        doc.styles.tableHeader.color = '#ffffff';
                        doc.styles.tableHeader.bold = true;

                        // Add serial numbers in first column
                        var body = doc.content[doc.content.length - 1].table.body;
                        for (var i = 1; i < body.length; i++) {
                            body[i][0].text = i; // first column = serial number
                            body[i][0].alignment = 'center';
                        }

                        // Table border layout
                        var objLayout = {};
                        objLayout['hLineWidth'] = function () { return 0.5; };
                        objLayout['vLineWidth'] = function () { return 0.5; };
                        objLayout['hLineColor'] = function () { return '#aaa'; };
                        objLayout['vLineColor'] = function () { return '#aaa'; };
                        objLayout['paddingLeft'] = function () { return 4; };
                        objLayout['paddingRight'] = function () { return 4; };
                        doc.content[doc.content.length - 1].layout = objLayout;
                    }
                },


                // Excel
                // Excel - Working Version
                {
                    extend: 'excelHtml5',
                    text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                    titleAttr: 'Excel',
                    title: '',
                    exportOptions: {
                        columns: [2, 3, 4, 5, 6, 7, 8], // Exclude serial number column since we'll add it manually
                        rows: function (idx, data, node) {
                            return $(node).find('input.rowCheckbox').prop('checked');
                        },
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                // Remove HTML tags from all cells
                                if (typeof data === 'string') return data.replace(/<[^>]*>/g, '').trim();
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);

                        // Support both checkbox classes
                        var selectedCount = selected || $('.rowCheckbox:checked').length;

                        // --- No selection ---
                        if (selectedCount === 0) {
                            showExportToast();
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        // --- Show spinner ---
                        try { btnApi.processing(true); } catch (err) { }

                        // Call original excelHtml5 action
                        $.fn.dataTable.ext.buttons.excelHtml5.__originalAction.call(this, e, dt, button, config);

                        // Fallback clear spinner after short delay
                        setTimeout(function () { try { btnApi.processing(false); } catch (err) { } }, 300);
                    },
                    customize: function (xlsx) {
                        // ✅ Rename worksheet
                        var sheet = xlsx.xl.worksheets['sheet1.xml'];
                        $('sheet', xlsx.xl['workbook.xml']).attr('name', 'Purchase_Order_List');

                        // ✅ Date in dd/mm/yyyy format
                        var now = new Date();
                        var day = String(now.getDate()).padStart(2, '0');
                        var month = String(now.getMonth() + 1).padStart(2, '0');
                        var year = now.getFullYear();
                        var formattedDate = day + '/' + month + '/' + year;

                        var sheetData = $('sheetData', sheet);

                        // Shift all data rows down by 2 (for title + date)
                        sheetData.find('row').each(function () {
                            var r = parseInt($(this).attr('r'));
                            $(this).attr('r', r + 2);
                            $(this).find('c').each(function () {
                                var cellRef = $(this).attr('r');
                                var col = cellRef.replace(/[0-9]/g, '');
                                $(this).attr('r', col + (r + 2));
                            });
                        });

                        // ✅ Insert Title row (now in A1)
                        var titleRow =
                            '<row r="1">' +
                            '<c t="inlineStr" r="A1">' +
                            '<is><t>Purchase Order List</t></is>' +
                            '</c>' +
                            '</row>';

                        // ✅ Insert Generated Date row (now in A2)
                        var dateRow =
                            '<row r="2">' +
                            '<c t="inlineStr" r="A2">' +
                            '<is><t>Generated Date: ' + formattedDate + '</t></is>' +
                            '</c>' +
                            '</row>';

                        // Add rows to the top
                        sheetData.prepend(dateRow);
                        sheetData.prepend(titleRow);

                        // ✅ Add merge cells for centering title and date across all columns
                        var totalCols = 8; // Sr.No + your 7 columns [2, 3, 4, 5, 6, 7, 8]
                        var endCol = String.fromCharCode(64 + totalCols); // A=65, H=72 for 8 columns

                        var mergeCells = $('mergeCells', sheet);
                        if (mergeCells.length === 0) {
                            $('worksheet', sheet).append('<mergeCells count="2"/>');
                            mergeCells = $('mergeCells', sheet);
                        } else {
                            var currentCount = parseInt(mergeCells.attr('count') || 0);
                            mergeCells.attr('count', currentCount + 2);
                        }
                        // Add title merge (A1:H1)
                        mergeCells.append('<mergeCell ref="A1:' + endCol + '1"/>');
                        // Add date merge (A2:H2)
                        mergeCells.append('<mergeCell ref="A2:' + endCol + '2"/>');

                        // ✅ Add Sr.No header and serial numbers to data rows
                        var dataRows = $(sheet).find('row').slice(2); // Skip title and date rows

                        // Add Sr.No header to the first data row (which is now row 3)
                        var headerRow = $(dataRows[0]);
                        var headerCells = headerRow.find('c');

                        // Create Sr.No header cell
                        var srNoHeader = '<c t="inlineStr" r="A3"><is><t>Sr.No</t></is></c>';

                        // Shift existing headers to the right
                        headerCells.each(function () {
                            var cellRef = $(this).attr('r');
                            var col = cellRef.replace(/\d+/g, '');
                            var newCol = String.fromCharCode(65 + (col.charCodeAt(0) - 64)); // B, C, D, etc.
                            $(this).attr('r', newCol + '3');
                        });

                        // Add Sr.No header at the beginning
                        headerRow.prepend(srNoHeader);

                        // Add serial numbers to data rows (starting from row 4)
                        dataRows.slice(1).each(function (index) {
                            var row = $(this);
                            var rowNum = parseInt(row.attr('r'));
                            var cells = row.find('c');

                            // Create serial number cell
                            var srNoCell = '<c t="inlineStr" r="A' + rowNum + '"><is><t>' + (index + 1) + '</t></is></c>';

                            // Shift existing cells to the right
                            cells.each(function () {
                                var cellRef = $(this).attr('r');
                                var col = cellRef.replace(/\d+/g, '');
                                var newCol = String.fromCharCode(65 + (col.charCodeAt(0) - 64)); // B, C, D, etc.
                                $(this).attr('r', newCol + rowNum);
                            });

                            // Add serial number at the beginning
                            row.prepend(srNoCell);
                        });

                        // ✅ Add styles for centering + font
                        var styles = xlsx.xl['styles.xml'];
                        var cellXfs = $('cellXfs', styles);
                        var fonts = $('fonts', styles);

                        // Count existing fonts
                        var fontCount = $('font', fonts).length;

                        // Add new font for title (bold, size 14)
                        fonts.append(
                            '<font>' +
                            '<sz val="14"/>' +  // Font size 14
                            '<b/>' +             // Bold
                            '<color rgb="000000"/>' +  // Black
                            '</font>'
                        );

                        // Add new font for date (italic, size 11)
                        fonts.append(
                            '<font>' +
                            '<sz val="11"/>' +   // Font size 11
                            '<i/>' +             // Italic
                            '<color rgb="000000"/>' +  // Black
                            '</font>'
                        );

                        // Count existing cellXfs
                        var styleCount = $('xf', cellXfs).length;

                        // Add new style for title (use new bold/large font, center alignment)
                        cellXfs.append(
                            '<xf numFmtId="0" fontId="' + fontCount + '" fillId="0" borderId="0" xfId="0" applyFont="1" applyAlignment="1">' +
                            '<alignment horizontal="center" vertical="center" wrapText="1"/>' +
                            '</xf>'
                        );

                        // Add new style for date (use new italic font, center alignment)
                        cellXfs.append(
                            '<xf numFmtId="0" fontId="' + (fontCount + 1) + '" fillId="0" borderId="0" xfId="0" applyFont="1" applyAlignment="1">' +
                            '<alignment horizontal="center" vertical="center" wrapText="1"/>' +
                            '</xf>'
                        );

                        // Apply new style indexes to the cells
                        $('c[r=A1]', sheet).attr('s', styleCount);       // Title style
                        $('c[r=A2]', sheet).attr('s', styleCount + 1);   // Date style
                    }
                },

                // CSV
                {
                    extend: 'csvHtml5',
                    title: 'Purchase Order List',
                    text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('input.rowCheckbox').prop('checked');
                        },
                        columns: [2, 3, 4, 5, 6, 7, 8], // Include serial number column (1) and exclude checkbox (0) & action (9)
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                // Serial number column (first column in export)
                                if (colIdx === 0) return rowIdx + 1;
                                // Remove HTML tags from other cells
                                if (typeof data === 'string') return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        var selectedCount = dt.rows().nodes().to$().find('input.row-select:checked').length
                            || $('.rowCheckbox:checked').length;

                        if (selectedCount === 0) {
                            showExportToast();
                            return;
                        }

                        var btnApi = dt.button(button);
                        try { btnApi.processing(true); } catch (err) { }

                        // Call original CSV export
                        try {
                            $.fn.dataTable.ext.buttons.csvHtml5.__originalAction
                                ? $.fn.dataTable.ext.buttons.csvHtml5.__originalAction.call(this, e, dt, button, config)
                                : $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                        } catch (err) {
                            console.error('CSV export error:', err);
                        }

                        // Stop spinner shortly after
                        setTimeout(function () {
                            try { btnApi.processing(false); } catch (err) { }
                        }, 300);
                    },
                    customize: function (csv) {
                        var lines = csv.split('\n');
                        if (!lines || lines.length === 0) return csv;

                        var newLines = [];

                        // Process header row - add "Sr.No" as first column
                        if (lines[0]) {
                            var headers = lines[0].split(',');
                            headers.unshift('"Sr.No"');
                            newLines.push(headers.join(','));
                        }

                        // Process data rows - add serial numbers
                        for (var i = 1; i < lines.length; i++) {
                            if (lines[i].trim()) {
                                var row = lines[i].split(',');
                                row.unshift('"' + i + '"'); // Add serial number starting from 1
                                newLines.push(row.join(','));
                            }
                        }

                        return newLines.join('\n');
                    }
                },

                'colvis'
            ]
        });


        // Date filter (Approved Date index 7)
        $.fn.dataTable.ext.search.push(function (settings, data) {
            var approveDateStr = data[7]; // Approved Date column
            if (!approveDateStr) return true;

            // Split by slash '/' since your date format is dd/MM/yyyy
            var parts = approveDateStr.split("/");
            if (parts.length !== 3) return true;

            var approveDate = new Date(parts[2], parts[1] - 1, parts[0]);
            approveDate.setHours(0, 0, 0, 0);

            var s = startDate ? new Date(startDate) : null;
            var e = endDate ? new Date(endDate) : null;
            if (s) s.setHours(0, 0, 0, 0);
            if (e) e.setHours(0, 0, 0, 0);

            if (s && approveDate < s) return false;
            if (e && approveDate > e) return false;

            return true;
        });




        // Fill serial number
        table.on('draw.dt', function () {
            var pageInfo = table.page.info();
            table.column(1, { page: 'current' }).nodes().each(function (cell, i) {
                cell.innerHTML = pageInfo.start + i + 1;
            });
        }).draw();

        // Checkbox logic
        $(document).on('change', '#selectAll', function () {
            $('.rowCheckbox').prop('checked', this.checked);
        });
        $(document).on('change', '.rowCheckbox', function () {
            $('#selectAll').prop('checked', $('.rowCheckbox:checked').length === $('.rowCheckbox').length);
        });

        // Date Range Picker
        $('#dateRange').daterangepicker({
            autoUpdateInput: false,
            locale: {
                cancelLabel: 'Clear',
                format: 'DD/MM/YYYY',
                applyLabel: 'Apply'
            },
            ranges: {
                'Today': [moment(), moment()],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 1 Month': [moment().subtract(1, 'months'), moment()],
                'Last 3 Months': [moment().subtract(3, 'months'), moment()],
                'Last 1 Year': [moment().subtract(12, 'months'), moment()]
            }
        }, function (start, end) {
            startDate = start.toDate();
            endDate = end.toDate();
            $('#dateRange').val(start.format('DD/MM/YYYY') + ' - ' + end.format('DD/MM/YYYY'));
            table.draw();
        });
        $('#dateRange').on('cancel.daterangepicker', function () {
            $(this).val('Select Date Range');
            startDate = endDate = null;
            table.draw();
        });
        $('#dateRange').val('Select Date Range');

        // Highcharts Bar Chart
        function buildBarChart(data) {
            var categories = []; // Vendor names
            var counts = [];     // PO counts
            var totalCount = 0;

            for (var key in data) {
                categories.push(key);
                counts.push(data[key]);
                totalCount += data[key];
            }

            poChart = Highcharts.chart('poBarChart', {
                chart: { type: 'column' },
                title: { text: '' },
                xAxis: { categories: categories, title: { text: 'Vendors' } },
                yAxis: {
                    min: 0,
                    title: { text: 'PO Count' },
                    allowDecimals: false
                },
                tooltip: {
                    pointFormat: 'PO Count: <b>{point.y}</b>'
                },
                plotOptions: {
                    column: {
                        cursor: 'pointer',
                        dataLabels: { enabled: true },
                        events: {
                            click: function () { console.log('column clicked'); }
                        }
                    },
                    series: {
                        point: {
                            events: {
                                click: function () {
                                    var vendorName = this.category;
                                    table.column(3).search(vendorName).draw();
                                }
                            }
                        }
                    }
                },
                series: [{ name: 'PO Count', data: counts, colorByPoint: true }]
            });

            // Optional: show total count above chart
            if (poChart.totalLabel) poChart.totalLabel.destroy();
            poChart.totalLabel = poChart.renderer.text(
                'Total: ' + totalCount,
                20, 20
            ).css({ color: '#000', fontSize: '20px', fontWeight: 'bold' }).add();
        }

        // Update chart based on filtered table
        function updateBarChart() {
            var vendorCounts = {}, totalCount = 0;

            table.rows({ filter: 'applied' }).every(function () {
                var vendor = this.data()[3] || "Unknown";
                vendorCounts[vendor] = (vendorCounts[vendor] || 0) + 1;
                totalCount++;
            });

            var categories = [];
            var counts = [];
            for (var key in vendorCounts) {
                categories.push(key);
                counts.push(vendorCounts[key]);
            }

            if (poChart) {
                poChart.xAxis[0].setCategories(categories, false);
                poChart.series[0].setData(counts, true);

                if (poChart.totalLabel) poChart.totalLabel.destroy();
                poChart.totalLabel = poChart.renderer.text(
                    'Total: ' + totalCount,
                    20, 20
                ).css({ color: '#000', fontSize: '20px', fontWeight: 'bold' }).add();
            } else {
                buildBarChart(vendorCounts);
            }
        }

        // Initial chart build and redraw on table draw
        updateBarChart();
        table.on('draw', function () { updateBarChart(); });

        // Reset chart and table on double-click
        $('#poBarChart').on('dblclick', function () {
            // Clear DataTable filter
            table.column(3).search('').draw();

            // Rebuild chart based on full table data
            updateBarChart();
        });



        // View Modal Button
    //    $('#poTable').on('click', '.view-items', function () {
    //        var poCode = $(this).data('pocode');

    //        $.ajax({
    //            url: '/Purchase/GetPOItems',
    //            type: 'GET',
    //            data: { poCode: poCode },
    //            success: function (response) {
    //                if (response.success) {
    //                    // 🔹 Destroy & clean up existing DataTable
    //                    if ($.fn.DataTable.isDataTable('#poItemsTable')) {
    //                        $('#poItemsTable').DataTable().clear().destroy();
    //                        $('#poItemsTable').find('thead tr th').removeClass('sorting sorting_asc sorting_desc');
    //                    }

    //                    // 🔹 Clear old rows
    //                    $('#poItemsTable tbody').empty();
    //                    let totalAmount = 0;

    //                    // 🔹 Append rows
    //                    $.each(response.data, function (i, item) {
    //                        totalAmount += parseFloat(item.FinalAmount || 0);

    //                        $('#poItemsTable tbody').append(
    //                            `<tr>
    //    <td>${i + 1}</td> <!-- 🆕 Serial number -->
    //    <td>${item.ItemName}</td>
    //    <td>${item.UnitQuantity}</td>
    //    <td>₹${item.CostPerUnit}</td>
    //    <td>${item.Discount}</td>
    //    <td>${item.TaxRate}</td>
    //    <td>₹${item.FinalAmount}</td>
    //</tr>`
    //                        );

    //                    });



    //                    //// 🔹 Initialise DataTable again
    //                    $('#poItemsTable').DataTable({
    //                        scrollX: true,
    //                        paging: false,
    //                        searching: false,
    //                        ordering: false,
    //                        lengthChange: false,
    //                        info: false,
    //                        destroy: true,
    //                        columnDefs: [
    //                            { className: 'text-center', targets: '_all' }
    //                        ],
    //                        footerCallback: function (row, data, start, end, display) {
    //                            let api = this.api();

    //                            // Sum final amount column (last column index = 6)
    //                            let total = api
    //                                .column(6, { page: 'current' })
    //                                .data()
    //                                .reduce((a, b) => {
    //                                    let val = parseFloat(String(b).replace(/[^\d.-]/g, '')) || 0;
    //                                    return a + val;
    //                                }, 0);

    //                            // Update footer cell
    //                            $(api.column(6).footer()).html('₹' + total.toFixed(2));
    //                        }
    //                    });

    //                    // 🔹 Show modal
    //                    new bootstrap.Modal(document.getElementById('poItemsModal')).show();
    //                } else {
    //                    alert('No items found for this PO.');
    //                }
    //            },
    //            error: function () {
    //                alert('Error fetching PO items.');
    //            }
    //        });

    //    });

        // View PO Items Modal
        $('#poTable').on('click', '.view-items', function () {
            var poCode = $(this).data('pocode');

            $.ajax({
                url: '/Purchase/GetPOItems',
                type: 'GET',
                data: { poCode: poCode },
                success: function (response) {
                    if (response.success) {

                        // 🔹 Destroy existing DataTable if initialized
                        if ($.fn.DataTable.isDataTable('#poItemsTable')) {
                            $('#poItemsTable').DataTable().clear().destroy();
                            $('#poItemsTable thead tr th').removeClass('sorting sorting_asc sorting_desc');
                        }

                        // 🔹 Clear old rows
                        $('#poItemsTable tbody').empty();
                        let totalAmount = 0;

                        // 🔹 Append rows
                        $.each(response.data, function (i, item) {
                            totalAmount += parseFloat(item.FinalAmount || 0);

                            $('#poItemsTable tbody').append(`
                        <tr>
                            <td>${i + 1}</td> <!-- Serial number -->
                            <td>${item.ItemName}</td>
                            <td>${item.UnitQuantity}</td>
                            <td>₹${item.CostPerUnit}</td>
                            <td>${item.Discount}</td>
                            <td>${item.TaxRate}</td>
                            <td>₹${item.FinalAmount}</td>
                        </tr>
                    `);
                        });

                        // 🔹 Initialize DataTable
                        $('#poItemsTable').DataTable({
                            scrollX: true,
                            paging: false,         // optional: you can enable if many rows
                            searching: true,       // ✅ adds search box
                            ordering: false,        // optional: enable sorting
                            lengthChange: false,
                            info: false,
                            destroy: true,
                            columnDefs: [
                                { className: 'text-center', targets: '_all' }
                            ],
                            footerCallback: function (row, data, start, end, display) {
                                var api = this.api();

                                // Sum final amount column (index 6)
                                var total = api
                                    .column(6, { page: 'current' })
                                    .data()
                                    .reduce((a, b) => {
                                        var val = parseFloat(String(b).replace(/[^\d.-]/g, '')) || 0;
                                        return a + val;
                                    }, 0);

                                // Update footer cell
                                $(api.column(6).footer()).html('₹' + total.toFixed(2));
                            }
                        });

                        // 🔹 Show modal
                        new bootstrap.Modal(document.getElementById('poItemsModal')).show();

                    } else {
                        toastr.warning('No items found for this PO.');
                    }
                },
                error: function () {
                    toastr.error('Error fetching PO items.');
                }
            });
        });


    });
</script>

