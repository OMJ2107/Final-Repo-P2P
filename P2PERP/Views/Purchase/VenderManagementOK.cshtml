@{
    ViewBag.Title = "Vendor Management";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Vendor Management</title>
    <link href="~/Content/VendorManagementOK.css" rel="stylesheet" />
    <style>

        .btn-sm {
            border-radius: 6px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        input {
            outline: none !important;
        }

        #exportContainer .dt-buttons {
            display: flex;
            justify-content: end; /* center align */
            gap: 8px;
            margin-left: -10px;
        }

        .table-container {
            overflow-x: auto; /* scroll if content overflows */
            width: 100%;
        }

        .erp-table {
            width: 100% !important;
            table-layout: auto;
            border-radius: 6px;
            overflow: hidden;
        }

            /* Header Styling */
            .erp-table thead th {
                white-space: nowrap; /* keep header text in one line */
                text-align: center;
                vertical-align: middle;
                font-weight: 600;
                padding: 12px 10px;
            }

                /* Select All column alignment */
                .erp-table thead th:first-child {
                    text-align: left;
                    vertical-align: middle;
                }

                    .erp-table thead th:first-child input {
                        margin-right: 6px;
                    }

        /* Right-align the DataTables search container */
        div.dataTables_wrapper div.dt-search {
            display: flex;
            justify-content: flex-end; /* push input to right */
            margin-left: auto; /* take up space and move right */
            margin-bottom: 1rem; /* optional spacing under toolbar */
        }

            /* Style the input itself */
            div.dataTables_wrapper div.dt-search input.dt-input {
                height: 40px;
                min-width: 220px;
                border: 1px solid #ccc;
                border-radius: 4px;
                padding: 0 8px;
            }

        .dt-paging nav {
            float: right !important;
        }

        #searchContainer {
            margin-top: 50px !important;
        }

        .expbtndate {
            padding: 0px;
            margin-left: -10px;
        }
        /* ============================= */
        /* Remove green border for valid */
        /* ============================= */
        .was-validated .form-select:valid,
        .form-select.is-valid,
        .was-validated .form-control:valid,
        .form-control.is-valid {
            border: 1px solid #ddd !important;
            box-shadow: none !important;
            outline: none !important;
        }
        /* Force red border for invalid selects */
        .form-select.is-invalid,
        .was-validated .form-select:invalid {
            border-color: #dc3545 !important;
            box-shadow: 0 0 0 2px rgba(220, 53, 69, 0.25) !important;
            background-image: none !important;
        }

            /* Keep same red color when focused */
            .form-select.is-invalid:focus {
                border-color: #dc3545 !important;
                box-shadow: 0 0 0 2px rgba(220, 53, 69, 0.25) !important;
            }

        /* Make sure red border stays even inside input-groups */
        .input-group .form-control.is-invalid {
            border: 1.8px solid #dc3545 !important;
            box-shadow: 0 0 0 2px rgba(220, 53, 69, 0.1) !important;
        }

        /* When focused, keep red outline */
        .form-control.is-invalid:focus,
        .form-select.is-invalid:focus {
            border-color: #dc3545 !important;
            box-shadow: 0 0 0 2px rgba(220, 53, 69, 0.25) !important;
        }

        was-validated .form-control:invalid, .form-control.is-invalid {
            border-color: red !important;
        }

        #bankName.is-invalid,
        #industryType.is-invalid,
        #branchName.is-invalid {
            border: 1.8px solid #dc3545 !important;
            outline: none !important;
        }
        /* Add spacing between buttons */
        .swal2-custom-actions {
            gap: 12px; /* adjust gap as needed */
        }

            /* Optional: small visual consistency */
            .swal2-custom-actions .btn {
                font-weight: 600;
                border-radius: 6px;
                min-width: 120px;
            }
        /* Common container style for both */
        .expbtndate .input-group {
            width: 230px !important; /* or match your preferred width */
            min-width: 230px;
        }
    </style>
</head>
<body>
    <!-- Toast container somewhere fixed, e.g. top right -->
    <div id="toastContainer"
         class="toast-container position-fixed top-0 end-0 p-3"
         style="z-index: 2000;">
    </div>
    <div class="container my-5">
        <div class="bg-white shadow rounded p-4">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h3 class="text-center m-auto text-primary">Vendor Management</h3>
            </div>
            <!-- Tabs -->
            <div class="tab-header">

                <!-- Nav Pills -->
                <ul class="nav nav-pills mb-3" id="vendorTab" role="tablist">
                    <li class="nav-item me-2" role="presentation">
                        <button class="nav-link active" id="registration-tab" data-bs-toggle="pill" data-bs-target="#registration" type="button" role="tab" aria-controls="registration" aria-selected="true">
                            Vendor Registration
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="approval-tab" data-bs-toggle="pill" data-bs-target="#approval" type="button" role="tab" aria-controls="approval" aria-selected="false">
                            Pending Vendor Approval
                        </button>
                    </li>
                </ul>
            </div>
            <!-- Vendor Registration Modal Form -->
            <div class="tab-content active" id="registration">
                <form id="Vendorform" class="row g-3 needs-validation" novalidate>
                    <!-- Personal Details -->
                    <div class="form-section">
                        <h5>Personal Details</h5>
                        <div class="row">
                            <!-- Full Name -->
                            <div class="col-md-6 mb-3">
                                <label for="fullName" class="form-label">Full Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="fullName" name="VendorName" required>
                                <div class="invalid-feedback">Full Name is required.</div>
                            </div>
                            <!-- Mobile -->
                            <div class="col-md-6 mb-3">
                                <label for="mobile" class="form-label">Mobile Number <span class="text-danger">*</span></label>
                                <input type="tel" class="form-control" id="mobile" name="MobileNo" required>
                                <div class="invalid-feedback">Mobile Number is required.</div>
                            </div>

                            <!-- Alternate Mobile -->
                            <div class="col-md-6 mb-3">
                                <label for="altMobile" class="form-label">Alternate Mobile</label>
                                <input type="tel" class="form-control" id="altMobile" name="AlternateNo">
                            </div>

                            <!-- Personal Email -->
                            <div class="col-md-6 mb-3">
                                <label for="personalEmail" class="form-label">Personal Email <span class="text-danger">*</span></label>
                                <input type="email" class="form-control" id="personalEmail" name="Email" required>
                                <div class="invalid-feedback">Valid email is required.</div>
                            </div>

                            <!-- Address -->
                            <div class="col-12 mb-3">
                                <label for="address" class="form-label">Address <span class="text-danger">*</span></label>
                                <textarea class="form-control" id="address" name="Address" rows="2" required></textarea>
                                <div class="invalid-feedback">Address is required.</div>
                            </div>
                        </div>
                    </div>

                    <!-- Communication Details -->
                    <div class="form-section">
                        <h5>Communication Details</h5>
                        <div class="row">
                            <!-- Company Email -->
                            <div class="col-md-6 mb-3">
                                <label for="CompanyEmail" class="form-label">Company Email <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="CompanyEmail" name="CompanyEmail" required>
                                <div class="invalid-feedback">Company Email is required.</div>
                            </div>

                            <!-- Company Mobile -->
                            <div class="col-md-6 mb-3">
                                <label for="CompanyMobileNo" class="form-label">Company Mobile Number <span class="text-danger">*</span></label>
                                <input type="tel" class="form-control" id="CompanyMobileNo" name="CompanyMobileNo" required>
                                <div class="invalid-feedback">Company Mobile Number is required.</div>
                            </div>

                            <!-- Alternate Company Mobile -->
                            <div class="col-md-6 mb-3">
                                <label for="CompanyAlternateNo" class="form-label">Alternate Mobile</label>
                                <input type="tel" class="form-control" id="CompanyAlternateNo" name="CompanyAlternateNo">
                            </div>

                            <!-- Company Name -->
                            <div class="col-md-6 mb-3">
                                <label for="companyName" class="form-label">Company Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="companyName" name="CompanyName" required>
                                <div class="invalid-feedback">Company Name is required.</div>
                            </div>

                            <!-- Company Address -->
                            <div class="col-12 mb-3">
                                <label for="companyAddress" class="form-label">Company Address <span class="text-danger">*</span></label>
                                <textarea class="form-control" id="companyAddress" name="CompanyAddress" rows="2" required></textarea>
                                <div class="invalid-feedback">Company Address is required.</div>
                            </div>

                            <div class="row g-3">

                                <!-- Industry Type -->
                                <div class="col-md-4 mb-3">
                                    <label for="industryType" class="form-label">Industry Type <span class="text-danger">*</span></label>
                                    <select class="form-select" id="industryType" name="IndustryTypeId" required></select>
                                    <div class="invalid-feedback">Industry Type is required.</div>
                                </div>

                                <!-- Country -->
                                <div class="col-md-4 mb-3">
                                    <label for="country" class="form-label">Country <span class="text-danger">*</span></label>
                                    <select class="form-select" id="country" name="CountryCode" required></select>
                                    <div class="invalid-feedback">Country is required.</div>
                                </div>

                                <!-- State -->
                                <div class="col-md-4 mb-3">
                                    <label for="state" class="form-label">State <span class="text-danger">*</span></label>
                                    <select class="form-select" id="state" name="StateCode" required></select>
                                    <div class="invalid-feedback">State is required.</div>
                                </div>

                                <!-- City -->
                                <div class="col-md-6 mb-3">
                                    <label for="city" class="form-label">City <span class="text-danger">*</span></label>
                                    <select class="form-select" id="city" name="CityId" required></select>
                                    <div class="invalid-feedback">City is required.</div>
                                </div>

                            </div>

                        </div>
                    </div>

                    <!-- Payment Details -->
                    <div class="form-section">
                        <h5>Payment Details</h5>
                        <div class="row">

                            <!-- Bank Name -->
                            <div class="col-md-6 mb-3">
                                <label for="bankName" class="form-label">Bank Name <span class="text-danger">*</span></label>
                                <select class="form-select" id="bankName" required></select>
                                <div class="invalid-feedback">Please select a bank.</div>
                            </div>

                            <!-- Branch -->
                            <div class="col-md-6 mb-3">
                                <label for="branchName" class="form-label">Branch <span class="text-danger">*</span></label>
                                <select class="form-select" id="branchName" name="BranchId" required></select>
                                <div class="invalid-feedback">Please select a branch.</div>
                            </div>

                            <!-- Account Number -->
                            <div class="col-md-6 mb-3">
                                <label for="accountNumber" class="form-label">Account Number <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="accountNumber" name="AccountNumber" required>
                                <div class="invalid-feedback">Account Number is required.</div>
                            </div>


                            <!-- IFSC -->
                            <div class="col-md-6 mb-3">
                                <label for="ifsc" class="form-label">IFSC Code <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="ifsc" name="IFSCCode" required>
                                <div class="invalid-feedback">IFSC Code is required.</div>
                            </div>

                            <!-- Swift -->
                            <div class="col-md-6 mb-3">
                                <label for="swift" class="form-label">Swift Code <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="swift" name="SwiftCode" required>
                                <div class="invalid-feedback">Swift Code is required.</div>
                            </div>
                        </div>
                    </div>


                    <!-- Buttons -->
                    <div class="d-flex justify-content-end gap-2 mt-3">
                        <button type="button" class="btn btn-lg btn-danger btn-clear" data-bs-dismiss="modal">Clear</button>
                        <button type="submit" class="btn btn-lg btn-success text-white">Save</button>
                    </div>
                </form>
            </div>



            <!-- Pending Vendor Approval -->
            <div class="tab-content p-0 ps-1 pe-1 mt-2" id="approval">
                <!-- Toolbar -->
                <div class="table-toolbar d-flex justify-content-between align-items-center mb-3 p-3">

                    <!-- Left Section: Date Picker + Export Buttons -->
                    <div class="d-flex align-items-center flex-column gap-3 flex-wrap expbtndate">

                        <!-- Date Range Picker -->
                        <div class="input-group border-1 border-gray">
                            <span class="input-group-text bg-primary text-white border-0">
                                <i class="bi bi-calendar-date"></i>
                            </span>
                            <input type="text" id="vendorcreateddate"
                                   class="form-control shadow-none ms-0 border"
                                   placeholder="Select date range" readonly
                                   style="height:100%; border-color: #ced4da;" />
                        </div>

                        <!-- Export Buttons -->
                        <div id="exportContainer" class="d-flex align-items-center gap-2 ps-0 ms-0">
                        </div>
                    </div>


                    <!-- Right Section: Search Box -->
                    <div id="searchContainer">
                        @*<i class="ri-search-line text-primary me-2"></i>*@
                        <!-- DataTables search input will be injected here -->
                    </div>
                </div>





                <!--Pending Vendor Table -->
                <div class="table-container">
                    <table class="table table-striped table-bordered text-center align-middle erp-table" id="tblVendor">
                        <thead class="table-dark text-center align-middle">
                            <tr>
                                <th>
                                    <div class="d-flex align-items-center justify-content-center">
                                        <input type="checkbox" id="selectAllVendor" class="me-1">
                                        @*<label for="selectAllVendor" class="m-0">Select All</label>*@
                                    </div>
                                </th>
                                <th>SRNO</th>
                                <th class="d-none">VendorId</th>
                                <th>Vendor Name</th>
                                <th class="text-center">Mobile No</th>
                                <th class="d-none">Company Name</th>
                                <th class="d-none">Industry Type</th>
                                <th>Added By</th>
                                <th>Added Date</th>
                                <th class="d-none">Alternate No</th>
                                <th class="d-none">Email</th>
                                <th class="d-none">Address</th>
                                <th class="d-none">Company Email</th>
                                <th class="d-none">Company Mobile No</th>
                                <th class="d-none">Company Alternate No</th>
                                <th class="d-none">Company Address</th>
                                <th class="d-none">Industry Type Id</th>
                                <th class="d-none">City Id</th>
                                <th class="d-none">Bank Name</th>
                                <th class="d-none">Swift Code</th>
                                <th class="d-none">Branch Name</th>
                                <th class="d-none">IFSC Code</th>
                                <th class="d-none">Account Number</th>
                                <th class="d-none">Country Code</th>
                                <th class="d-none">State Code</th>
                                <th class="d-none">City Name</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>




            <!-- =======================View pending Vendor MODAL ======================= -->
            <div class="modal fade" id="viewvendorModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-xl modal-dialog-scrollable">
                    <div class="modal-content">
                        <div class="modal-header bg-primary text-white position-relative">
                            <h5 class="d-flex justify-content-center text-center ms-auto text-white">
                                Vendor Details
                            </h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>

                        <div class="modal-body">

                            <!-- Vendor Registration Form inside Modal -->
                            <form id="Vendorform" class="row g-3 needs-validation" novalidate>

                                <!-- Personal Details -->
                                <div class="form-section">
                                    <h5>Personal Details</h5>
                                    <div class="row">
                                        <!-- Full Name -->
                                        <div class="col-md-6">
                                            <label for="FullName" class="form-label fw-semibold">Full Name</label>
                                            <input type="text" class="form-control" id="FullName" name="VendorName" placeholder="Enter Full Name" readonly>
                                        </div>
                                        <!-- Mobile -->
                                        <div class="col-md-6">
                                            <label for="Mobile" class="form-label fw-semibold">Mobile Number</label>
                                            <input type="tel" class="form-control" id="Mobile" name="MobileNo" placeholder="Enter Mobile Number" readonly>
                                        </div>
                                        <div class="col-md-6">
                                            <label for="AltMobile" class="form-label fw-semibold">Alternate Mobile</label>
                                            <input type="tel" class="form-control" id="AltMobile" name="AlternateNo" placeholder="Enter Alternate Mobile" readonly>
                                        </div>

                                        <div class="col-md-6">
                                            <label for="PersonalEmail" class="form-label fw-semibold">Personal Email</label>
                                            <input type="email" class="form-control" id="PersonalEmail" name="Email" placeholder="Enter Email Address" readonly>
                                        </div>
                                        <!-- Address -->
                                        <div class="col-12">
                                            <label for="Address" class="form-label fw-semibold">Address</label>
                                            <textarea class="form-control" id="Address" name="Address" rows="2" placeholder="Enter Address" readonly></textarea>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-section">
                                    <h5>Communication Details</h5>
                                    <div class="row">
                                        <!-- Company Email -->
                                        <div class="col-md-6">
                                            <label for="CompanyEmail" class="form-label fw-semibold">Company Email</label>
                                            <input type="email" class="form-control" id="companyEmail" name="CompanyEmail" placeholder="Enter Company Email" readonly>
                                        </div>
                                        <div class="col-md-6">
                                            <label for="CompanyName" class="form-label fw-semibold">Company Name</label>
                                            <input type="text" class="form-control" id="CompanyName" name="CompanyName" placeholder="Enter Company Name" readonly>
                                        </div>
                                        <!-- Alternate Mobile -->
                                        <div class="col-md-6">
                                            <label for="CompanyEmail" class="form-label fw-semibold">Company Mobile Number</label>
                                            <input type="tel" class="form-control" id="companyMobileNo" name="CompanyAlternateNo" placeholder="AlternateMobile Number" readonly>
                                        </div>
                                        <!-- Alternate Mobile -->
                                        <div class="col-md-6">
                                            <label for="CompanyEmail" class="form-label fw-semibold">AlternateMobile Number</label>
                                            <input type="tel" class="form-control" id="companyAlternateNo" name="CompanyAlternateNo" placeholder="AlternateMobile Number" readonly>
                                        </div>
                                        <!-- Company Name -->
                                        <!--<div class="col-md-6">
                                            <label for="CompanyName" class="form-label fw-semibold">Company Name</label>
                                            <input type="text" class="form-control" id="CompanyName" name="CompanyName" placeholder="Enter Company Name" readonly>
                                        </div>-->
                                        <!-- Company Address -->
                                        <div class="col-md-6">
                                            <label for="CompanyName" class="form-label fw-semibold">Company Address</label>
                                            <input type="text" class="form-control" id="CompanyAddress" name="CompanyAddress" placeholder="Company Address" readonly>
                                        </div>
                                        <div class="row g-3">

                                            <!-- Industry Type -->
                                            <div class="col-md-6">
                                                <label for="industryType" class="form-label fw-semibold">Industry Type</label>
                                                <input type="text" class="form-control" id="IndustryType" name="IndustryTypeId" placeholder="Enter Company Email" readonly>
                                            </div>
                                            <!-- Country -->
                                            <div class="col-md-6">
                                                <label for="Country" class="form-label fw-semibold">Country</label>
                                                <input type="text" class="form-control" id="Country" readonly placeholder="Enter Country">
                                            </div>

                                            <!-- State -->
                                            <div class="col-md-6">
                                                <label for="State" class="form-label fw-semibold">State</label>
                                                <input type="text" class="form-control" id="State" readonly placeholder="Enter State">
                                            </div>

                                            <!-- City -->
                                            <div class="col-md-6">
                                                <label for="City" class="form-label fw-semibold">City</label>
                                                <input type="text" class="form-control" id="City" readonly placeholder="Enter City">
                                            </div>

                                        </div>

                                    </div>
                                </div>

                                <!-- Payment Details -->
                                <div class="form-section">
                                    <h5>Payment Details</h5>
                                    <div class="row">

                                        <!-- Bank Name -->
                                        <div class="col-md-6">
                                            <label for="BankName" class="form-label fw-semibold">Bank Name</label>
                                            <input type="text" class="form-control" id="BankName" name="BankName" placeholder="Enter Bank Name" readonly>
                                        </div>

                                        <!-- Branch -->
                                        <div class="col-md-6">
                                            <label for="Branch" class="form-label fw-semibold">Branch</label>
                                            <input type="text" class="form-control" id="BranchName" name="Branch" placeholder="Enter Branch Name" readonly>
                                        </div>

                                        <!-- Account Number -->
                                        <div class="col-md-6">
                                            <label for="AccountNumber" class="form-label fw-semibold">Account Number</label>
                                            <input type="text" class="form-control" id="AccountNumber" name="AccountNumber" placeholder="Enter Account Number" readonly>
                                        </div>

                                        <!-- IFSC -->
                                        <div class="col-md-6">
                                            <label for="IFSC" class="form-label fw-semibold">IFSC Code</label>
                                            <input type="text" class="form-control" id="Ifsc" name="IFSC" placeholder="Enter IFSC Code" readonly>
                                        </div>
                                        <div class="col-md-6">
                                            <label for="IFSC" class="form-label fw-semibold">Swift Code</label>
                                            <input type="text" class="form-control" id="Swift" name="SwiftCode" placeholder="Enter IFSC Code" readonly>
                                        </div>

                                    </div>
                                </div>
                            </form>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        // SweetAlert2 configuration with Bootstrap button styles
        const swalWithBootstrapButtons = Swal.mixin({
            customClass: {
                confirmButton: "btn btn-success",
                cancelButton: "btn btn-danger"
            },
            buttonsStyling: false
        });

    // Global vendor table variable
    var vendorTable;

    // DOM Content Loaded event listener
    document.addEventListener("DOMContentLoaded", function () {
        // Tab functionality
        const tabs = document.querySelectorAll(".tab-btn");
        const contents = document.querySelectorAll(".tab-content");

        tabs.forEach((tab) => {
            tab.addEventListener("click", () => {
                tabs.forEach((t) => t.classList.remove("active"));
                contents.forEach((c) => c.classList.remove("active"));
                tab.classList.add("active");
                document.getElementById(tab.dataset.tab).classList.add("active");
            });
        });


        // Form validation
        const forms = document.querySelectorAll(".needs-validation");
        Array.from(forms).forEach((form) => {
            form.addEventListener("submit", (event) => {
                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                form.classList.add("was-validated");
            }, false);
        });
    });

    // jQuery document ready function
        $(document).ready(function () {
            $("#Vendorform").addClass("hide-validation-messages");

            // Remove this class to show messages again
            $("#Vendorform").removeClass("hide-validation-messages");
        // Clear processing state for all DataTable button
        window.__dt_clearAllProcessing = function () {
            try {
                // Try to clear via DataTables API
                var tables = $.fn.dataTable.tables();
                for (var i = 0; i < tables.length; i++) {
                    try {
                        var api = $(tables[i]).DataTable();
                        if (!api || !api.buttons) continue;
                        var btnCount = (api.buttons().nodes && api.buttons().nodes().length) || 0;
                        for (var j = 0; j < btnCount; j++) {
                            try { api.button(j).processing(false); } catch (e) { }
                        }
                    } catch (e) { }
                }
            } catch (e) { }

            // Fallback DOM cleanup
            try {
                $('.dt-button').removeClass('dt-button-processing');
                $('.dt-button').prop('disabled', false);
            } catch (e) { }
        };

        // Listen for print-done message from print window
        window.addEventListener('message', function (ev) {
            if (ev && ev.data === 'dt_print_done') {
                window.__dt_clearAllProcessing();
            }
        });

        // Load Country data
        $.getJSON('@Url.Action("GetCountries", "Purchase")', function (countrieslst) {
            console.log("Country Data", countrieslst);
            $('#country').empty().append('<option value="">Select Country</option>');
            $.each(countrieslst, function (i, country) {
                $('#country').append(`<option value="${country.iso2}">${country.name}</option>`);
            });
        });

        // Load Industry Types
        $.getJSON('@Url.Action("FetchIndustryType","Purchase")', function (data) {
            console.log("Industry Types : ", data.lsttype);
            $('#industryType').empty().append(`<option value="0">Select IndustryType</option>`);
            $.each(data.lsttype, function (i, type) {
                $('#industryType').append(`<option value="${type.IndustryTypeId}">${type.IndustryType}</option>`);
            });
        });

        // Load Banks data
        var bankList = [];
        $.getJSON('@Url.Action("FetchBankAndSwiftCodeOK","Purchase")', function (data) {
            console.log("Bank Data : ", data.banks);
            bankList = data.banks;

            // Clear textboxes
            $('#ifsc').val('');
            $('#swift').val('');

            // Load bank dropdown
            $('#bankName').empty().append('<option value="0">Select Bank</option>');
            $.each(bankList, function (i, bank) {
                $('#bankName').append(`<option value="${bank.BankId}">${bank.BankName}</option>`);
            });
        });

        // Set Specific Bank SwiftCode in TextBox
        $('#bankName').change(function () {
            var bankid = $(this).val();
            console.log("BankId Is : ", bankid);

            // Clear fields before setting
            $('#swift').val('');
            $('#ifsc').val('');
            $('#branchName').empty().append('<option value="0">Select Branch</option>');

            var bank = bankList.find(b => b.BankId == bankid);
            $('#swift').val(bank ? bank.SwiftCode : '');
        });

        // Load Branch And IFSCCode
        var BranchList = [];
        $('#bankName').change(function () {
            var Bankid = $(this).val();
            $.getJSON('@Url.Action("FetchBranchAndIFSCCodeOK","Purchase")', { BankId: Bankid }, function (data) {
                BranchList = data.Branch;
                console.log("Branch Data : ", data.Branch);
                $('#branchName').empty().append('<option value="0">Select Branch</option>');
                $.each(BranchList, function (i, branch) {
                    $('#branchName').append(`<option value="${branch.BranchId}">${branch.BranchName}</option>`);
                });
            });
        });

        // Set Specific Branch IFSCCode in textBox
        $('#branchName').change(function () {
            var branchid = $(this).val();
            var branch = BranchList.find(b => b.BranchId == branchid);
            $('#ifsc').val(branch ? branch.IFSCCode : '');
        });

        // Load State data based on country selection
        $('#country').change(function () {
            var countrycode = $(this).val();

            $.getJSON('@Url.Action("GetState","Purchase")', { countrycode: countrycode }, function (lststate) {
                console.log("State Data", lststate);
                $('#state').empty().append(`<option value="">Select State</option>`);
                $.each(lststate, function (i, state) {
                    $('#state').append(`<option value=${state.iso2}>${state.name}</option>`);
                });
            });
        });

        // Load City data based on state selection
        $('#state').change(function () {
            var countryCode = $('#country').val();
            var stateCode = $(this).val();
            console.log("Country: " + countryCode + ", State: " + stateCode);

            $.getJSON('@Url.Action("GetCities", "Purchase")', { countryCode: countryCode, stateCode: stateCode }, function (data) {
                console.log("City Data", data);
                $('#city').empty().append('<option>Select City</option>');
                $.each(data, function (i, city) {
                    $('#city').append('<option value="' + city.id + '">' + city.name + '</option>');
                });
            });
        });

        function customizeDoc(doc) {
            // Title Styling
            doc.styles.title = {
                color: '#000000',
                fontSize: 16,
                bold: true,
                alignment: 'center'
            };

            // ✅ Generate date in dd/mm/yyyy format
            var now = new Date();
            var day = String(now.getDate()).padStart(2, '0');
            var month = String(now.getMonth() + 1).padStart(2, '0');
            var year = now.getFullYear();
            var formattedDate = day + '/' + month + '/' + year;

            // ✅ Insert generated date
            doc.content.splice(1, 0, {
                text: 'Generated Date: ' + formattedDate,
                fontSize: 10,
                italics: true,
                alignment: 'center',
                margin: [0, 0, 0, 12]
            });

            // Table Header Styling
            doc.styles.tableHeader = {
                fillColor: '#000000',
                color: 'white',
                bold: true,
                fontSize: 11,
                alignment: 'center'
            };

            // Table Border + Padding
            var objLayout = {};
            objLayout['hLineWidth'] = function () { return .5; };
            objLayout['vLineWidth'] = function () { return .5; };
            objLayout['hLineColor'] = function () { return '#aaa'; };
            objLayout['vLineColor'] = function () { return '#aaa'; };
            objLayout['paddingLeft'] = function () { return 6; };
            objLayout['paddingRight'] = function () { return 6; };

            // Get the table
            var tableNode = doc.content[doc.content.length - 1];
            tableNode.layout = objLayout;

            // Set fixed widths for all columns
            var colCount = tableNode.table.body[0].length;
            tableNode.table.widths = Array(colCount).fill('*');

            // Wrap in margin to simulate center alignment
            tableNode.alignment = 'center';
            tableNode.margin = [0, 0, 0, 0];
        }

        // Store original button actions if not already stored
        if (!$.fn.dataTable.ext.buttons.pdfHtml5.__originalAction) {
            $.fn.dataTable.ext.buttons.pdfHtml5.__originalAction =
                $.fn.dataTable.ext.buttons.pdfHtml5.action;
        }
        if (!$.fn.dataTable.ext.buttons.print.__originalAction) {
            $.fn.dataTable.ext.buttons.print.__originalAction =
                $.fn.dataTable.ext.buttons.print.action;
        }
        if (!$.fn.dataTable.ext.buttons.excelHtml5.__originalAction) {
            $.fn.dataTable.ext.buttons.excelHtml5.__originalAction =
                $.fn.dataTable.ext.buttons.excelHtml5.action;
        }
        if (!$.fn.dataTable.ext.buttons.csvHtml5.__originalAction) {
            $.fn.dataTable.ext.buttons.csvHtml5.__originalAction =
                $.fn.dataTable.ext.buttons.csvHtml5.action;
        }
        // Toast notification function
        // ✅ Configure toastr once
        toastr.options = {
            closeButton: true,
            progressBar: true,
            newestOnTop: true,
            positionClass: "toast-top-right",
            preventDuplicates: true,
            timeOut: 3000,
            extendedTimeOut: 1000,
            showDuration: 300,
            hideDuration: 300,
            showMethod: "slideDown",
            hideMethod: "fadeOut"
        };

        // ✅ Helper function for warning toast
        function showExportToast() {
            toastr.warning("Please select at least one row before exporting.");
        }
        // Vendor DataTable initialization
        vendorTable = $('#tblVendor').DataTable({
            ajax: {
                url: '@Url.Action("FetchPendingVendorOK", "Purchase")',
                type: "GET",
                dataSrc: function (json) {
                    console.log("Vendor JSON:", json);
                    return json.data;
                },
                error: function (xhr, error, thrown) {
                    console.error("Vendor AJAX Error:", error, thrown, xhr.responseText);
                    alert("Failed to load vendors. Check console for details.");
                }
            },

            // Columns definition
            columns: [
                {
                    data: null,
                    orderable: false,
                    className: 'select-checkbox',
                    render: function (data, type, row) {
                        return `<input type="checkbox" class="row-select" value="${row.VendorId}" />`;
                    }
                },
                { data: "SRNO", title: 'Sr.No', className: "text-center"},
                { data: "VendorId", className: "text-center",visible: false },
                { data: "VendorName", title: "Vendor Name", className: "text-center"},
                { data: "MobileNo", title: "Mobile NO" },
                { data: "CompanyName", title: "Company Name", className: "text-center",visible: false },
                { data: "IndustryType", title: "Industry Type", className: "text-center",visible: false },
                { data: "AddedBy", title: "Created By", className: "text-center"},
                {
                    data: "AddedDateString", title: "Created Date", className: "text-center",
                    "render": function (data) {
                        if (!data) return "";
                        var match = /Date\((\d+)\)/.exec(data);
                        if (match) {
                            var dt = new Date(parseInt(match[1], 10));
                            return dt.toLocaleDateString("en-GB");
                        }
                        var dt2 = new Date(data);
                        if (!isNaN(dt2.getTime())) {
                            return dt2.toLocaleDateString("en-GB");
                        }

                        return data;
                    }
                },
                { data: "AlternateNo", className: "text-center", visible: false },
                { data: "Email", className: "text-center",visible: false },
                { data: "Address", className: "text-center",visible: false },
                { data: "CompanyEmail", className: "text-center", visible: false },
                { data: "CompanyMobileNo", className: "text-center",visible: false },
                { data: "CompanyAlternateNo", className: "text-center",visible: false },
                { data: "CompanyAddress", className: "text-center",visible: false },
                { data: "IndustryTypeId", className: "text-center",visible: false },
                { data: "CityId", className: "text-center",visible: false },
                { data: "BankName", className: "text-center",visible: false },
                { data: "SwiftCode", className: "text-center",visible: false },
                { data: "BranchName", className: "text-center",visible: false },
                { data: "IFSCCode", className: "text-center",visible: false },
                { data: "AccountNumber", className: "text-center",visible: false },
                { data: "CountryCode", className: "text-center",visible: false },
                { data: "StateCode", className: "text-center",visible: false },
                { data: "CityName", className: "text-center",visible: false },

                // Action column
                {
                    data: null,
                    className: "text-center",
                    render: function (data, type, row) {
                        return `
                            <div class="d-flex gap-2 justify-content-center">
                                <!-- View Button with tooltip -->
                                <button class="btn btn-sm btn-primary btn-view"
                                        data-row='${JSON.stringify(row)}'
                                        data-bs-toggle="tooltip"
                                        data-bs-placement="top"
                                        title="View Vendor">
                                    <i class="bi bi-eye-fill"></i>
                                </button>
                                <button class="btn btn-sm btn-success btn-approve"
                                        onclick="ApproveVendor(${row.VendorId})"
                                        data-bs-toggle="tooltip"
                                        data-bs-placement="top"
                                        title="Approve">
                                    <i class="bi bi-person-check-fill"></i>
                                </button>
                            </div>
                        `;
                    }
                },
            ],
            paging: true,
            searching: true,
            lengthChange: false,
            pageLength: 5,
            ordering: false,
            select: {
                style: 'multi',
                selector: 'td:first-child input[type="checkbox"]'
            },

            // Export buttons configuration
            dom: 'Bfrtip',
            buttons: [
                // Print button
                {
                    extend: 'print',
                    text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                    titleAttr: 'Print',
                    title: 'Vendor List',
                    exportOptions: {
                        columns: [1, 3, 4, 5, 6, 7, 8],
                        rows: function (idx) {
                            return $(vendorTable.row(idx).node()).find('input.row-select').prop('checked');
                        },
                        format: {
                            body: function (data, rowIdx, colIdx) {
                                if (colIdx === 1) return getExportSrNo(rowIdx, vendorTable);
                                return data;
                            }
                        }
                    },
                    customize: function (win) {
                        var $body = $(win.document.body);

                        // Inject custom CSS for print
                        $body.append(`
                            <style>
                                thead th {
                                    background-color: black !important;
                                    color: white !important;
                                    text-align: center !important;
                                    -webkit-print-color-adjust: exact !important;
                                    print-color-adjust: exact !important;
                                }
                                table {
                                    border-collapse: collapse !important;
                                    width: 100% !important;
                                }
                                td, th {
                                    border: 1px solid #000 !important;
                                    padding: 6px !important;
                                }
                            </style>
                        `);

                        // Center title
                        $body.find('h1').css('text-align', 'center');

                        // Insert generated date in dd/mm/yyyy format
                        $body.find('h1').after(
                            '<div style="text-align:center;font-style:italic;font-size:10pt;margin-bottom:12px;">Generated Date: ' +
                            (function () {
                                const d = new Date();
                                const day = String(d.getDate()).padStart(2, '0');
                                const month = String(d.getMonth() + 1).padStart(2, '0');
                                const year = d.getFullYear();
                                return `${day}/${month}/${year}`;
                            })() +
                            '</div>'
                        );


                        // Add bootstrap table styles
                        $body.find('table')
                            .addClass('table table-bordered table-striped')
                            .css('width', '100%');

                        // Font size
                        $body.css('font-size', '12pt');
                    },
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);

                        if (selected === 0) {
                            showExportToast();
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        // Show spinner
                        try { btnApi.processing(true); } catch (err) { }

                        // Call original print action
                        try {
                            $.fn.dataTable.ext.buttons.print.__originalAction.call(this, e, dt, button, config);
                        } catch (err) {
                            // Ensure spinner not left running
                            setTimeout(function () { try { btnApi.processing(false); } catch (e) { } }, 300);
                            throw err;
                        }

                        // Final fallback: if print window never reports, clear after 2s
                        setTimeout(function () { try { btnApi.processing(false); } catch (err) { } }, 2000);
                    }
                },

                // PDF Export button
                {
                    extend: 'pdfHtml5',
                    text: '<i class="bi bi-file-earmark-pdf-fill text-danger fs-5"></i>',
                    titleAttr: 'PDF',
                    title: 'Vendor List',
                    orientation: 'landscape',
                    pageSize: 'A4',
                    exportOptions: {
                        columns: [1, 3, 4, 5, 6, 7, 8],
                        rows: function (idx) {
                            return $(vendorTable.row(idx).node()).find('input.row-select').prop('checked');
                        },
                        format: {
                            body: function (data, rowIdx, colIdx) {
                                if (colIdx === 1) return getExportSrNo(rowIdx, vendorTable);
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);

                        if (selected === 0) {
                            showExportToast();
                            btnApi.processing(false);
                            return;
                        }

                        btnApi.processing(true);

                        // If pdfMake exists, wrap its download so we can stop spinner when done
                        if (window.pdfMake && pdfMake.createPdf && !pdfMake._patchedForDT) {
                            (function () {
                                var origCreate = pdfMake.createPdf;
                                pdfMake.createPdf = function (docDefinition) {
                                    var pdfDoc = origCreate.call(pdfMake, docDefinition);
                                    var origDownload = pdfDoc.download;
                                    pdfDoc.download = function (filename, cb) {
                                        origDownload.call(pdfDoc, filename, function () {
                                            try { btnApi.processing(false); } catch (err) { }
                                            if (typeof cb === 'function') cb();
                                        });
                                    };
                                    return pdfDoc;
                                };
                                pdfMake._patchedForDT = true; // only patch once
                            })();
                        }

                        // Call original action
                        $.fn.dataTable.ext.buttons.pdfHtml5.__originalAction.call(this, e, dt, button, config);

                        // Final fallback: clear after timeout just in case
                        setTimeout(function () { try { btnApi.processing(false); } catch (err) { } }, 1500);
                    },
                    customize: customizeDoc
                },

                // Excel Export button
                {
                    extend: 'excelHtml5',
                    text: '<i class="bi bi-file-earmark-excel-fill text-success fs-5"></i>',
                    titleAttr: 'Excel',
                    title: ' ', //Vendor List
                    exportOptions: {
                        columns: [1, 3, 4, 5, 6, 7, 8],
                        rows: function (idx) {
                            return $(vendorTable.row(idx).node()).find('input.row-select').prop('checked');
                        },
                        format: {
                            body: function (data, rowIdx, colIdx) {
                                if (colIdx === 1) return getExportSrNo(rowIdx, vendorTable);
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);

                        if (selected === 0) {
                            showExportToast();
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        try { btnApi.processing(true); } catch (err) { }

                        // Call original excelHtml5 action
                        $.fn.dataTable.ext.buttons.excelHtml5.__originalAction.call(this, e, dt, button, config);

                        // Fallback clear spinner after 1.5s
                        setTimeout(function () { try { btnApi.processing(false); } catch (err) { } }, 300);
                    },
                    customize: function (xlsx) {
                        // ✅ Rename worksheet
                        var sheet = xlsx.xl.worksheets['sheet1.xml'];
                        $('sheet', xlsx.xl['workbook.xml']).attr('name', 'Vendor List');

                        // ✅ Date in dd/mm/yyyy format
                        var now = new Date();
                        var day = String(now.getDate()).padStart(2, '0');
                        var month = String(now.getMonth() + 1).padStart(2, '0');
                        var year = now.getFullYear();
                        var formattedDate = day + '/' + month + '/' + year;

                        var sheetData = $('sheetData', sheet);

                        // Shift all data rows down by 2 (for title + date)
                        sheetData.find('row').each(function () {
                            var r = parseInt($(this).attr('r'));
                            $(this).attr('r', r + 2);
                            $(this).find('c').each(function () {
                                var cellRef = $(this).attr('r');
                                var col = cellRef.replace(/[0-9]/g, '');
                                $(this).attr('r', col + (r + 2));
                            });
                        });

                        // ✅ Insert Title row (now in A1, will be merged A1:G1 for centering across 7 columns)
                        var titleRow =
                            '<row r="1">' +
                            '<c t="inlineStr" r="A1">' +
                            '<is><t>Vendor List</t></is>' +
                            '</c>' +
                            '</row>';

                        // ✅ Insert Generated Date row (now in A2, will be merged A2:G2 for centering)
                        var dateRow =
                            '<row r="2">' +
                            '<c t="inlineStr" r="A2">' +
                            '<is><t>Generated Date: ' + formattedDate + '</t></is>' +
                            '</c>' +
                            '</row>';

                        // Add rows to the top
                        sheetData.prepend(dateRow);
                        sheetData.prepend(titleRow);

                        // ✅ Add merge cells for centering title and date across columns A:G (7 columns from export)
                        var mergeCells = $('mergeCells', sheet);
                        if (mergeCells.length === 0) {
                            // If no mergeCells exist, create the element
                            $('worksheet', sheet).append('<mergeCells count="2"/>');
                            mergeCells = $('mergeCells', sheet);
                        } else {
                            // Update existing count
                            var currentCount = parseInt(mergeCells.attr('count') || 0);
                            mergeCells.attr('count', currentCount + 2);
                        }
                        // Add title merge (A1:G1)
                        mergeCells.append('<mergeCell ref="A1:G1"/>');
                        // Add date merge (A2:G2)
                        mergeCells.append('<mergeCell ref="A2:G2"/>');

                        // ✅ Add styles for centering + font (fonts, fills, etc.)
                        var styles = xlsx.xl['styles.xml'];
                        var cellXfs = $('cellXfs', styles);
                        var fonts = $('fonts', styles);

                        // Count existing fonts (default is usually 1: fontId=0)
                        var fontCount = $('font', fonts).length;

                        // Add new font for title (bold, size 14)
                        fonts.append(
                            '<font>' +
                            '<sz val="14"/>' +  // Font size 14
                            '<b/>' +             // Bold
                            '<color rgb="000000"/>' +  // Black (default)
                            '</font>'
                        );

                        // Add new font for date (italic, size 11)
                        fonts.append(
                            '<font>' +
                            '<sz val="11"/>' +   // Font size 11 (default size)
                            '<i/>' +             // Italic
                            '<color rgb="000000"/>' +  // Black (default)
                            '</font>'
                        );

                        // Count existing cellXfs
                        var styleCount = $('xf', cellXfs).length;

                        // Add new style for title (use new bold/large font, center alignment)
                        cellXfs.append(
                            '<xf numFmtId="0" fontId="' + fontCount + '" fillId="0" borderId="0" xfId="0" applyFont="1" applyAlignment="1">' +
                            '<alignment horizontal="center" vertical="center" wrapText="1"/>' +  // Center, wrap for long text
                            '</xf>'
                        );

                        // Add new style for date (use new italic font, center alignment)
                        cellXfs.append(
                            '<xf numFmtId="0" fontId="' + (fontCount + 1) + '" fillId="0" borderId="0" xfId="0" applyFont="1" applyAlignment="1">' +
                            '<alignment horizontal="center" vertical="center" wrapText="1"/>' +  // Center, wrap for long text
                            '</xf>'
                        );

                        // Apply new style indexes to the cells
                        $('c[r=A1]', sheet).attr('s', styleCount);       // Title style
                        $('c[r=A2]', sheet).attr('s', styleCount + 1);   // Date style
                    }
                },

                // CSV Export button
                {
                    extend: 'csvHtml5',
                    text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                    titleAttr: 'CSV',
                    title: 'Vendor List',
                    exportOptions: {
                        columns: [1, 3, 4, 5, 6, 7, 8],
                        rows: function (idx) {
                            return $(vendorTable.row(idx).node()).find('input.row-select').prop('checked');
                        },
                        format: {
                            body: function (data, rowIdx, colIdx) {
                                if (colIdx === 1) return getExportSrNo(rowIdx, vendorTable);
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);

                        if (selected === 0) {
                            showExportToast();
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        try { btnApi.processing(false); } catch (err) { }

                        $.fn.dataTable.ext.buttons.csvHtml5.__originalAction.call(this, e, dt, button, config);

                        // Stop spinner almost immediately (no real callback exists)
                        setTimeout(function () {
                            try { btnApi.processing(false); } catch (err) { }
                        }, 300);
                    }
                }
            ],

            // Recalculate Sr.No on every draw
            drawCallback: function (settings) {
                var api = this.api();
                api.column(1, { page: 'current' }).nodes().each(function (cell, i) {
                    cell.innerHTML = i + 1 + settings._iDisplayStart;
                });
                initTooltips();
            }
        });

        // Initialize Bootstrap tooltips
        function initTooltips() {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl, {
                    customClass: 'tooltip-dark'
                });
            });
        }
        initTooltips();
        // Tooltip click handler
        $(document).on('click', '[data-bs-toggle="tooltip"]', function () {
            let tooltip = bootstrap.Tooltip.getInstance(this);
            if (tooltip) tooltip.hide();
        })
        // Move export buttons into export container
        vendorTable.buttons().container().appendTo('#exportContainer');

        // Move default DataTables search input into styled right container
        $('.dt-search label').appendTo('#searchContainer');
        $('.dt-search input[type="search"]').appendTo('#searchContainer');

        // Select All Vendor functionality
        $("#selectAllVendor").on("change", function () {
            let isChecked = $(this).is(":checked");
            $("#tblVendor tbody input[type='checkbox']").prop("checked", isChecked);
        });

        // Auto uncheck Select All if any row unchecked
        $("#tblVendor").on("change", "tbody input[type='checkbox']", function () {
            if (!$(this).is(":checked")) {
                $("#selectAllVendor").prop("checked", false);
            }
        });

        // Date Picker initialization
        $('#vendorcreateddate').daterangepicker({
            autoUpdateInput: false,
            opens: "center",
            drops: "down",
            locale: {
                cancelLabel: 'Clear',
                format: 'DD/MM/YYYY' // display format
            },
            ranges: {
                'Today': [moment(), moment()],
                //'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
                'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
                'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]
                //'This Month': [moment().startOf('month'), moment().endOf('month')],
                //'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
            }
        }, function (start, end) {
            // Update input field
            $('#vendorcreateddate').val(start.format('DD/MM/YYYY') + ' - ' + end.format('DD/MM/YYYY'));

            // Apply date filter on vendorTable
            $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
                var addedDate = moment(data[8], 'DD/MM/YYYY'); // adjust column index if needed
                return addedDate.isBetween(start, end, undefined, '[]'); // inclusive range
            });

            vendorTable.draw();
            $.fn.dataTable.ext.search.pop();
        });

        // Clear the date picker
        $('#vendorcreateddate').on('cancel.daterangepicker', function () {
            $(this).val('');
            vendorTable.draw();
        });


        // === Utility Functions ===
        function setInvalid(selector, message) {
            $(selector).addClass("is-invalid").removeClass("is-valid");
            $(selector).next(".invalid-feedback").text(message);
        }

        function setValid(selector) {
            $(selector).removeClass("is-invalid").addClass("is-valid");
            $(selector).next(".invalid-feedback").text("");
        }

        $("#fullName").on("input", function () {
            let currentValue = $(this).val();

            // Clean up immediately
            const cleanedValue = currentValue.replace(/[^A-Za-z ]/g, "");
            if (cleanedValue !== currentValue) {
                $(this).val(cleanedValue);
                //setInvalid(this, "Only letters and spaces allowed.");
                //return;
            }
        });
        // === Address Validation (Live) ===
        $("#address, #companyAddress").on("input", function () {
            const val = this.value.trim();

            if (!val) {
                setInvalid(this, this.id === "address" ? "Address is required." : "Company Address is required.");
            } else if (val.length < 5) {
                setInvalid(this, "Address must be at least 5 characters long.");
            } else {
                setValid(this);
            }
        });

        // === Company Name Validation (Live) ===
        $("#companyName").on("input", function () {
           let currentValue = $(this).val();

            const cleanedValue = currentValue.replace(/[^A-Za-z ]/g, "");
            if (cleanedValue !== currentValue) {
                $(this).val(cleanedValue);
                //setInvalid(this, "Only letters, numbers and spaces allowed.");
                //return;
            }

        });

        // === Company Mobile Validation (Live) ===
        $("#CompanyMobileNo, #CompanyAlternateNo").on("input", function () {
            // Only digits allowed, max 10 digits
            this.value = this.value.replace(/\D/g, "").substring(0, 10);
            const val = this.value.trim();
        });

        // === Account Number Validation (Live) ===
        $("#accountNumber").on("input", function () {
            // Only digits allowed
            this.value = this.value.replace(/\D/g, "");
            const val = this.value.trim();
        });

        // === Indian Mobile Number Validation (Live) ===
        $("#mobile, #altMobile").on("input", function () {
            this.value = this.value.replace(/\D/g, ""); // Only digits allowed
            const val = this.value.trim();   
        });

        // Personal email validation (FIXED - now stricter)
        $("#personalEmail").on("input", function () {
            const val = $(this).val().trim();
            const atSymbol = String.fromCharCode(64);

            // Fixed regex: TLD must be 2-6 letters (com, org, net, co.in, etc.)
            const emailRegex = new RegExp("^[a-zA-Z0-9._%+-]+" + atSymbol + "[a-zA-Z0-9.-]+\\.[A-Za-z]{2,6}$");

            if (!val) {
                setInvalid(this, "Personal Email is required.");
            } else if (!emailRegex.test(val)) {
                setInvalid(this, "Please enter a valid personal email address.");
            } else {
                const domain = val.split(atSymbol)[1].toLowerCase();

                // Check TLD first
                if (!isValidTLD(domain)) {
                    setInvalid(this, "Please enter an email with valid domain extension (.com, .org, .net, etc.).");
                    return;
                }

                // Check for test/example domains in personal email too
                if (isTestOrExampleDomain(domain)) {
                    setInvalid(this, "Test or example email addresses are not allowed.");
                    return;
                }

                if (isDisposableEmail(domain)) {
                    setInvalid(this, "Temporary or disposable email addresses are not allowed.");
                    return;
                }

                setValid(this);
            }
        });

        // Company email validation (strict) - UPDATED
        $("#CompanyEmail").on("input", function () {
            const val = $(this).val().trim();
            const atSymbol = String.fromCharCode(64);

            const emailRegex = new RegExp("^[a-zA-Z0-9._%+-]+" + atSymbol + "[a-zA-Z0-9.-]+\\.[A-Za-z]{2,6}$");

            if (!val) {
                setInvalid(this, "Company Email is required.");
            } else if (!emailRegex.test(val)) {
                setInvalid(this, "Please enter a valid company email address.");
            } else {
                const domain = val.split(atSymbol)[1].toLowerCase();

                // Check TLD first
                if (!isValidTLD(domain)) {
                    setInvalid(this, "Please enter an email with valid domain extension (.com, .org, .net, etc.).");
                    return;
                }

                // Check for test/example domains
                if (isTestOrExampleDomain(domain)) {
                    setInvalid(this, "Test or example email addresses are not allowed for company registration.");
                    return;
                }

                const validation = validateCompanyEmailStrict(val);
                if (!validation.isValid) {
                    setInvalid(this, validation.message);
                } else {
                    setValid(this);
                }
            }
        });

        // NEW FUNCTION: Check for test/example domains
        function isTestOrExampleDomain(domain) {
            const testDomains = [
                'example.com', 'example.org', 'example.net', 'example.edu',
                'test.com', 'test.org', 'test.net', 'test.edu',
                'demo.com', 'demo.org', 'demo.net',
                'sample.com', 'sample.org', 'sample.net',
                'fake.com', 'fake.org', 'fake.net',
                'dummy.com', 'dummy.org', 'dummy.net'
            ];

            return testDomains.includes(domain);
        }

        // Enhanced domain validation for company emails
        function validateCompanyEmailStrict(email) {
            const atSymbol = String.fromCharCode(64);
            const domain = email.split(atSymbol)[1].toLowerCase();
            const domainName = domain.split('.')[0];

            const personalDomains = [
                'gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com', 'aol.com',
                'icloud.com', 'protonmail.com', 'zoho.com', 'yandex.com', 'mail.com',
                'gmx.com', 'live.com', 'rediffmail.com', 'inbox.com'
            ];

            // Remove example.com from here since we check it separately now
            const genericDomains = [
                'company.com', 'business.com', 'enterprise.com', 'corporation.com',
                'firm.com', 'organization.com', 'venture.com', 'startup.com',
                'office.com', 'work.com', 'professional.com', 'service.com',
                'solution.com', 'technology.com', 'digital.com', 'online.com',
                'web.com', 'site.com', 'network.com', 'system.com',
                'mycompany.com', 'yourcompany.com', 'testcompany.com',
                'company.org', 'business.org', 'test.org', 'asa.com'
            ];

            const disposableDomains = getDisposableDomains();

            if (personalDomains.includes(domain)) {
                return {
                    isValid: false,
                    message: "Please use your official company email, not personal email provider."
                };
            }

            if (genericDomains.includes(domain)) {
                return {
                    isValid: false,
                    message: "Generic company domain names are not accepted. Please use your actual company email."
                };
            }

            if (disposableDomains.includes(domain)) {
                return {
                    isValid: false,
                    message: "Temporary email addresses cannot be used for company registration."
                };
            }

            // Check if domain name is too generic
            if (isTooGenericDomainName(domainName)) {
                return {
                    isValid: false,
                    message: "Please provide a valid company email address from a registered business domain."
                };
            }

            // Check if it looks like a company domain
            if (!looksLikeCompanyDomain(domain)) {
                return {
                    isValid: false,
                    message: "Please provide a valid company email address with proper business domain."
                };
            }

            return { isValid: true, message: "Valid company email." };
        }

        // Update disposable domains list - remove example.com since we handle it separately
        function getDisposableDomains() {
            return [
                // Temporary/Disposable email domains
                'tempmail.com', 'throwaway.com', 'fake.com', 'guerrillamail.com',
                'mailinator.com', '10minutemail.com', 'temp-mail.org', 'trashmail.com',
                'sharklasers.com', 'getairmail.com', 'tmpmail.org', 'disposablemail.com',
                'maildrop.cc', 'yopmail.com', 'jetable.org', 'mailnesia.com',
                '33mail.com', 'spam4.me', 'tempinbox.com', 'fakeinbox.com',
                'mytemp.email', 'throwawaymail.com', 'dispostable.com', 'tempomail.org',

                // Additional disposable domains
                'crazymailing.com', 'deadaddress.com', 'emailias.com', 'filzmail.com',
                'get2mail.fr', 'givmail.com', 'gowikicorps.com', 'gufum.com',
                'harakirimail.com', 'hat-geld.de', 'ichigo.me', 'instaddr.ch',
                'mailhazard.com', 'mailhazard.us', 'mailinator.net', 'mailinator.org',
                'mailincubator.com', 'mailmetrash.com', 'mailmoat.com', 'mailnull.com',
                'mailslurp.com', 'mail-temp.com', 'mailtothis.com', 'mintemail.com',
                'mytrashmail.com', 'notmailinator.com', 'objectmail.com', 'proxymail.eu',
                'rcpt.at', 'reconmail.com', 'safetymail.info', 'selfdestructingmail.com',
                'spamgourmet.com', 'spammotel.com', 'spamstack.net', 'suremail.info',
                'thisisnotmyrealemail.com', 'tmail.com', 'tmail.ws', 'temporarymail.net',
                'thankyou2010.com', 'thrott.com', 'tmailinator.com', 'tradermail.info',
                'trash2009.com', 'trashymail.com', 'uroid.com', 'wegwerfmail.de',
                'wh4f.org', 'whyspam.me', 'willselfdestruct.com', 'yep.it',
                'zoemail.com'
                // REMOVED: 'example.com' - now handled separately
            ];
        }

        // Rest of your functions remain the same...
        function isValidTLD(domain) {
            const parts = domain.split('.');
            const tld = parts[parts.length - 1].toLowerCase();
            const validTLDs = [
                'com', 'org', 'net', 'edu', 'gov', 'mil', 'int',
                'in', 'us', 'uk', 'ca', 'au', 'de', 'fr', 'jp', 'cn', 'br', 'ru',
                'it', 'es', 'nl', 'se', 'no', 'dk', 'fi', 'pl', 'cz', 'hu', 'at',
                'ch', 'be', 'ie', 'pt', 'gr', 'tr', 'kr', 'sg', 'my', 'id', 'ph',
                'vn', 'th', 'nz', 'za', 'eg', 'sa', 'ae', 'il', 'ir', 'pk', 'bd',
                'lk', 'np',
                'io', 'ai', 'co', 'me', 'info', 'biz', 'mobi', 'name', 'pro',
                'tv', 'cc', 'ws', 'xyz', 'online', 'site', 'tech', 'store', 'shop',
                'app', 'dev', 'blog', 'cloud', 'digital', 'world', 'global'
            ];
            return validTLDs.includes(tld);
        }

        function isTooGenericDomainName(domainName) {
            const genericKeywords = [
                'company', 'business', 'corporate', 'enterprise', 'organization',
                'firm', 'venture', 'startup', 'office', 'work', 'professional',
                'service', 'solution', 'technology', 'digital', 'online', 'web',
                'site', 'network', 'system', 'example', 'test', 'demo', 'sample',
                'generic', 'placeholder', 'temporary', 'fake', 'dummy',
                'mycompany', 'yourcompany', 'ourcompany', 'testcompany',
                'mybusiness', 'yourbusiness', 'ourbusiness', 'testbusiness'
            ];
            return genericKeywords.some(keyword =>
                domainName.toLowerCase().includes(keyword) || domainName.toLowerCase() === keyword
            );
        }

        function looksLikeCompanyDomain(domain) {
            const companyPatterns = [
                /\.(com|org|net|co|biz|info|io)$/i,
                /\.(com\.[a-z]{2}|co\.[a-z]{2})$/i,
                /\.(ac|edu|sch|gov|mil)$/i,
                /^[a-z0-9-]+\.[a-z]{2,6}$/i
            ];
            return companyPatterns.some(pattern => pattern.test(domain));
        }

        function isDisposableEmail(domain) {
            const disposableDomains = getDisposableDomains();
            return disposableDomains.includes(domain);
        }


        // Update your setInvalid and setValid functions
        function setInvalid(selector, message) {
            const $element = $(selector);
            $element.addClass("is-invalid").removeClass("is-valid");

            // Find and update the invalid-feedback element
            const $feedback = $element.next(".invalid-feedback");
            if ($feedback.length) {
                $feedback.text(message).show();
            }
        }

        function setValid(selector) {
            const $element = $(selector);
            $element.addClass("is-valid").removeClass("is-invalid");

            // Clear the invalid feedback message
            const $feedback = $element.next(".invalid-feedback");
            if ($feedback.length) {
                $feedback.text("").hide();
            }
        }


        $('#Vendorform').submit(function (e) {
               console.log("Active form");
        e.preventDefault();

            const form = this; // form is defined here
            let isValid = true;


            // In your reset validation code, make sure to include .form-select
            $("#Vendorform .form-control, #Vendorform .form-select")
                .removeClass("is-invalid is-valid")
                .next(".invalid-feedback").text("");

            // And in your setInvalidField and setValidField functions
            function setInvalidField(selector, message) {
                const $element = $(selector);
                $element.addClass("is-invalid").removeClass("is-valid");
                $element.next(".invalid-feedback").text(message);
                isValid = false;
            }

            function setValidField(selector) {
                const $element = $(selector);
                $element.addClass("is-valid").removeClass("is-invalid");
                $element.next(".invalid-feedback").text("");
            }

            // === Validation Starts ===

            // Mobile Number validation
            const mobile = $("#mobile").val().trim();
            if (!mobile) {
                setInvalidField("#mobile", "Mobile Number is required.");
            } else if (!/^[6-9]\d{9}$/.test(mobile)) {
                setInvalidField("#mobile", "Enter a valid 10-digit Indian mobile number (starts with 6-9).");
            } else {
                setValidField("#mobile");
            }

            // Alternate Mobile validation
            const altMobile = $("#altMobile").val().trim();

            if (altMobile == "") {
                // Empty - no validation needed (optional field)
            } else if (altMobile.length < 10) {
                setInvalidField("#altMobile", "Alternate mobile must be 10 digits.");
            } else if (!/^[6-9]/.test(altMobile)) {
                setInvalidField("#altMobile", "Alternate mobile must start with 6,7,8 or 9.");
            } else if (!/^[6-9]\d{9}$/.test(altMobile)) {
                setInvalidField("#altMobile", "Enter a valid 10-digit Indian mobile number.");
            } else {
                setValidField("#altMobile");
            }



            const address = $("#address").val().trim();
            if (!address) {
                setInvalidField("#address", "Address is required.");
            } else if (address.length < 5) {
                setInvalidField("#address", "Address must be at least 5 characters long.");
            }

            const CompanyMobileNo = $("#CompanyMobileNo").val().trim();
            if (!CompanyMobileNo) {
                setInvalidField("#CompanyMobileNo", "Mobile Number is required.");
            } else if (!/^[6-9]\d{9}$/.test(CompanyMobileNo)) {
                setInvalidField("#CompanyMobileNo", "Enter a valid 10-digit Indian mobile number (starts with 6-9).");
            } else {
                setValidField("#CompanyMobileNo");
            }


            const companyAltMobile = $("#CompanyAlternateNo").val().trim();
            if (companyAltMobile && !/^[6-9]\d{9}$/.test(companyAltMobile)) {
                setInvalidField("#CompanyAlternateNo", "Enter a valid alternate company mobile number.");
            }

            const companyName = $("#companyName").val().trim();
            if (!companyName) {
                setInvalidField("#companyName", "Company Name is required.");
            } else if (companyName.length < 2) {
                setInvalidField("#companyName", "Company Name must be at least 2 characters.");
            }

            const companyAddress = $("#companyAddress").val().trim();
            if (!companyAddress) {
                setInvalidField("#companyAddress", "Company Address is required.");
            }
            // Dropdown validations - UPDATED
            if (!$("#industryType").val() || $("#industryType").val() === "0") {
                setInvalidField("#industryType", "Please select an Industry Type.");
            } else {
                setValidField("#industryType"); // Add this line
            }

            if (!$("#country").val() || $("#country").val() === "0") {
                setInvalidField("#country", "Please select a Country.");
            } else {
                setValidField("#country"); // Add this line
            }

            if (!$("#state").val() || $("#state").val() === "0") {
                setInvalidField("#state", "Please select a State.");
            } else {
                setValidField("#state"); // Add this line
            }

            if (!$("#city").val() || $("#city").val() === "0") {
                setInvalidField("#city", "Please select a City.");
            } else {
                setValidField("#city"); // Add this line
            }

            if (!$("#bankName").val() || $("#bankName").val() === "0") {
                setInvalidField("#bankName", "Please select a Bank Name.");
            } else {
                setValidField("#bankName"); // Add this line
            }

            if (!$("#branchName").val() || $("#branchName").val() === "0") {
                setInvalidField("#branchName", "Please select a Branch.");
            } else {
                setValidField("#branchName"); // Add this line
            }
            const accountNumber = $("#accountNumber").val().trim();
            if (!accountNumber) {
                setInvalidField("#accountNumber", "Account Number is required.");
            } else if (!/^\d{9,18}$/.test(accountNumber)) {
                setInvalidField("#accountNumber", "Enter a valid 9–18 digit Account Number.");
            }

            // === Final Check ===
            if (!isValid) {
                e.stopPropagation();
                $(form).addClass("was-validated");
                const firstError = $(form).find(".is-invalid").first();
                if (firstError.length) {
                    $("html, body").animate({ scrollTop: firstError.offset().top - 100 }, 500);
                }
                return;
            }


           // --- If Valid → Confirmation + Save (Rest of your code is fine) ---
           let formdata = $(form).serialize();
           console.log("FormData", formdata);


            swalWithBootstrapButtons.fire({
                title: "Are you sure?",
                text: "Do you really want to save this vendor?",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, create it!",
                cancelButtonText: "No, cancel!",
                reverseButtons: false, // Yes first, Cancel second
                customClass: {
                    confirmButton: 'btn btn-success px-4', // green button
                    cancelButton: 'btn btn-danger px-4',   // red button
                    actions: 'swal2-custom-actions'        // for spacing between buttons
                },
                buttonsStyling: false // disable SweetAlert2 default button styling
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '@Url.Action("SaveVendorDetails", "Purchase")',
                        type: 'POST',
                        data: formdata,
                        success: function (res) {
                            if (res.success) {
                                swalWithBootstrapButtons.fire({
                                    title: "Saved!",
                                    text: res.message,
                                    icon: "success",
                                    showConfirmButton: false,
                                    timer: 1000
                                }).then(() => {
                                    // Reset form
                                    form.reset();
                                    $("#Vendorform select").val('0').trigger('change');
                                    $("#Vendorform input[type=hidden]").val('');
                                    $(form).removeClass("was-validated");
                                    $("#Vendorform .is-valid, #Vendorform .is-invalid")
                                        .removeClass("is-valid is-invalid");
                                });
                            } else {
                                swalWithBootstrapButtons.fire({
                                    title: "Error",
                                    text: res.message,
                                    icon: "error"
                                });
                            }
                        },
                        error: function () {
                            swalWithBootstrapButtons.fire({
                                title: "Error",
                                text: "An unexpected error occurred.",
                                icon: "error"
                            });
                        }
                    });
                }
            });
       });

        // Utility function: hide all tooltips
        function hideAllTooltips() {
            document.querySelectorAll('[data-bs-toggle="tooltip"]').forEach(el => {
                let tooltip = bootstrap.Tooltip.getInstance(el);
                if (!tooltip) tooltip = new bootstrap.Tooltip(el); // ensure instance exists
                tooltip.hide();
            });
        }
        // Clear form fields
        $(".btn-clear").on("click", function () {
            console.log("Clear Button Active");

            // Reset the form fields to their default values
            $("#Vendorform")[0].reset();

            // Set all select elements to '0'
            $("#Vendorform select").val('0').trigger('change');

            // Clear hidden input fields
            $("#Vendorform input[type=hidden]").val('');

            // Remove validation classes
            $("#Vendorform").removeClass("was-validated");
            $("#Vendorform .is-valid, #Vendorform .is-invalid").removeClass("is-valid is-invalid");
        });
    });

    // View vendor details in modal
    $(document).on("click", ".btn-view", function () {
        let rowData = $(this).data("row");
        $("#vendorModal").modal("show");
        ViewVendor(rowData);
    });

    // View Pending Vendor details
    function ViewVendor(rowData) {
        console.log("Function Active");
        if (!rowData) return;

        console.log("Vendor Name : ", rowData.VendorName);

        // Personal details
        $("#FullName").val(rowData.VendorName);
        $("#Mobile").val(rowData.MobileNo);
        $("#AltMobile").val(rowData.AlternateNo);
        $("#PersonalEmail").val(rowData.Email);
        $("#Address").val(rowData.Address);

        // Company details
        $("#companyEmail").val(rowData.CompanyEmail);
        $("#companyMobileNo").val(rowData.CompanyMobileNo);
        $("#companyAlternateNo").val(rowData.CompanyAlternateNo);
        $("#CompanyName").val(rowData.CompanyName);
        $("#CompanyAddress").val(rowData.CompanyAddress);

        // Industry/Location
        $("#IndustryType").val(rowData.IndustryType);
        $("#City").val(rowData.CityId);

        // Payment details
        $("#BankName").val(rowData.BankName);
        $("#BranchName").val(rowData.BranchName);
        $("#AccountNumber").val(rowData.AccountNumber);
        $("#Ifsc").val(rowData.IFSCCode);
        $("#Swift").val(rowData.SwiftCode);
        console.log("CountryName", rowData.CountryName);

        // Country, State, City data loading
        $.getJSON("/Purchase/GetCountries", function (countries) {
            console.log("View Country Data : ", countries);
            // Find country name by code
            const country = countries.find(c => c.iso2 === rowData.CountryCode);
            const countryName = country ? country.name : "";
            console.log("Country Name : ", countryName);
            $('#Country').val(countryName);

            // State data
            $.getJSON("/Purchase/GetState", { countrycode: rowData.CountryCode }, function (states) {
                const state = states.find(s => s.iso2 === rowData.StateCode);
                const stateName = state ? state.name : "";
                console.log("State Name : ", stateName);
                $('#State').val(stateName);

                // City data
                $.getJSON("/Purchase/GetCities", { countryCode: rowData.CountryCode, stateCode: rowData.StateCode }, function (cities) {
                    const city = cities.find(c => c.id === rowData.CityId);
                    const cityName = city ? city.name : "";
                    console.log("City Name : ", cityName);
                    $('#City').val(cityName);
                });
            });
        });

        // Show modal
        $("#viewvendorModal").modal("show");
    }
        // Approve Vendor function with confirmations

    function ApproveVendor(VendorId) {
        // Show confirm popup first
        swalWithBootstrapButtons.fire({
            title: "Are you sure?",
            text: "Do you really want to approve this vendor?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Yes, Approve it!",
            cancelButtonText: "No, cancel!",
            reverseButtons: false,
            customClass: {
                confirmButton: 'btn btn-success px-4', // green button
                cancelButton: 'btn btn-danger px-4',   // red button
                actions: 'swal2-custom-actions'        // for spacing between buttons
            },
            buttonsStyling: false // disable SweetAlert2 default button styling
        }).then((result) => {
            if (result.isConfirmed) {
                // Call AJAX only if user confirmed
                $.ajax({
                    url: '@Url.Action("ApproveVendorOK","Purchase")',
                    type: 'POST',
                    data: { VendorId: VendorId },
                    dataType: "json",
                    success: function (res) {
                        if (res.success) {
                            // Show success SweetAlert
                            swalWithBootstrapButtons.fire({
                                title: "Approved!",
                                text: res.message,
                                icon: "success",
                                showConfirmButton: false,
                                timer: 1000
                            }).then(() => {
                                // Reload table only after user closes the alert
                                if (vendorTable) {
                                    vendorTable.ajax.reload(null, false); // false = keep current page
                                    setTimeout(() => {
                                        showToast(res.message, 'success');
                                    }, 1000);
                                }
                            });
                        } else {
                            swalWithBootstrapButtons.fire({
                                title: "Error",
                                text: res.message,
                                icon: "error"
                            });
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("AJAX Error:", status, error, xhr.responseText);
                        swalWithBootstrapButtons.fire({
                            title: "Error",
                            text: "An unexpected error occurred.",
                            icon: "error"
                        });
                    }
                });
            }
            // If cancelled, show cancelled message
            else if (result.dismiss === Swal.DismissReason.cancel) {
                document.querySelectorAll('[data-bs-toggle="tooltip"]').forEach(el => {
                    let tooltip = bootstrap.Tooltip.getInstance(el);
                    if (!tooltip) {
                        tooltip = new bootstrap.Tooltip(el); // create if missing
                    }
                    tooltip.hide();
                });
                swalWithBootstrapButtons.fire({
                    title: "Cancelled",
                    text: "Vendor approval cancelled.",
                    icon: "error"
                });
            }

        });
    }

    // Helper function to recalc SrNo for export across all pages
    function getExportSrNo(rowIdx, tbl) {
        // Get all rows nodes
        let allRows = tbl.rows({ order: 'applied', search: 'applied' }).nodes().toArray();
        // Filter only the checked rows
        let checkedRows = allRows.filter(row => $(row).find('input.row-select').prop('checked'));
        // Find the position of this row in the checkedRows array
        let sr = checkedRows.findIndex(row => tbl.row(row).index() === rowIdx) + 1;
        return sr; // consecutive Sr.No
        }
        function setInvalid(selector, message) {
            const element = $(selector);
            element.addClass("is-invalid").removeClass("is-valid");
            let feedback = element.next(".invalid-feedback");
            if (!feedback.length) {
                feedback = $('<div class="invalid-feedback"></div>').insertAfter(element);
            }
            feedback.text(message);
        }

        function setValid(selector) {
            const element = $(selector);
            element.addClass("is-valid").removeClass("is-invalid");
            let feedback = element.next(".invalid-feedback");
            if (feedback.length) feedback.text("");
        }

    </script>

</body>
</html>
