@model P2PLibray.Purchase.Purchase

<h3 class="text-center fw-bold text-primary">Create Purchase Requisition</h3>

<div class="container mt-4">
    @using (Html.BeginForm("CreatePR", "Purchase", FormMethod.Post, new { id = "prForm" }))
    {
        @Html.AntiForgeryToken()

        <div class="row g-3 mb-4">
            <!-- PR Code -->
            <div class="col-md-4">
                <label for="PRcode" class="form-label">Purchase Requisition No:</label>
                @Html.TextBoxFor(m => m.PRCode, new { @class = "form-control", @id = "PRcode", placeholder = "Auto-generated", @readonly = "readonly" })
            </div>

            <!-- Industry Type -->
            <div class="col-md-4">
                <label for="IndustryType" class="form-label">Category Type: <span class="text-danger">*</span></label>
                <select id="IndustryType" class="form-select IndustryType">
                    <option value="">Select Category Type</option>
                </select>
            </div>

            <!-- Item Name -->
            <div class="col-md-4">
                <label for="ItemName" class="form-label">Item Name: <span class="text-danger">*</span></label>
                <select id="ItemName" class="form-select ItemName">
                    <option value="">Select Item</option>
                </select>
            </div>

            <!-- Item Code -->
            <div class="col-md-4">
                <label for="ItemCode" class="form-label">Item Code:</label>
                <input type="text" id="ItemCode" class="form-control ItemCode" readonly placeholder="Auto-filled" />
            </div>

            <!-- Description -->
            <div class="col-md-4">
                <label for="Description" class="form-label">Item Description:</label>
                <textarea id="Description" class="form-control Description" rows="2" readonly></textarea>
            </div>

            <!-- UOM -->
            <div class="col-md-4">
                <label for="UOM" class="form-label">UOM:</label>
                <input type="text" id="UOM" class="form-control" readonly placeholder="Auto-filled" />
            </div>

            <!-- Unit Rate -->
            <div class="col-md-4">
                <label for="UnitRate" class="form-label">Unit Rate:</label>
                <input type="text" id="UnitRate" class="form-control UnitRate" readonly placeholder="Auto-filled" />
            </div>

            <!-- Quantity -->
            <div class="col-md-4">
                <label for="Qty" class="form-label">Required Quantity: <span class="text-danger">*</span></label>
                <input type="number" id="Qty" class="form-control" min="1" placeholder="Enter quantity" autocomplete="off" />
            </div>

            <!-- Priority -->
            <div class="col-md-4">
                <label for="priority" class="form-label">Priority Name: <span class="text-danger">*</span></label>
                <select id="priority" class="form-select priority">
                    <option value="">Select Priority</option>
                </select>
            </div>
        </div>

        <!-- Required Date -->
        <div class="col-md-4 mb-3">
            <label for="ToDate" class="form-label">Required Date: <span class="text-danger">*</span></label>
            <input type="date" id="ToDate" class="form-control" />
            <small id="ToDateDisplay" class="text-muted"></small>
        </div>

        <!-- Add Item Button -->
        <div class="mb-4 text-end">
            <button type="button" id="AddItem" class="btn btn-success">
                <i class="bi bi-plus-circle"></i> Add Item
            </button>
        </div>

        <!-- Item Table -->
        <h4 class="mb-3">Item Details</h4>
        <div class="table-responsive mb-4">
            <table class="table table-bordered table-hover" id="ItemTable">
                <thead class="table-dark">
                    <tr>
                        <th>SR No</th>
                        <th>Item Code</th>
                        <th>Item Name</th>
                        <th>UOM</th>
                        <th>Description</th>
                        <th>Unit Rate</th>
                        <th>Qty</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>

        <!-- Buttons -->
        <div class="text-end mb-4">
            <button type="reset" class="btn btn-danger me-2"><i class="bi bi-x-circle"></i> Cancel</button>
            <button type="submit" class="btn btn-success me-2"><i class="bi bi-check-circle"></i> Create PR</button>
        </div>
    }
</div>

<script>
    $(document).ready(function () {

        // ---------- Helper Functions ----------
        function showValidation(selector, message) {
            $(selector).addClass("is-invalid");
            $(selector).next(".text-danger").remove();
            $(selector).after('<span class="text-danger">' + message + '</span>');
        }

        function clearValidation(selector) {
            $(selector).removeClass("is-invalid");
            $(selector).next(".text-danger").remove();
        }

        // ---------- Load Data ----------
        $.get('/Purchase/GetNewPRCode', function (res)
        {
            $("#PRcode").val(res.PRCode);
        });

        $.getJSON('/Purchase/GetIndustryTypeSP', function (data)
        {
            var ddl = $('#IndustryType');
            ddl.empty().append('<option value="">-- Select Category Type --</option>');
            $.each(data, function (i, item)
            {
                ddl.append($('<option>').val(item.Value).text(item.Text));
            });
        });

        $.getJSON('/Purchase/GetPrioritySP', function (data)
        {
            var ddl = $('#priority');
            ddl.empty().append('<option value="">-- Select Priority --</option>');
            $.each(data, function (i, item)
            {
                ddl.append($('<option>').val(item.Value).text(item.Text));
            });
        });

        // ---------- Load Items ----------
        function loadItems(categoryId = null)
        {
            $.ajax({
                url: '/Purchase/NewItemPartialSP',
                type: 'GET',
                data: { itemcatagoryid: categoryId },
                success: function (res)
                {
                    var select = $(".ItemName");
                    select.empty().append('<option value="">-- Select Item --</option>');
                    $.each(res.data, function (i, item)
                    {
                        select.append($('<option/>')
                            .val(item.ItemCode)
                            .text(item.ItemName)
                            .attr('data-uom', item.UOM)
                            .attr('data-description', item.Description)
                            .attr('data-unitrate', item.UnitRate));
                    });
                }
            });
        }

        loadItems();

        // ---------- On Change Events ----------
        $('#IndustryType').change(function () {
            var categoryId = $(this).val();


            if ($("#ItemTable tbody tr").length > 0) {


                $(this).val($(this).data("previous"));


                $('#industryAlert').remove();


                $(this).addClass('is-invalid');

                $(this).after(`
            <div id="industryAlert" class="alert alert-danger mt-2 py-2" role="alert">
                 Please remove all added items before changing Category Type!
            </div>
        `);

                setTimeout(function () {
                    $('#industryAlert').fadeOut('slow', function () {
                        $(this).remove();
                    });
                    $('#IndustryType').removeClass('is-invalid');
                }, 3000);

                return;
            }

            
            $(this).removeClass('is-invalid');
            $('#industryAlert').remove();


            $(this).data("previous", categoryId);


            if (categoryId) {
                loadItems(categoryId);
            } else {
                $(".ItemName").empty().append('<option value="">Select Item</option>');
            }
        });




        $(".ItemName").on("change", function ()
        {
            var sel = $(this).find('option:selected');
            $(".ItemCode").val(sel.val());
            $("#UOM").val(sel.attr('data-uom'));
            $(".Description").val(sel.attr('data-description'));
            $(".UnitRate").val(sel.attr('data-unitrate'));
        });

        // ---------- Real-time Field Validations ----------
        $(".IndustryType").on("change", function ()
        {
            if ($(this).val().trim() === "")
                showValidation(".IndustryType", "Please select Industry Type.");
            else
                clearValidation(".IndustryType");
        });

        $(".ItemName").on("change", function ()
        {
            if ($(this).val().trim() === "")
                showValidation(".ItemName", "Please select an Item.");
            else
                clearValidation(".ItemName");
        });

        $("#Qty").on("input", function ()
        {
            var qty = $(this).val().trim();
            if (qty === "" || isNaN(qty) || parseFloat(qty) <= 0)
                showValidation("#Qty", "Enter valid quantity.");
            else
                clearValidation("#Qty");
        });

        // ---------- Add Item ----------
        $("#AddItem").click(function ()
        {
            var srNo = $("#ItemTable tbody tr").length + 1;
            var industrytype = $(".IndustryType").val().trim();
            var itemCode = $(".ItemCode").val().trim();
            var itemName = $(".ItemName option:selected").text().trim();
            var uom = $("#UOM").val().trim();
            var description = $(".Description").val().trim();
            var unitRate = $(".UnitRate").val().trim();
            var qty = $("#Qty").val().trim();

            var hasError = false;

            if (!industrytype)
            {
                showValidation(".IndustryType", "Please select Industry Type.");
                hasError = true;
            }
            if (!itemCode)
            {
                showValidation(".ItemName", "Please select Item.");
                hasError = true;
            }
            if (qty === "" || isNaN(qty) || parseFloat(qty) <= 0)
            {
                showValidation("#Qty", "Enter valid quantity.");
                hasError = true;
            }
            

            var duplicate = false;
            $("#ItemTable tbody tr").each(function () {
                if ($(this).find("td:eq(1)").text().trim() === itemCode) {
                    duplicate = true;
                    return false;
                }
            });
            if (duplicate) {
                showValidation(".ItemName", "This item is already added.");
                hasError = true;
            }

            if (hasError) return; // Stop if validation fails

            var row = `
                <tr>
                    <td>${srNo}</td>
                    <td>${itemCode}</td>
                    <td>${itemName}</td>
                    <td>${uom}</td>
                    <td>${description}</td>
                    <td>₹ ${unitRate}</td>
                    <td>${qty}</td>
                    <td><button type='button' class='btn btn-danger btn-sm remove'><i class='bi bi-trash'></i></button></td>
                </tr>`;
            $("#ItemTable tbody").append(row);

            $(".ItemName option:selected").remove();
            $(".ItemCode, #UOM, .Description, .UnitRate, #Qty").val("");

            Swal.fire({
                icon: 'success',
                title: 'Item Added',
                text: `${itemName} has been added successfully.`,
                timer: 1500,
                showConfirmButton: false
            });
        });

        // ---------- Remove Item ----------
        $(document).on("click", ".remove", function ()
        {
            var row = $(this).closest("tr");
            var code = row.find("td:eq(1)").text();
            var name = row.find("td:eq(2)").text();
            var uom = row.find("td:eq(3)").text();
            var desc = row.find("td:eq(4)").text();
            var rate = row.find("td:eq(5)").text().replace("₹", "").trim();

            Swal.fire({
                title: "Are you sure?",
                text: `Do you want to remove ${name}?`,
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, remove it!",
                cancelButtonText: "Cancel",
                customClass: {
                    confirmButton: 'btn btn-primary  me-2', 
                    cancelButton: 'btn btn-danger'   
                },
                buttonsStyling: false 
                }).then((result) =>
                {
                    if (result.isConfirmed)
                    {
                    row.remove();
                    $(".ItemName").append($('<option/>').val(code).text(name)
                        .attr("data-uom", uom).attr("data-description", desc).attr("data-unitrate", rate));
                        $("#ItemTable tbody tr").each(function (i)
                        {
                            $(this).find("td:first").text(i + 1);
                        });
                        if
                            ($("#ItemTable tbody tr").length === 0)
                        {
                        $("#IndustryType").prop('disabled', false);
                    }
                        Swal.fire({
                        icon: 'success',
                        title: 'Removed',
                        text: `${name} has been removed.`,
                        timer: 1500,
                        showConfirmButton: false
                    });
                }
            });
        });

        // ---------- Priority → Required Date shubham  ----------
        const today = new Date();

        // Native min for input type="date"
        $('#ToDate').attr('min', today.toISOString().split('T')[0]);

        $('#priority').on('change', function () {
            let p = $(this).val();
            let minDate, maxDate;
            if (p === "9") {
                minDate = new Date();
                minDate.setDate(today.getDate() + 2);
                maxDate = new Date();
                maxDate.setDate(today.getDate() + 5);
            } else if (p === "11") {
                minDate = new Date();
                minDate.setDate(today.getDate() + 5);
                maxDate = new Date();
                maxDate.setDate(today.getDate() + 15);
            } else if (p === "10") {
                minDate = new Date();
                minDate.setDate(today.getDate() + 15);
                maxDate = null;
            } else {
                $('#ToDate').val("").removeAttr('min max');
                $('#ToDateDisplay').text('');
                return;
            }

            // Assign min/max in yyyy-mm-dd for input validity
            $('#ToDate').attr('min', minDate.toISOString().split('T')[0]);
            if (maxDate) $('#ToDate').attr('max', maxDate.toISOString().split('T')[0]);
            else $('#ToDate').removeAttr('max');

            $('#ToDate').val(minDate.toISOString().split('T')[0]);

            // Display in DD/MM/YYYY
            //const day = String(minDate.getDate()).padStart(2, '0');
            //const month = String(minDate.getMonth() + 1).padStart(2, '0');
            //const year = minDate.getFullYear();
            //$('#ToDateDisplay').text(`Selected Date: ${day}/${month}/${year}`);
        });

        // Show selected date in DD/MM/YYYY
        //$('#ToDate').on('change', function () {
        //    const [y, m, d] = this.value.split('-');
        //    $('#ToDateDisplay').text(`Selected Date: ${d}/${m}/${y}`);
        //});


        // ---------- Submit Form ----------
        $("#prForm").submit(function (e)
        {
            e.preventDefault();
            var valid = true;

            $("#priority").on("change", function ()
            {
                if ($(this).val().trim() === "") showValidation("#priority", "Please select priority.");
                else clearValidation("#priority");
            });

            $("#ToDate").on("change", function ()
            {
                if ($(this).val().trim() === "") showValidation("#ToDate", "Please select an ToDate.");
                else clearValidation("#ToDate");
            });
            if ($("#priority").val() === "")
            {
                showValidation("#priority", "Priority is required."); valid = false;
            }
            else clearValidation("#priority");
            if ($("#ToDate").val() === "")
            {
                showValidation("#ToDate", "Required Date is required."); valid = false;
            } else clearValidation("#ToDate");

            if ($("#ItemTable tbody tr").length === 0)
            {
                Swal.fire({
                    icon: "warning",
                    title: "No Items Added",
                    text: "Please add at least one item before submitting!",
                    timer: 2000,
                    showConfirmButton: false
                });
                valid = false;
            }

            if (!valid) return;

            var items = [];
            $("#ItemTable tbody tr").each(function ()
            {
                var row = $(this);
                items.push({
                    PRCode: $("#PRcode").val(),
                    ItemCode: row.find("td:eq(1)").text().trim(),
                    RequiredQuantity: parseFloat(row.find("td:eq(6)").text().trim())
                });
            });

            var data = {
                PRCode: $("#PRcode").val(),
                RequiredDate: $("#ToDate").val(),
                Status: 5,
                PriorityId: parseInt($("#priority").val()),
                ApproveRejectedDate: null,
                Items: items
            };

            $.ajax({
                url: '/Purchase/CreatePR',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function (res)
                {
                    if (res.success)
                    {
                        Swal.fire({
                            icon: 'success',
                            title: 'Purchase Requisition Created',
                            text: 'Your PR has been created successfully!',
                            timer: 2000,
                            showConfirmButton: false
                        }).then(() => window.location.href = '/Purchase/AllRequisitionSP');
                    } else
                    {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: res.message || 'Failed to create PR!'
                        });
                    }
                },
                error: function (xhr)
                {
                    Swal.fire({
                        icon: 'error',
                        title: 'Server Error',
                        text: xhr.responseText || "Something went wrong!"
                    });
                }
            });
        });
    });
</script>
