@{
    Layout = null;
    var rfq = (string)ViewBag.RFQCode ?? "";
    var pr = (string)ViewBag.PRCode ?? "";
    var hasUnregistered = Request.QueryString["hasUnregistered"] ?? "0";
}

<html>
<head>

    <style>

        button.dt-button.processing,
        div.dt-button.processing {
            pointer-events: auto !important;
            opacity: 1 !important;
            background: none !important;
        }

            button.dt-button.processing:after {
                content: none !important;
            }

        #quotationTable thead th {
            text-align: center !important;
            vertical-align: middle;
        }

        #quotationTable tbody td {
            font-size: 14px;
        }

        .dt-toolbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 10px;
        }

        .dt-left {
            display: flex;
            align-items: center;
            gap: 10px;
            flex-wrap: wrap;
        }

        .dataTables_paginate {
            float: right !important;
        }

        .dt-buttons .btn {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 38px;
            height: 38px;
            border-radius: 50%;
            padding: 0;
        }

        .btn-icon-square {
            width: 36px;
            height: 36px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 6px;
        }

        #quotationTable td:nth-child(6) {
            text-align: center !important;
        }


        #quotationDetailModal .modal-dialog {
            margin: 0 auto;
            position: relative;
            top: 50%;
            transform: translateY(-50%);
        }



        .autofetch-box {
            background-color: #e9f7ef;
            font-weight: 600;
            color: #155724;
        }

        .mt-n2 {
            margin-top: -0.10rem !important;
        }
    </style>



</head>
<body>

    <div id="mainFormContainer" class="container mt-4 shadow-sm rounded bg-white p-3">


        <input type="hidden" id="rfqCode" value="@ViewBag.RFQCode" />

        <div class="mb-1" style="margin-top:-12px;">
            <label for="rfqCodeDisplay" class="form-label fw-bold">RFQ Code</label>
            <input type="text" id="rfqCodeDisplay" class="small text-muted border rounded p-2 bg-light mb-2 mt-2"
                   value="@ViewBag.RFQCode" readonly style="max-width:250px;" />
        </div>




        <!-- Table -->
        <div class="table-responsive shadow-sm rounded">
            <table class="table table-striped table-hover table-bordered align-middle" id="quotationTable">
                <thead class="table-dark">
                    <tr class="text-center">
                        <th><input type="checkbox" id="selectAll" /></th>
                        <th>Sr No</th>
                        <th>RFQ Code</th>
                        <th>Register Quotation Code</th>
                        <th>Vendor Name</th>
                        <th>Vendor Delivery Date</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody class="text-center"></tbody>
            </table>
        </div>
    </div>

    @*modal*@
    <div class="modal fade modal-wide" id="quotationDetailModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header bg-primary  justify-content-center">
                    <h5 class="modal-title fw-bold text-white mb-4">Supplier Quotation Details</h5>
                    <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="quotationDetailContent"></div>
            </div>
        </div>
    </div>
    <script>
        $(document).ready(function () {
            $('[data-bs-toggle="tooltip"]').tooltip();

            //Toastr
            toastr.options = {
                closeButton: true,
                progressBar: true,
                newestOnTop: true,
                positionClass: "toast-top-right",
                preventDuplicates: true,
                timeOut: 3000,
                extendedTimeOut: 1000,
                showDuration: 300,
                hideDuration: 300,
                showMethod: "slideDown",
                hideMethod: "fadeOut"

            };

            //  Show toast
            function showToast(message, type = 'warning') {
                if (type === 'success') toastr.success(message);
                else if (type === 'error') toastr.error(message);
                else if (type === 'info') toastr.info(message);
                else toastr.warning(message);
            }

            //  Common export columns (skip checkbox=0 and Action=6)
            function exportColumns(idx) {
                return idx !== 0 && idx !== 6;
            }

            let quotationTable = $('#quotationTable').DataTable({
                dom: '<"dt-toolbar"<"dt-left"B><"dt-search"f>>rt<"bottom d-flex justify-content-between align-items-center"ip>',
                ordering: false,
                destroy: true,
                buttons: [


                    // Print
                    {
                        extend: 'print',
                        title: '',
                        text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                        titleAttr: 'Print',
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) {
                                showToast("Please select at least one Quotation to Print");
                                return;
                            }
                            $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            columns: exportColumns,
                            rows: (idx, data, node) => $(node).find('.row-select').prop('checked')
                        },
                        customize: function (win) {
                            const printDate = new Date().toLocaleDateString();

                            $(win.document.body).prepend(`
                        <div style="text-align:center; font-size:16px; font-weight:bold; margin-bottom:4px;">
                            Quotations
                        </div>
                        <div style="text-align:center; font-size:12px; margin-bottom:10px;">
                            Generated on: ${printDate}
                        </div>
                    `);

                            $(win.document.body).append(`
                        <style>
                            thead th {
                                background-color: black !important;
                                color: white !important;
                                text-align: center !important;
                                -webkit-print-color-adjust: exact !important;
                                print-color-adjust: exact !important;
                            }
                            table {
                                border-collapse: collapse !important;
                                width: 100% !important;
                            }
                            td, th {
                                border: 1px solid #000 !important;
                                padding: 6px !important;
                            }
                        </style>
                    `);

                            $(win.document.body).find('table')
                                .addClass('table table-bordered table-striped')
                                .css('font-size', '14px');

                            $(win.document.body).find('table tbody tr').each(function (i) {
                                $(this).find('td:first').text(i + 1);
                            });
                        }
                    }

                    ,
                    // PDF
                    {
                        extend: 'pdfHtml5',
                        title: 'Quotations',
                        text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                        titleAttr: 'Export PDF',
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) { showToast("Please select at least one Quotation to export PDF"); return; }
                            $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            columns: exportColumns,
                            rows: (idx, data, node) => $(node).find('.row-select').prop('checked'),
                            format: {
                                body: function (data, rowIdx, colIdx) {
                                    if (colIdx === 0) return rowIdx + 1;
                                    if (typeof data === 'string') return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                    return data;
                                }
                            }
                        },
                        customize: function (doc) {
                            doc.content[0].alignment = 'center';
                            doc.content[0].fontSize = 14;
                            var exportDate = new Date().toLocaleDateString('en-GB');
                            doc.content.splice(1, 0, { text: 'Generated Date: ' + exportDate, alignment: 'center', margin: [0, 0, 0, 8], fontSize: 10 });
                            var tableNode = doc.content.find(c => c.table);
                            if (!tableNode) return;
                            doc.styles = doc.styles || {};
                            doc.styles.tableHeader = { alignment: 'center', fillColor: '#212529', color: '#ffffff', bold: true };
                            doc.styles.tableBodyEven = { alignment: 'center' };
                            doc.styles.tableBodyOdd = { alignment: 'center' };
                            tableNode.layout = {
                                hLineWidth: () => .5, vLineWidth: () => .5,
                                hLineColor: () => '#dddddd', vLineColor: () => '#dddddd',
                                paddingLeft: () => 30, paddingRight: () => 6,
                                paddingTop: () => 4, paddingBottom: () => 4
                            };
                            tableNode.table.body.forEach((row, i) => { if (i > 0) row[0] = { text: String(i), alignment: 'center' }; });
                        }
                    },


                    // Excel
                    {
                        extend: 'excelHtml5',
                        title: '',
                        filename: 'Quotations_List',
                        text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                        titleAttr: 'Export Excel',
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) {
                                showToast("Please select at least one Quotation to export Excel");
                                return;
                            }
                            window.__excelSrCounter = 0;
                            $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            columns: exportColumns,
                            rows: (idx, data, node) => $(node).find('.row-select').prop('checked'),
                            format: {
                                body: function (data, rowIdx, colIdx) {
                                    if (colIdx === 1) return ++window.__excelSrCounter;
                                    return typeof data === 'string' ? data.replace(/<\/?[^>]+(>|$)/g, "").trim() : data;
                                }
                            }
                        },
                        customize: function (xlsx) {
                            var sheet = xlsx.xl.worksheets['sheet1.xml'];
                            var $sheet = $(sheet);

                            var colCount = $('row:first c', sheet).length;
                            if (colCount === 0) colCount = 6;
                            var lastCol = String.fromCharCode(64 + colCount);

                            $sheet.find('sheetData row').each(function () {
                                var r = parseInt($(this).attr('r'));
                                $(this).attr('r', r + 2);
                                $(this).find('c').each(function () {
                                    var cellRef = $(this).attr('r');
                                    var col = cellRef.replace(/[0-9]/g, '');
                                    var row = parseInt(cellRef.replace(/[A-Z]/g, '')) + 2;
                                    $(this).attr('r', col + row);
                                });
                            });

                            var title = 'Quotations List';
                            var generatedDate = 'Generated Date: ' + moment().format('DD/MM/YYYY');

                            var titleRow = `
<row r="1">
    <c t="inlineStr" r="A1" s="55">
        <is><t>${title}</t></is>
    </c>
</row>`;
                            var dateRow = `
<row r="2">
    <c t="inlineStr" r="A2" s="56">
        <is><t>${generatedDate}</t></is>
    </c>
</row>`;

                            $sheet.find('sheetData').prepend(titleRow + dateRow);

                            var mergeCells = $sheet.find('mergeCells');
                            if (mergeCells.length === 0) {
                                mergeCells = $('<mergeCells count="0"></mergeCells>');
                                $sheet.append(mergeCells);
                            }

                            mergeCells.append(`<mergeCell ref="A1:${lastCol}1"/>`);
                            mergeCells.append(`<mergeCell ref="A2:${lastCol}2"/>`);
                            mergeCells.attr('count', mergeCells.find('mergeCell').length);

                            var styles = xlsx.xl['styles.xml'];
                            var $styles = $(styles);
                            var cellXfs = $styles.find('cellXfs');
                            var count = parseInt(cellXfs.attr('count'));
                            var newStyleIndex1 = count;
                            var newStyleIndex2 = count + 1;

                            cellXfs.append(`date
<xf numFmtId="0" fontId="0" fillId="0" borderId="0" applyAlignment="1">
    <alignment horizontal="center" vertical="center"/>
</xf>`);
                            cellXfs.append(`
<xf numFmtId="0" fontId="0" fillId="0" borderId="0" applyAlignment="1">
    <alignment horizontal="center" vertical="center"/>
</xf>`);
                            cellXfs.attr('count', count + 2);

                            $sheet.find('c[r="A1"]').attr('s', newStyleIndex1);
                            $sheet.find('c[r="A2"]').attr('s', newStyleIndex2);
                        }
                    },

                  
                    //  CSV
                    {
                        extend: 'csvHtml5',
                        title: '',
                        text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                        titleAttr: 'Export to CSV',
                        attr: {
                            'data-bs-toggle': 'tooltip',
                            'data-bs-placement': 'bottom',
                            'title': 'Export to CSV'
                        },
                        action: function (e, dt, button, config) {
                            if ($('#quotationTable .row-select:checked').length === 0) {
                                showToast("Please select at least one Quotation to export!", "warning");
                                return;
                            }

                            window.__srnoCounter = 0;

                            $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                            dt.processing(false);
                        },
                        exportOptions: {
                            rows: function (idx, data, node) {
                                return $(node).find('.row-select').prop('checked');
                            },
                            columns: function (idx) {
                                return idx !== 0 && idx !== 6;
                            },
                            format: {
                                body: (function () {
                                    return function (data, rowIdx, colIdx) {
                                        data = typeof data === 'string' ? data.replace(/<[^>]*>/g, '').trim() : data;

                                        if (colIdx === 1) {
                                            if (!window.__srnoCounter) window.__srnoCounter = 0;
                                            return ++window.__srnoCounter;
                                        }

                                        if (colIdx === 5) {
                                            const m = moment(data, ["DD/MM/YYYY", "YYYY-MM-DD", "DD-MM-YYYY"], true);
                                            if (m.isValid()) {
                                                return m.format("DD/MM/YYYY"); 
                                            }
                                            return data;
                                        }

                                        return data;
                                    };
                                })()
                            }
                        },
                        filename: function () {
                            return 'Quotations_' + new Date().toISOString().slice(0, 10).replace(/-/g, "");
                        },
                        customize: function (csv) {
                            const spaces = '          ';
                            return spaces + '\n' + csv;
                        }
                    }

                ],
                initComplete: function () {
                    $('#quotationTable_filter input').addClass("form-control").attr("placeholder", "Search...").css("height", "40px");
                },
                processing: true,
                ajax: {
                    url: '/Purchase/ViewRFQVNK',
                    type: 'GET',
                    data: { rfqCode: $("#rfqCode").val() },
                    dataSrc: function (data) { return data; }
                },
                columns: [
                    { data: null, orderable: false, className: "text-center", render: (d, t, r) => `<input type="checkbox" class="row-select" value="${r.RegisterQuotationCode}" />` },
                    { data: null, className: "text-center", orderable: false, render: (d, t, r, meta) => meta.row + 1 },
                    { data: 'RFQCode', visible: false, searchable: false },
                    { data: 'RegisterQuotationCode' },
                    { data: 'VendorName' },
                    {
                        data: 'VendorDeliveryDateVK',
                        render: (d) => d ? moment(d).format("DD/MM/YYYY") : ""
                    },
                    {
                        data: 'RegisterQuotationCode',
                        orderable: false,
                        className: "text-center",
                        render: (d) => `
                                    <a href="javascript:void(0)"
                                       class="btn btn-sm btn-primary btn-icon-square btn-view-detail"
                                       data-rq="${d}"
                                       data-bs-toggle="tooltip"
                                       title="View Quotation Details">
                                        <i class="bi bi-eye-fill"></i>
                                    </a>`
                    }
                ]
            });

            // Select All
            $(document).on("change", "#selectAll", function () {
                $(".row-select").prop("checked", this.checked);
            });

            // View detail
            $(document).on("click", ".btn-view-detail", function () {
                let rqCode = $(this).data("rq");
                $("#quotationDetailContent").html("<div class='text-center p-3 small'>Loading...</div>");
                $.get("/Purchase/ViewQuotationDetailVNK", { rqCode: rqCode }, function (html) {
                    $("#quotationDetailContent").html(html);
                    $("#quotationDetailModal").modal("show");
                });
            });


        });

        // Keep blur when opening nested modal from inside rfqModal
        $(document).on('hidden.bs.modal', '.modal', function () {
            if ($('.modal.show').length) {
                $('body').addClass('modal-open');
            }
        });


    </script>


</body>
</html>