<div class="d-flex justify-content-between align-items-center mb-3">
    <div class="flex-grow-1 text-center">
        <h4 class="mb-0 h3 text-primary">Section List</h4>
    </div>
    <button class="btn btn-success" id="btnAddSection">
        <i class="bi bi-plus-circle"></i> Add Section
    </button>
</div>

<style>
    button.dt-button.processing,
    div.dt-button.processing {
        pointer-events: auto !important;
        opacity: 1 !important;
        background: none !important;
    }

        button.dt-button.processing:after {
            content: none !important;
        }
</style>

<div class="table-responsive">
    <table id="sectionTable" class="table table-bordered table-hover align-middle w-100">
        <thead class="table-dark text-center">
            <tr>
                <th width="50"><input type="checkbox" id="selectAllSection"></th>
                <th width="80">Sr No</th>
                <th>Section ID</th>
                <th>Section Code</th>
                <th>Section Name</th>
                <th>Warehouse Code</th>
                <th>Warehouse Name</th>
                <th>Description</th>
                <th width="150">Action</th>
            </tr>
        </thead>
        <tbody class="text-center"></tbody>
    </table>
</div>

<!-- Add Section Modal -->
<div class="modal fade" id="addSectionModal" tabindex="-1" aria-labelledby="addSectionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white position-relative py-2">
                <h5 class="modal-title h5 text-white text-center mb-1 w-100" id="sectionModalTitle" style="line-height: 1.2;">
                    Add New Section
                </h5>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3"
                        data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addSectionForm">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="input-group input-group-merge mb-3">
                                <span class="input-group-text"><i class="ri-barcode-line"></i></span>
                                <div class="form-floating form-floating-outline">
                                    <input type="text" id="SectionCodeSk" name="SectionCode" class="form-control" required readonly>
                                    <label for="SectionCodeSk">Section Code</label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="input-group input-group-merge mb-1">
                                <span class="input-group-text"><i class="ri-layout-masonry-line"></i></span>
                                <div class="form-floating form-floating-outline">
                                    <input type="text" name="SectionName" class="form-control">
                                    <label for="SectionName">Section Name <span class="text-danger">*</span></label>
                                </div>
                            </div>
                            <span id="SectionNameError" class="text-danger"></span>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <div class="input-group input-group-merge mb-3">
                                    <span class="input-group-text"><i class="ri-building-4-line"></i></span>
                                    <div class="form-floating form-floating-outline">
                                        <select id="WarehouseCodes" name="WarehouseCode" class="form-select">
                                            <option value="">-- Select Warehouse --</option>
                                        </select>
                                        <label for="WarehouseCodes">Warehouse <span class="text-danger">*</span></label>
                                    </div>
                                </div>
                                <span id="addSectionWhError" class="text-danger"></span>
                            </div>
                            <div class="col-md-6">
                                <div class="input-group input-group-merge mb-3">
                                    <span class="input-group-text"><i class="ri-file-text-line"></i></span>
                                    <div class="form-floating form-floating-outline">
                                        <textarea name="Descriptionk" class="form-control" style="height: 80px;"></textarea>
                                        <label for="Description">Description</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="d-flex justify-content-end gap-2 mt-4">
                            <button type="submit" class="btn btn-success px-4">
                                <i class="bi bi-check-circle me-2 text-white"></i>Save
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Edit Section Modal -->
<div class="modal fade" id="editSectionModal" tabindex="-1" aria-labelledby="editSectionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white position-relative py-2">
                <h5 class="modal-title h5 text-white text-center mb-1 w-100" id="editSectionModalTitle" style="line-height: 1.2;">
                    Edit Section
                </h5>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3"
                        data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editSectionForm">
                    <input type="hidden" name="SectionId" id="EditSectionId" />
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="input-group input-group-merge mb-3">
                                <span class="input-group-text"><i class="ri-barcode-line"></i></span>
                                <div class="form-floating form-floating-outline">
                                    <input type="text" id="EditSectionCode" name="SectionCode" class="form-control" readonly>
                                    <label for="EditSectionCode">Section Code</label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="input-group input-group-merge mb-3">
                                <span class="input-group-text"><i class="ri-layout-masonry-line"></i></span>
                                <div class="form-floating form-floating-outline">
                                    <input type="text" id="EditSectionName" name="SectionName" class="form-control" required>
                                    <label for="EditSectionName">Section Name <span class="text-danger">*</span></label>
                                </div>
                            </div>
                            <div id="EditSectionNameError" class="text-danger" style="font-size: 0.9rem;"></div>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="input-group input-group-merge mb-3">
                                <span class="input-group-text"><i class="ri-building-4-line"></i></span>
                                <div class="form-floating form-floating-outline" readonly>
                                    <select id="EditWarehouseCode" name="WarehouseCode" class="form-select" required></select>
                                    <label for="EditWarehouseCode">Warehouse <span class="text-danger">*</span></label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="input-group input-group-merge mb-3">
                                <span class="input-group-text"><i class="ri-file-text-line"></i></span>
                                <div class="form-floating form-floating-outline">
                                    <textarea id="EditDescription" name="Description" class="form-control" style="height: 80px;"></textarea>
                                    <label for="EditDescription">Description</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="d-flex justify-content-end gap-2 mt-4">
                        <button type="submit" class="btn btn-success px-4">
                            <i class="bi bi-check-circle me-2 text-white"></i>Update
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- View Section Modal -->
<div class="modal fade" id="viewSectionModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white position-relative py-2">
                <h5 class="modal-title h5 text-white text-center mb-1 w-100" id="sectionDetailsModalTitle" style="line-height: 1.2;">
                    Section Details
                </h5>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3"
                        data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form class="row g-3">
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-barcode-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="ViewSectionCode" readonly>
                                <label for="ViewSectionCode">Section Code</label>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-layout-masonry-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="ViewSectionName" readonly>
                                <label for="ViewSectionName">Section Name</label>
                            </div>
                        </div>
                    </div>
                    <div class="col-12">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-building-4-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="ViewWarehouseName" readonly>
                                <label for="ViewWarehouseName">Warehouse</label>
                            </div>
                        </div>
                    </div>
                    <div class="col-12">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-file-text-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <textarea class="form-control" id="ViewDescription" rows="3" readonly></textarea>
                                <label for="ViewDescription">Description</label>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        // ================= CONFIGURATION & CONSTANTS =================
        const CONFIG = {
            urls: {
                getSections: '@Url.Action("GetSectionsSK", "Inventory")',
                getNextCode: '/Inventory/GetNextSectionCodeAsyncSK',
                addSection: '/Inventory/AddSection',
                updateSection: '/Inventory/UpdateSectionSK',
                deleteSection: '/Inventory/DeleteSectionSK',
                getSectionById: '/Inventory/GetSectionByIdSK',
                getWarehouses: '/Inventory/GetWarehousesListSK'
            },
            selectors: {
                table: '#sectionTable',
                addForm: '#addSectionForm',
                editForm: '#editSectionForm',
                addModal: '#addSectionModal',
                editModal: '#editSectionModal',
                viewModal: '#viewSectionModal'
            }
        };

        // ================= GLOBAL VARIABLES =================
        let selectedSectionIds = new Set();
        let table;

        // ================= UTILITY FUNCTIONS =================
        const utils = {
            // Tooltip initialization
            initTooltips: function() {
                const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                tooltipTriggerList.map(function(tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl, { trigger: 'hover' });
                });
            },

            // Validation helpers
            showFieldError: function(inputId, errorId, message) {
                const $input = $(`#${inputId}`).length ? $(`#${inputId}`) : $(`[name='${inputId}']`);
                $input.addClass("is-invalid");
                $(`#${errorId}`).text(message).removeClass("d-none");
            },

            clearFieldError: function(inputId, errorId) {
                const $input = $(`#${inputId}`).length ? $(`#${inputId}`) : $(`[name='${inputId}']`);
                $input.removeClass("is-invalid");
                $(`#${errorId}`).text("").addClass("d-none");
            },

            clearAllErrors: function(formSelector) {
                $(`${formSelector} .form-control, ${formSelector} .form-select`).removeClass("is-invalid");
                $(`${formSelector} .text-danger`).text("").addClass("d-none");
            },

            // SweetAlert wrapper
            showAlert: function(title, text, icon, timer = 2000) {
                return Swal.fire({ title, text, icon, timer, showConfirmButton: false });
            },

            // Error handler
            handleError: function(message) {
                Swal.fire({ title: "Error", text: message, icon: "error", timer: 2500, showConfirmButton: false });
            }
        };

        // ================= VALIDATION FUNCTIONS =================
        const validators = {
            sectionForm: function(formSelector) {
                let isValid = true;
                const $form = $(formSelector);

                const fields = {
                    SectionName: {
                        value: $form.find("[name='SectionName']").val().trim(),
                        required: true,
                        errorId: 'SectionNameError'
                    },
                    WarehouseCodes: {
                        value: $form.find("#WarehouseCodes").val(),
                        required: true,
                        errorId: 'addSectionWhError'
                    }
                };

                Object.keys(fields).forEach(field => {
                    const config = fields[field];
                    if (!config.value) {
                        const fieldName = field === 'SectionName' ? 'Section Name' : 'Warehouse';
                        utils.showFieldError(field, config.errorId, `${fieldName} is required.`);
                        isValid = false;
                    }
                });

                return isValid;
            },

            editSectionForm: function() {
                const nameValue = $('#EditSectionName').val().trim();
                if (!nameValue) {
                    $('#EditSectionName').addClass('is-invalid');
                    $('#EditSectionNameError').text('Section Name is required').removeClass('d-none');
                    return false;
                }
                return true;
            }
        };

        // ================= DATA TABLE INITIALIZATION =================
        function initializeDataTable() {
            table = $(CONFIG.selectors.table).DataTable({
                dom: '<"d-flex justify-content-between align-items-center mt-1 mb-2"Bf>rt<"d-flex justify-content-between mt-2"<"datatable-info"i><"datatable-pagination"p>>',
                buttons: getTableButtons(),
                processing: true,
                serverSide: false,
                ajax: {
                    url: CONFIG.urls.getSections,
                    type: "GET",
                    datatype: "json"
                },
                columns: getTableColumns(),
                columnDefs: [
                    { orderable: false, targets: "_all" },
                    { className: "text-center", targets: "_all" },
                ],
                drawCallback: function(settings) {
                    setTimeout(utils.initTooltips, 100);
                },
                initComplete: function(settings, json) {
                    setTimeout(utils.initTooltips, 100);
                }
            });
        }

        function getTableColumns() {
            return [
                {
                    data: null,
                    render: function(data, type, row) {
                        return `<input type="checkbox" class="section-checkbox" value="${row.SectionId}">`;
                    },
                    orderable: false,
                    searchable: false
                },
                {
                    data: null,
                    render: function(data, type, row, meta) {
                        return (type === 'display' || type === 'export') ? meta.row + 1 : data;
                    }
                },
                { data: "SectionId", visible: false },
                { data: "SectionCode" },
                { data: "SectionName" },
                { data: "WarehouseCode", visible: false },
                { data: "WarehouseName" },
                {
                    data: "Description",
                    render: function(data, type, row) {
                        if (!data) return "";
                        if (type === "display") {
                            const truncated = data.length > 30 ? data.substr(0, 30) + "..." : data;
                            return `<span class="description-tooltip" data-bs-toggle="tooltip" data-bs-placement="top" title="${data.replace(/"/g, '&quot;')}">${truncated}</span>`;
                        }
                        return data;
                    }
                },
                {
                    data: null,
                    render: function(data, type, row) {
                        return `
                        <div class="d-flex justify-content-center gap-1">
                            <button class="btn btn-sm btn-primary view-btn" data-id="${row.SectionId}" data-bs-toggle="tooltip" title="View Section">
                                <i class="bi bi-eye-fill"></i>
                            </button>
                            <button class="btn btn-sm btn-secondary edit-btn" data-id="${row.SectionId}" data-bs-toggle="tooltip" title="Edit Section">
                                <i class="bi bi-pencil-square"></i>
                            </button>
                            <button class="btn btn-sm btn-danger delete-btn" data-id="${row.SectionId}" data-bs-toggle="tooltip" title="Delete Section">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                        `;
                    },
                    orderable: false,
                    searchable: false
                }
            ];
        }

        function getTableButtons() {
            const baseConfig = {
                columns: ':visible:not(:first-child):not(:last-child)',
                rows: (idx, data) => selectedSectionIds.has(data.SectionId),
                action: function(e, dt, button, config) {
                    if (selectedSectionIds.size === 0) {
                        toastr.warning("Please select at least one section before exporting.", "No Selection");
                        return;
                    }
                    $.fn.dataTable.ext.buttons[config.extend].action.call(this, e, dt, button, config);
                }
            };

            return [
                createPrintButton(baseConfig),
                createPdfButton(baseConfig),
                createExcelButton(baseConfig),
                createCsvButton(baseConfig)
            ];
        }

        function createPrintButton(baseConfig) {
            return {
                extend: 'print',
                text: '<i class="bi bi-printer-fill text-dark fs-5" data-bs-toggle="tooltip" title="Print"></i>',
                title: '',
                exportOptions: baseConfig,
                customize: function(win) {
                    let serialNumber = 1;
                    $(win.document.body).find('table tbody tr').each(function() {
                        $(this).find('td:first').text(serialNumber++);
                    });

                    $(win.document.body).prepend(
                        '<h2 style="text-align: center; margin-bottom: 10px;">Section List</h2>' +
                        '<p style="text-align: center; margin-bottom: 20px; color: #666;">Generated Date: ' + new Date().toLocaleDateString("en-GB") + '</p>' +
                        '<hr style="margin-bottom: 20px;">'
                    );

                    $(win.document.body).find('table')
                        .css('border', '1px solid black').css('border-collapse', 'collapse').css('width', '100%')
                        .find('th, td').css('border', '1px solid black').css('padding', '8px').css('text-align', 'center');

                    $(win.document.body).find('th')
                        .css('background-color', 'black').css('color', 'white').css('font-weight', 'bold');
                }
            };
        }

        function createPdfButton(baseConfig) {
            return {
                extend: 'pdfHtml5',
                text: '<i class="bi bi-file-earmark-pdf text-danger fs-5" data-bs-toggle="tooltip" title="Export PDF"></i>',
                title: '',
                exportOptions: baseConfig,
                customize: function(doc) {
                    doc.content = [];
                    doc.content.push(
                        { text: 'SECTION LIST', style: 'header', alignment: 'center', margin: [0, 0, 0, 10] },
                        { text: 'Generated Date: ' + new Date().toLocaleDateString("en-GB"), style: 'subheader', alignment: 'center', margin: [0, 0, 0, 20] }
                    );

                    let selectedRows = [];
                    table.rows().every(function(rowIdx, tableLoop, rowLoop) {
                        let rowData = this.data();
                        if (selectedSectionIds.has(rowData.SectionId)) {
                            selectedRows.push(rowData);
                        }
                    });

                    let tableData = [
                        [
                            { text: 'SR NO', style: 'tableHeader' },
                            { text: 'SECTION CODE', style: 'tableHeader' },
                            { text: 'SECTION NAME', style: 'tableHeader' },
                            { text: 'WAREHOUSE NAME', style: 'tableHeader' },
                            { text: 'DESCRIPTION', style: 'tableHeader' }
                        ]
                    ];

                    selectedRows.forEach((row, index) => {
                        tableData.push([
                            { text: (index + 1).toString(), style: 'tableBody' },
                            { text: row.SectionCode || '', style: 'tableBody' },
                            { text: row.SectionName || '', style: 'tableBody' },
                            { text: row.WarehouseName || '', style: 'tableBody' },
                            { text: row.Description || '', style: 'tableBody' }
                        ]);
                    });

                    doc.content.push({
                        table: { widths: ['10%', '20%', '25%', '25%', '20%'], body: tableData },
                        layout: {
                            hLineWidth: (i, node) => 1, vLineWidth: (i, node) => 1,
                            hLineColor: (i, node) => '#000000', vLineColor: (i, node) => '#000000',
                            paddingTop: (i, node) => 5, paddingBottom: (i, node) => 5
                        }
                    });

                    doc.styles = {
                        header: { fontSize: 18, bold: true, alignment: 'center' },
                        subheader: { fontSize: 10, color: '#666666', alignment: 'center' },
                        tableHeader: { bold: true, fontSize: 10, color: 'white', fillColor: '#000000', alignment: 'center' },
                        tableBody: { fontSize: 9, alignment: 'center' }
                    };

                    doc.defaultStyle = { fontSize: 9, alignment: 'center' };
                }
            };
        }

        function createExcelButton(baseConfig) {
            return {
                extend: 'excelHtml5',
                text: '<i class="bi bi-file-earmark-excel text-success fs-5" data-bs-toggle="tooltip" title="Export Excel"></i>',
                title: 'Section List',
                messageTop: `Generated Date: ${moment().format("DD/MM/YYYY")}`,
                exportOptions: baseConfig,
                customize: function(xlsx) {
                    const sheet = xlsx.xl.worksheets['sheet1.xml'];
                    let serial = 1;

                    $('row', sheet).each(function() {
                        const rowIndex = parseInt($(this).attr('r'));
                        if (rowIndex === 3) {
                            $(this).find('c:first').before('<c t="inlineStr" s="2"><is><t>Sr. No</t></is></c>');
                        } else if (rowIndex > 3) {
                            $(this).find('c:first').before(`<c t="inlineStr" s="2"><is><t>${serial}</t></is></c>`);
                            serial++;
                        }
                    });

                    $('row[r="1"] c, row[r="2"] c', sheet).attr('s', '51');
                }
            };
        }

        function createCsvButton(baseConfig) {
            return {
                extend: 'csvHtml5',
                text: '<i class="bi bi-filetype-csv text-success fs-5" data-bs-toggle="tooltip" title="Export CSV"></i>',
                title: 'Section List',
                message: 'Generated Date: ' + new Date().toLocaleDateString("en-GB"),
                exportOptions: baseConfig
            };
        }

        // ================= EVENT HANDLERS =================
        function setupEventHandlers() {
            // Checkbox selection
            $("#selectAllSection").on("change", function() {
                const isChecked = $(this).prop("checked");
                $(".section-checkbox").prop("checked", isChecked).trigger("change");
            });

            $(CONFIG.selectors.table).on("change", ".section-checkbox", function() {
                const id = parseInt($(this).val());
                $(this).prop("checked") ? selectedSectionIds.add(id) : selectedSectionIds.delete(id);

                const total = $(".section-checkbox").length;
                const checked = $(".section-checkbox:checked").length;
                $("#selectAllSection").prop("checked", total > 0 && total === checked);
            });

            // Add Section
            $("#btnAddSection").on("click", function() {
                loadWarehouses();
                loadNextSectionCode();
                $(CONFIG.selectors.addModal).modal("show");
            });

            // Form submissions
            $(CONFIG.selectors.addForm).on("submit", function(e) {
                e.preventDefault();
                submitAddSection();
            });

            $(CONFIG.selectors.editForm).on("submit", function(e) {
                e.preventDefault();
                submitEditSection();
            });

            // Action buttons
            $(CONFIG.selectors.table).on("click", ".view-btn", function() {
                viewSection($(this).data("id"));
            });

            $(CONFIG.selectors.table).on("click", ".edit-btn", function() {
                editSection($(this).data("id"));
            });

            $(CONFIG.selectors.table).on("click", ".delete-btn", function() {
                deleteSection($(this).data("id"));
            });

            // Live validation
            $(document).on("input change", "[name='SectionName'], #WarehouseCodes", function() {
                const id = $(this).attr("id") || $(this).attr("name");
                if ($(this).val().trim()) {
                    const errorMap = { SectionName: "SectionNameError", WarehouseCodes: "addSectionWhError" };
                    if (errorMap[id]) utils.clearFieldError(id, errorMap[id]);
                }
            });

            // Modal cleanup
            $(CONFIG.selectors.addModal).on("hidden.bs.modal", function() {
                $(CONFIG.selectors.addForm)[0].reset();
                utils.clearAllErrors(CONFIG.selectors.addForm);
            });

            $(CONFIG.selectors.editModal).on("hidden.bs.modal", function() {
                $(CONFIG.selectors.editForm)[0].reset();
                utils.clearAllErrors(CONFIG.selectors.editForm);
                $('.is-invalid').removeClass('is-invalid');
            });
        }

        // ================= DATA OPERATIONS =================
        function loadWarehouses(selectedCode = "") {
            $.get(CONFIG.urls.getWarehouses, function(data) {
                const $ddl = $("#WarehouseCodes");
                $ddl.empty().append('<option value="">-- Select Warehouse --</option>');
                data.forEach(item => {
                    $ddl.append(`<option value="${item.WarehouseCode}">${item.WarehouseName}</option>`);
                });
                if (selectedCode) $ddl.val(selectedCode).trigger('change');
            }).fail(() => utils.handleError("Error loading warehouses."));
        }

        function loadWarehousesForEdit(selectedCode) {
            $.get(CONFIG.urls.getWarehouses, function(data) {
                const $ddl = $("#EditWarehouseCode");
                $ddl.empty().append('<option value="">-- Select Warehouse --</option>');
                data.forEach(item => {
                    $ddl.append(`<option value="${item.WarehouseCode}">${item.WarehouseName}</option>`);
                });
                $ddl.val(selectedCode).trigger("change");
            }).fail(() => utils.handleError("Error loading warehouses."));
        }

        function loadNextSectionCode() {
            $.get(CONFIG.urls.getNextCode, function(res) {
                if (res.success && res.code) {
                    $("#SectionCodeSk").val(res.code);
                } else {
                    utils.handleError(res.message || "Next Section Code not found!");
                }
            });
        }

        // ================= CRUD OPERATIONS =================
        function submitAddSection() {
            utils.clearAllErrors(CONFIG.selectors.addForm);

            if (!validators.sectionForm(CONFIG.selectors.addForm)) {
                return;
            }

            const formData = {
                SectionCode: $("#SectionCodeSk").val(),
                SectionName: $("[name='SectionName']").val(),
                WarehouseCode: $("#WarehouseCodes").val(),
                Description: $("[name='Descriptionk']").val()
            };

            $.ajax({
                url: CONFIG.urls.addSection,
                type: "POST",
                data: formData,
                success: function(res) {
                    if (res.success) {
                        $(CONFIG.selectors.addModal).modal("hide");
                        table.ajax.reload(null, false);
                        utils.showAlert("Success", res.message || "Section saved successfully!", "success");
                    } else {
                        handleAddSectionError(res.message);
                    }
                },
                error: function() {
                    utils.showFieldError("SectionName", "SectionNameError", "Server error while saving section.");
                }
            });
        }

        function handleAddSectionError(message) {
            utils.clearFieldError("SectionName", "SectionNameError");
            const msg = (message || "").toLowerCase();
            if (msg.includes("already exist") || msg.includes("duplicate") || msg.includes("exists")) {
                utils.showFieldError("SectionName", "SectionNameError", "Section Name already exists.");
            } else {
                utils.showFieldError("SectionName", "SectionNameError", message || "Something went wrong while saving section.");
            }
        }

        function editSection(id) {
            $.get(CONFIG.urls.getSectionById, { id }, function(res) {
                if (res.success) {
                    $("#EditSectionId").val(res.data.SectionId);
                    $("#EditSectionCode").val(res.data.SectionCode);
                    $("#EditSectionName").val(res.data.SectionName);
                    $("#EditDescription").val(res.data.Description);
                    loadWarehousesForEdit(res.data.WarehouseCode);
                    $(CONFIG.selectors.editModal).modal("show");
                } else {
                    utils.handleError(res.message);
                }
            }).fail(() => utils.handleError("Error loading section details."));
        }

        function submitEditSection() {
            if (!validators.editSectionForm()) {
                return;
            }

            const formData = $(CONFIG.selectors.editForm).serialize();
            $.post(CONFIG.urls.updateSection, formData, function(res) {
                if (res.success) {
                    $(CONFIG.selectors.editModal).modal("hide");
                    table.ajax.reload(null, false);
                    utils.showAlert("Updated!", res.message, "success");
                } else {
                    handleEditSectionError(res);
                }
            }).fail(() => utils.handleError("Error updating section!"));
        }

        function handleEditSectionError(res) {
            if (res.field === "SectionName") {
                const $input = $(`[name=${res.field}]`);
                $input.addClass("is-invalid");
                $("#EditSectionNameError").html(res.message);

                $input.focus();
                $('html, body').animate({ scrollTop: $input.offset().top - 100 }, 300);

                $input.on("input", function() {
                    $(this).removeClass("is-invalid");
                    $("#EditSectionNameError").html("");
                });
            } else {
                utils.handleError(res.message);
            }
        }

        function viewSection(id) {
            $.get(CONFIG.urls.getSectionById, { id }, function(res) {
                if (res.success) {
                    $("#ViewSectionCode").val(res.data.SectionCode);
                    $("#ViewSectionName").val(res.data.SectionName);
                    $("#ViewDescription").val(res.data.Description);
                    $("#ViewWarehouseName").val(res.data.WarehouseName);
                    $(CONFIG.selectors.viewModal).modal("show");
                } else {
                    utils.handleError(res.message);
                }
            }).fail(() => utils.handleError("Error loading section details."));
        }

        function deleteSection(sectionId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#0d6efd',
                cancelButtonColor: '#dc3545',
                confirmButtonText: 'Yes',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: CONFIG.urls.deleteSection,
                        type: "POST",
                        data: { sectionId },
                        success: function(res) {
                            if (res.success) {
                                table.ajax.reload();
                                utils.showAlert("Deleted!", res.message, "success");
                            } else {
                                utils.handleError(res.message);
                            }
                        },
                        error: function() {
                            utils.handleError("Error deleting section");
                        }
                    });
                }
            });
        }

        // ================= INITIALIZATION =================
        function initialize() {
            initializeDataTable();
            setupEventHandlers();
            setTimeout(utils.initTooltips, 500);
        }

        // Start the application
        initialize();
    });
</script>