<style>
    .circular-glass-btn {
        width: 43px;
        height: 38px;
        border-radius: 5px;
        background: rgba(59, 217, 56);
        backdrop-filter: blur(4px);
        border: 1px solid rgba(0, 100, 0, 0.8);
        color: #fff;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        font-size: 1.1rem;
        padding: 0;
    }

        .circular-glass-btn:hover {
            background: rgba(0, 180, 0, 0.8);
            color: #ffffff;
        }

    #nonMovingStockTable thead th {
        text-align: center;
        vertical-align: middle;
    }

    #nonMovingStockTable td {
        text-align: center;
        vertical-align: middle;
    }

    div.dt-buttons {
        margin-top: 3px;
        margin-bottom: 5px;
    }

    /* Buffer on export icon proccess remove */
    button.dt-button.processing,
    div.dt-button.processing {
        pointer-events: auto !important;
        opacity: 1 !important;
        background: none !important;
    }

        button.dt-button.processing:after {
            content: none !important;
        }
</style>


<div class="container mt-4 card shadow-sm">
    <h3 class="text-primary text-center fw-bolder mt-3">Non-Moving Stock Check</h3>
    <table id="nonMovingStockTable" class="table table-bordered table-striped wrap">
        <thead class="table-dark text-center">
            <tr>
                <th><input type="checkbox" id="selectAllNonMoving"></th>
                <th>Sr.No</th>
                <th>Item Code</th>
                <th>Item Name</th>
                <th>Quantity</th>
                <th>Added Date</th>
                <th>Expiry Date</th>
                <th>Bin Name</th>
                <th>Action</th>
            </tr>
        </thead>
    </table>

</div>


<!-- Transfer Modal (Vertical Inputs) -->
<div class="modal fade" id="transferModal" tabindex="-1" aria-labelledby="transferModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <!-- Modal Header -->
            <div class="modal-header bg-primary justify-content-center position-relative" style="padding-top: 0.7rem; padding-bottom: 0.7rem;">
                <h4 class="modal-title text-white text-center" id="transferModalLabel">Transfer Dead Stock</h4>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-2" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <!-- Modal Body -->
            <div class="modal-body">
                <!-- Bin Selection -->
                <div class="mb-3">
                    <label class="form-label fw-bold fs-5">Select Bin:</label>
                    <select id="binSelect" class="form-select"></select>
                </div>


                <!-- Transfer Quantity -->
                <div class="mb-3">
                    <label for="transferQtyInput" class="form-label fw-bold fs-5">
                        Transfer Quantity: <span class="text-danger">*</span>
                    </label>
                    <input type="number" id="transferQtyInput" class="form-control" min="1">
                    <div class="invalid-feedback"></div>
                </div>
            </div>

                <!-- Modal Footer -->
                <div class="modal-footer">
                    <button type="button" id="transferCancelBtn" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="transferConfirmBtn" class="btn btn-success">Transfer</button>
                </div>
            </div>
    </div>
</div>




<script>
// --- Toastr Global Options ---
toastr.options = {
    closeButton: true,
    progressBar: true,
    preventDuplicates: true,
    newestOnTop: true,
    positionClass: "toast-top-right",
    timeOut: "3000" // 3 seconds
};

// --- Globals ---
    // Create a Set to store selected ItemCodes
    let selectedNonMovingIds = new Set();

// --- Initialize DataTable ---
var nonMovingTable = $('#nonMovingStockTable').DataTable({
    ajax: {
        url: '@Url.Action("NonMovingStockJsonLM","Inventory")',
        type: "GET",
        datatype: "json"
    },
    columns: [
        {
            data: null,
            orderable: false,
            className: "text-center",
            render: function (data, type, row, meta) {
                return `<input type="checkbox" class="row-checkbox-nonmoving" data-id="${row.ItemCode}">`;
            }
        },
        {
            data: null,
            orderable: false,
            className: "text-center",
            render: function (data, type, row, meta) {
                return meta.row + 1;
            }
        },
        { data: "ItemCode", orderable: false, className: "text-center" },
        { data: "ItemName", orderable: false, className: "text-center" },
        { data: "CurrentQty", orderable: false, className: "text-center" },
        {
            data: "AddedDate", render: function (data, type, row) {
                if (!data) return "";
                return data.replace(/-/g, "/");
            },orderable: false, className: "text-center"  },
        {
            data: "ExpiryDate", render: function (data, type, row) {
                if (!data) return "";
                return data.replace(/-/g, "/");
            }, orderable: false,  className: "text-center"  },

        {
            data: null,
            orderable: false,
            className: "text-center",
            render: function (data, type, row) {
                // Directly show BinList from DB (BinName + Qty)
                // and keep BinCodeList in data attribute
                return `<span data-bincode="${row.BinCode}">${row.BinName}</span>`;
            }
        },
        {
            data: null,
            orderable: false,
            className: "text-center",
            render: function (data, type, row) {
                return `
                <button class="btn btn-sm transfer-btn circular-glass-btn bg-danger" data-id="${row.ItemCode}">
                    <i class="bi bi-box-arrow-in-right"
                       title="Transfer Dead Stock"
                       data-bs-toggle="tooltip"
                       data-bs-placement="top"></i>
                </button>`;
            }
        }
    ],

    dom: '<"d-flex justify-content-between align-items-center mb-2"Bf>rt<"d-flex justify-content-between align-items-center mt-2"ip>',
    buttons: [
        // --- PRINT ---
        {
            extend: 'print',
            text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
            title: '',
            exportOptions: {
                columns: ':visible:not(:first-child):not(:last-child)',
                rows: function (idx, data, node) {
                    return selectedNonMovingIds.has(data.ItemCode);
                },
                format: {
                    body: function (data, row, column, node) {
                        // ✅ Handle serial number manually in print order
                        if (column === 1) return ++serialCounter;
                        if (column === 7) return nonMovingTable.row(row).data().BinName;
                        return data;
                    }
                }
            },
            action: function (e, dt, button, config) {
                if (selectedNonMovingIds.size === 0) {
                    toastr.warning("Please select at least one item before printing.");
                    return;
                }

                // ✅ Reset serial counter before printing
                serialCounter = 0;
                $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
            },
            customize: function (win) {
                var $body = $(win.document.body);

                // ✅ Add print styles (same as Confirm/Current Stock)
                $body.append(`
<style>
    thead th {
        background-color: black !important;
        color: white !important;
        text-align: center !important;
        vertical-align: middle !important;
        -webkit-print-color-adjust: exact !important;
        print-color-adjust: exact !important;
        font-weight: bold !important;
        padding: 8px !important;
    }
    table {
        border-collapse: collapse !important;
        width: 100% !important;
        margin: 0 auto !important;
    }
    td, th {
        border: 1px solid #000 !important;
        padding: 6px !important;
        text-align: center !important;
        vertical-align: middle !important;
    }
    tbody td {
        text-align: center !important;
        vertical-align: middle !important;
    }
    h3, p {
        text-align: center !important;
    }
</style>
        `);

                // ✅ Add header & metadata
                $body.prepend(`
            <h3>Non-Moving Stock Report</h3>
            <p>Generated Date:${moment().format("DD/MM/YYYY")}</p>
        `);

                // ✅ Apply font & layout styling
                $body.css({
                    'font-size': '12pt',
                    'font-family': 'Arial, sans-serif'
                });

                // ✅ Fix serial numbers for printed rows
                const $table = $body.find('table');
                $table.find('tbody tr').each(function (index) {
                    $(this).find('td:first').text(index + 1);
                });
            }
        },


        // --- PDF ---
        {
            extend: 'pdfHtml5',
            text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
            title: `Non-Moving Stock`,
            exportOptions: {
                columns: ':visible:not(:first-child):not(:last-child)',
                rows: function (idx, data, node) {
                    return selectedNonMovingIds.has(data.ItemCode);
                },
                format: {
                    body: function (data, row, column, node) {
                        if (column === 7) return nonMovingTable.row(row).data().BinName;
                        if (column === 1) {
                            return nonMovingTable.rows({ filter: 'applied' }).indexes()
                                .filter(i => selectedNonMovingIds.has(nonMovingTable.row(i).data().ItemCode))
                                .indexOf(row) + 1;
                        }
                        return data;
                    }
                }
            },
            action: function (e, dt, button, config) {
                if (selectedNonMovingIds.size === 0) {
                    toastr.warning("Please select at least one item before exporting.");
                    return;
                }
                $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
            },
            customize: function (doc) {
                // --- Table header style ---
                doc.styles.tableHeader.fillColor = 'black';
                doc.styles.tableHeader.color = 'white';
                doc.styles.tableHeader.alignment = 'center';
                doc.styles.tableHeader.bold = true;

                // --- Table layout (borders, padding) ---
                var objLayout = {};
                objLayout['hLineWidth'] = function (i) { return 0.5; };
                objLayout['vLineWidth'] = function (i) { return 0.5; };
                objLayout['hLineColor'] = function (i) { return '#000000'; };
                objLayout['vLineColor'] = function (i) { return '#000000'; };
                objLayout['paddingLeft'] = function (i) { return 5; };
                objLayout['paddingRight'] = function (i) { return 5; };
                doc.content[1].layout = objLayout;

                // ✅ Add "Generated Date" just below the title
                var generatedDate = moment().format("YYYY-MM-DD");
                doc.content.splice(1, 0, {
                    text: `Generated Date: ${moment().format("DD/MM/YYYY")}`,
                    alignment: 'center',
                    margin: [0, 0, 0, 10],
                    fontSize: 10,
                    italics: true
                });

                // ✅ Center align the table in PDF
                // make all columns auto-width to help centering
                doc.content[2].table.widths = Array(
                    doc.content[2].table.body[0].length
                ).fill('*');

                // align table center
                doc.content[2].alignment = 'center';

                // add little margin from top
                doc.content[2].margin = [0, 10, 0, 0];
            }
        },

        // --- Excel ---
        {
            extend: 'excelHtml5',
            text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
            title: 'Non-Moving Stock',
            messageTop: `Generated Date: ${moment().format("DD/MM/YYYY")}`,
            exportOptions: {
                columns: [1, 2, 3, 4, 5, 6, 7], // Exclude checkbox & action button columns
                rows: function (idx, data, node) {
                    // Export only selected rows
                    return selectedNonMovingIds.has(data.ItemCode);
                },
                format: {
                    body: function (data, row, column, node) {
                        // Remove HTML (like span or buttons) from cells
                        if (typeof data === 'string') data = data.replace(/<[^>]*>/g, '').trim();
                        return data;
                    }
                }
            },
            customize: function (xlsx) {
                const sheet = xlsx.xl.worksheets['sheet1.xml'];

                // Center & bold title row (row 1)
                $('row[r="1"] c', sheet).attr('s', '51');

                // Center & bold generated date row (row 2)
                $('row[r="2"] c', sheet).attr('s', '51');

                // Insert Sr. No column at the start and recalc serial for exported rows
                let serial = 1;
                $('row', sheet).each(function () {
                    const rowIndex = parseInt($(this).attr('r'));
                    if (rowIndex === 3) {
                        // Header row: add Sr. No
                        $(this).find('c:first').before(`<c t="inlineStr" s="2"><is><t>Sr. No</t></is></c>`);
                    } else if (rowIndex > 3) {
                        // Data rows: add serial starting from 1
                        $(this).find('c:first').before(`<c t="inlineStr" s="2"><is><t>${serial}</t></is></c>`);
                        serial++;
                    }
                });
            },
            action: function (e, dt, button, config) {
                if (!selectedNonMovingIds || selectedNonMovingIds.size === 0) {
                    toastr.warning("Please select at least one item before exporting.");
                    return;
                }
                $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
            }
        },

        // --- CSV ---
        {
            extend: 'csvHtml5',
            text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
            title: `Non-Moving Stock - ${moment().format("DD/MM/YYYY")}`,
            exportOptions: {
                columns: ':visible:not(:first-child):not(:last-child)',
                rows: function (idx, data, node) {
                    return selectedNonMovingIds.has(data.ItemCode);
                },
                format: {
                    body: function (data, row, column, node) {
                        if (column === 7) return nonMovingTable.row(row).data().BinName;
                        if (column === 1) {
                            return nonMovingTable.rows({ filter: 'applied' }).indexes()
                                .filter(i => selectedNonMovingIds.has(nonMovingTable.row(i).data().ItemCode))
                                .indexOf(row) + 1;
                        }
                        return data;
                    }
                }
            },
            action: function (e, dt, button, config) {
                if (selectedNonMovingIds.size === 0) {
                    toastr.warning("Please select at least one item before exporting CSV.");
                    return;
                }
                $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
            }
        }
    ]
});

    // --- Row checkbox logic ---
    $('#nonMovingStockTable tbody').on('change', '.row-checkbox-nonmoving', function () {
        const id = $(this).data('id');
        if ($(this).is(':checked')) selectedNonMovingIds.add(id);
        else selectedNonMovingIds.delete(id);

        const allChecked = $('.row-checkbox-nonmoving').length === $('.row-checkbox-nonmoving:checked').length;
        $('#selectAllNonMoving').prop('checked', allChecked);
    });

    // --- Select All checkbox logic ---
    $('#selectAllNonMoving').on('change', function () {
        const isChecked = $(this).is(':checked');
        $('.row-checkbox-nonmoving').prop('checked', isChecked).trigger('change');
    });


    // ✅ Add Date Range Picker
    $("#nonMovingStockTable_wrapper").prepend(`
    <div class="input-group mb-2 mt-3" style="max-width: 300px;">
        <span class="input-group-text bg-primary text-white">
            <i class="bi bi-calendar-date"></i>
        </span>
        <input type="text" id="nonMovingDateRange" class="form-control" placeholder="Select date range" readonly />
    </div>
`);

    // Initialize Date Range Picker
    $('#nonMovingDateRange').daterangepicker({
        autoUpdateInput: false,
        locale: {
            cancelLabel: 'Clear',
            format: 'DD/MM/YYYY',
            applyLabel: 'Apply',
            customRangeLabel: 'Custom Range'
        },
        ranges: {
            'Today': [moment(), moment()],
            'Last 7 Days': [moment().subtract(6, 'days'), moment()],
            'Last 1 Month': [moment().subtract(1, 'month'), moment()],
            'Last 3 Months': [moment().subtract(3, 'months'), moment()],
            'Last 1 Year': [moment().subtract(1, 'year'), moment()],
        }

    });

    // Custom filter for DataTable
    $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
        if (settings.nTable.id !== "nonMovingStockTable") return true;

        var dateRange = $('#nonMovingDateRange').val();
        if (!dateRange || dateRange === 'Select Date Range') return true;

        try {
            var dates = dateRange.split(' - ');
            var min = moment(dates[0], 'DD/MM/YYYY');
            var max = moment(dates[1], 'DD/MM/YYYY');

            // Get both date columns (Adjust index if your columns are different)
            var addedDateStr = data[5];   // AddedDate column index
            var expiryDateStr = data[6];  // ExpiryDate column index

            var isInRange = false;

            [addedDateStr, expiryDateStr].forEach(function (dStr) {
                if (!dStr) return;
                var d = moment(dStr, ['DD/MM/YYYY', 'DD/MM/YYYY']);
                if (d.isValid() && d.isBetween(min, max, 'day', '[]')) {
                    isInRange = true;
                }
            });

            return isInRange;
        } catch (e) {
            console.error('Date filter error:', e);
            return true;
        }
    });

    // Event handlers
    $('#nonMovingDateRange').on('apply.daterangepicker', function (ev, picker) {
        $(this).val(picker.startDate.format('DD/MM/YYYY') + ' - ' + picker.endDate.format('DD/MM/YYYY'));
        if (typeof nonMovingTable !== 'undefined') nonMovingTable.draw();
    });

    $('#nonMovingDateRange').on('cancel.daterangepicker', function () {
        $(this).val('Select Date Range');
        if (typeof nonMovingTable !== 'undefined') nonMovingTable.draw();
    });

    // Set initial placeholder
    $('#nonMovingDateRange')
        .val('Select Date Range')
        .css({
            'color': '#6c757d'
        });

    $('#nonMovingStockTable').on('click', '.transfer-btn', function () {
        var row = $(this).closest('tr');
        var itemCode = $(this).data('id');

        var binSpan = row.find('td:eq(7) span');
        var binList = binSpan.text();
        var binCodes = binSpan.data('bincode');

        if (!binList || !binCodes) {
            toastr.error("No bin found for this item.", "Error");
            return;
        }

        var binEntries = binList.split(',').map(x => x.trim());
        var binCodeArray = binCodes.split(',').map(x => x.trim());

        var bins = [];
        for (var i = 0; i < binEntries.length; i++) {
            var match = binEntries[i].match(/^(.*)\s*\((\d+)\)$/);
            if (match) {
                bins.push({
                    name: match[1].trim(),
                    qty: parseInt(match[2]),
                    code: binCodeArray[i]
                });
            }
        }

        var $binSelect = $('#binSelect');
        $binSelect.empty();
        bins.forEach(bin => {
            $binSelect.append(`
            <option value="${bin.code}" data-qty="${bin.qty}">
                ${bin.name} (Available: ${bin.qty})
            </option>
        `);
        });

        var $qtyInput = $('#transferQtyInput');
        $qtyInput.val('').removeClass('is-invalid');

        // Add invalid-feedback div if not present
        if ($qtyInput.next('.invalid-feedback').length === 0) {
            $qtyInput.after('<div class="invalid-feedback"></div>');
        }
        $qtyInput.next('.invalid-feedback').text(''); // clear previous errors

        var transferModal = new bootstrap.Modal(document.getElementById('transferModal'));
        transferModal.show();

        // **Live validation as user types**
        $qtyInput.off('input').on('input', function () {
            var selectedBinCode = $binSelect.val();
            var qty = parseInt($qtyInput.val());
            var selectedBin = bins.find(b => b.code === selectedBinCode);

            $qtyInput.removeClass('is-invalid');
            $qtyInput.next('.invalid-feedback').text('');

            if (!qty || qty <= 0) {
                $qtyInput.addClass('is-invalid');
                $qtyInput.next('.invalid-feedback').text('Please enter a valid quantity.');
                return;
            }

            if (qty > selectedBin.qty) {
                $qtyInput.addClass('is-invalid');
                $qtyInput.next('.invalid-feedback').text(`Only ${selectedBin.qty} items available in ${selectedBin.name}.`);
                return;
            }
        });

        // Confirm transfer button
        $('#transferConfirmBtn').off('click').on('click', function () {
            var selectedBinCode = $binSelect.val();
            var qty = parseInt($qtyInput.val());
            var selectedBin = bins.find(b => b.code === selectedBinCode);

            // Final validation before transfer
            $qtyInput.removeClass('is-invalid');
            $qtyInput.next('.invalid-feedback').text('');

            if (!qty || qty <= 0 || qty > selectedBin.qty) {
                $qtyInput.addClass('is-invalid');
                $qtyInput.next('.invalid-feedback').text('Please enter a valid quantity.');
                return;
            }

            // Proceed with transfer logic here...
            console.log('Transfer', qty, 'items from bin', selectedBin.name);
            transferModal.hide();
       

        // ✅ SweetAlert confirmation before AJAX
            Swal.fire({
                title: 'Are you sure?',
                text: 'Do you want to transfer this item to Scratch stock?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Yes, Transfer',
                cancelButtonText: 'Cancel',
                customClass: {
                    confirmButton: 'btn btn-success me-2 p-3', // Bootstrap success + margin-end
                    cancelButton: 'btn btn-danger p-3'
                },
                buttonsStyling: false, // important to use Bootstrap classes
                reverseButtons: false

        }).then((result) => {
            if (result.isConfirmed) {
                // ✅ AJAX call to backend
                $.ajax({
                    url: '@Url.Action("TransferNonMovingToMovingByBinLM", "Inventory")',
                    type: 'POST',
                    data: {
                        itemCode: itemCode,
                        transferQty: qty,
                        binCode: selectedBinCode
                    },
                    dataType: 'json',
                    success: function (response) {
                        transferModal.hide(); // Hide modal

                        $('#transferQtyInput').val('').removeClass('is-invalid');
                        $binSelect.val($binSelect.find('option:first').val());

                        if (response.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Item transferred successfully!',
                                showConfirmButton: false,
                                timer: 1500
                            }).then(() => {
                                if ($.fn.DataTable.isDataTable('#nonMovingStockTable')) {
                                    $('#nonMovingStockTable').DataTable().ajax.reload(null, false);
                                }
                                if ($.fn.DataTable.isDataTable('#currentStockTable')) {
                                    $('#currentStockTable').DataTable().ajax.reload(null, false);
                                }
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: response.message || 'Transfer failed',
                                showConfirmButton: false,
                                timer: 1500
                            }).then(() => {
                                if ($.fn.DataTable.isDataTable('#nonMovingStockTable')) {
                                    $('#nonMovingStockTable').DataTable().ajax.reload(null, false);
                                }
                                if ($.fn.DataTable.isDataTable('#currentStockTable')) {
                                    $('#currentStockTable').DataTable().ajax.reload(null, false);
                                }
                            });
                        }
                    },
                    error: function () {
                        Swal.fire({
                            icon: 'error',
                            title: 'Something went wrong during transfer!',
                            showConfirmButton: false,
                            timer: 1500
                        });
                    }
                });
            }
        });
    });


    // Initialize Bootstrap tooltips
    $('body').tooltip({
        selector: '[title]', // Jo element ke paas title attribute hai unpe tooltip lagega
        trigger: 'hover',    // hover par tooltip dikhega
        placement: 'top'     // upar tooltip dikhe
    });


    $(document).ready(function () {
        // --- Initialize Bootstrap tooltips for static elements ---
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });

        // --- Re-initialize tooltips after every DataTable draw (dynamic rows) ---
        nonMovingTable.on('draw', function () {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    });

});
</script>











