<div class="d-flex justify-content-between align-items-center mb-3">
    <div class="flex-grow-1 text-center">
        <h4 class="mb-0 h3 text-primary">Row List</h4>
    </div>
    <button class="btn btn-success" id="btnAddrow">
        <i class="bi bi-plus-circle"></i> Add Row
    </button>
</div>

<style>
    button.dt-button.processing,
    div.dt-button.processing {
        pointer-events: auto !important;
        opacity: 1 !important;
        background: none !important;
    }

        button.dt-button.processing:after {
            content: none !important;
        }
    .text-red {
        color: red;
    }
</style>

<div class="table-responsive">
    <table id="rowTable" class="table table-bordered table-hover align-middle w-100">
        <thead class="table-dark text-center">
            <tr>
                <th><input type="checkbox" id="selectAll"></th>
                <th>Sr.No.</th>
                <th>Row ID</th>
                <th>Row Code</th>
                <th>Row Name</th>
                <th>Rack Name</th>
                <th>Section Name</th>
                <th>Warehouse Name</th>
                <th>Added Date</th>
                <th>Added By</th>
                <th>Description</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody class="text-center"></tbody>
    </table>
</div>

<!-- Add Row Modal -->
<div class="modal fade" id="addRowModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white position-relative py-2">
                <h5 class="modal-title h5 text-white text-center mb-1 w-100" id="addRowModalTitle" style="line-height: 1.2;">
                    Add Row
                </h5>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3"
                        data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addRowForm" class="row g-3">
                    <div class="col-md-6">
                        <label for="addRowCode">Row Code</label>
                        <div class="form-floating form-floating-outline">
                            <input type="text" class="form-control bg-gray" id="addRowCode" name="RowCode" required readonly>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <label for="addRowName">Row Name <span class="text-red">*</span></label>
                        <div class="form-floating form-floating-outline">
                            <input type="text" class="form-control" id="addRowName" name="RowName">
                        </div>
                        <span id="addRowNameError" class="text-danger"></span>
                    </div>

                    <div class="col-md-6">
                        <label for="addWarehouseDropdown">Warehouse <span class="text-red">*</span></label>
                        <div class="form-floating form-floating-outline">
                            <select class="form-select" id="addWarehouseDropdown" name="WarehouseId">
                                <option value="">-- Select Warehouse --</option>
                            </select>
                        </div>
                        <span id="addRowWhError" class="text-danger"></span>
                    </div>

                    <div class="col-md-6">
                        <label for="addSectionDropdown">Section <span class="text-red">*</span></label>
                        <div class="form-floating form-floating-outline">
                            <select class="form-select" id="addSectionDropdown" name="SectionId">
                                <option value="">-- Select Section --</option>
                            </select>
                        </div>
                        <span id="addRowSectionError" class="text-danger"></span>
                    </div>

                    <div class="col-md-6">
                        <label for="addRackDropdown">Rack <span class="text-red">*</span></label>
                        <div class="form-floating form-floating-outline">
                            <select class="form-select" id="addRackDropdown" name="RackId">
                                <option value="">-- Select Rack --</option>
                            </select>
                        </div>
                        <span id="addRowRackError" class="text-danger"></span>
                    </div>

                    <div class="col-12">
                        <label for="addDescriptionForRow">Description</label>
                        <div class="form-floating form-floating-outline">
                            <textarea class="form-control" id="addDescriptionForRow" name="Description" rows="3"></textarea>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="submit" form="addRowForm" class="btn btn-success px-4" id="saveRow">
                    <i class="bi bi-check-circle me-2 text-white"></i>Save
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Row Modal -->
<div class="modal fade" id="editRowModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white position-relative py-2">
                <h5 class="modal-title h5 text-white text-center mb-1 w-100" id="updateRowModalTitle" style="line-height: 1.2;">
                    Update Row
                </h5>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3"
                        data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editRowForm" class="row g-3">
                    <input type="hidden" id="editRowId" name="RowId" />

                    <div class="col-md-6">
                        <label for="editRowCode">Row Code</label>
                        <div class="form-floating form-floating-outline">
                            <input type="text" class="form-control bg-gray" id="editRowCode" name="RowCode" required readonly>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <label for="editRowName">Row Name <span class="text-red">*</span></label>
                        <div class="form-floating form-floating-outline">
                            <input type="text" class="form-control" id="editRowName" name="RowName" required>
                        </div>
                        <small class="text-danger" id="editRowNameError"></small>
                    </div>

                    <div class="col-md-6">
                        <label for="editWarehouseNameForRow">Warehouse</label>
                        <div class="form-floating form-floating-outline">
                            <input type="text" class="form-control bg-gray" id="editWarehouseNameForRow" readonly>
                            <input type="hidden" id="editWarehouseCode" name="WarehouseCode">
                        </div>
                    </div>

                    <div class="col-md-6">
                        <label for="editSectionNameForRow">Section</label>
                        <div class="form-floating form-floating-outline">
                            <input type="text" class="form-control bg-gray" id="editSectionNameForRow" readonly>
                            <input type="hidden" id="editSectionCode" name="SectionCode">
                        </div>
                    </div>

                    <div class="col-md-6">
                        <label for="editRackNameForRow">Rack</label>
                        <div class="form-floating form-floating-outline">
                            <input type="text" class="form-control bg-gray" id="editRackNameForRow" readonly>
                            <input type="hidden" id="editRackCode" name="RackCode">
                        </div>
                    </div>

                    <div class="col-12">
                        <label for="editRowDescription">Description</label>
                        <div class="form-floating form-floating-outline">
                            <textarea class="form-control" id="editRowDescription" name="Description" rows="3"></textarea>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="submit" form="editRowForm" class="btn btn-success px-4" id="updateRow">
                    <i class="bi bi-check-circle me-2 text-white"></i>Update
                </button>
            </div>
        </div>
    </div>
</div>

<!-- View Row Modal -->
<div class="modal fade" id="viewRowModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white position-relative py-2">
                <h5 class="modal-title h5 text-white text-center mb-1 w-100" id="rowDetailsModalTitle" style="line-height: 1.2;">
                    Row Details
                </h5>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3"
                        data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <form class="row g-3">
                    <div class="col-md-6">
                        <label for="vRowCode">Row Code</label>
                        <div class="form-floating form-floating-outline">
                            <input type="text" class="form-control" id="vRowCode" readonly>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <label for="vRowName">Row Name</label>
                        <div class="form-floating form-floating-outline">
                            <input type="text" class="form-control" id="vRowName" readonly>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <label for="vWarehouseName">Warehouse Name</label>
                        <div class="form-floating form-floating-outline">
                            <input type="text" class="form-control" id="vWarehouseName" readonly>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <label for="vSectionName">Section Name</label>
                        <div class="form-floating form-floating-outline">
                            <input type="text" class="form-control" id="vSectionName" readonly>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <label for="vRackName">Rack Name</label>
                        <div class="form-floating form-floating-outline">
                            <input type="text" class="form-control" id="vRackName" readonly>
                        </div>
                    </div>

                    <div class="col-12">
                        <label for="vDescription">Description</label>
                        <div class="form-floating form-floating-outline">
                            <textarea class="form-control" id="vDescription" rows="2" readonly></textarea>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <label for="vAddedDate">Added Date</label>
                        <div class="form-floating form-floating-outline">
                            <input type="text" class="form-control" id="vAddedDate" readonly>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <label for="vAddedBy">Added By</label>
                        <div class="form-floating form-floating-outline">
                            <input type="text" class="form-control" id="vAddedBy" readonly>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>


<script>
    $(document).ready(function () {
        // ================= CONFIGURATION & CONSTANTS =================
        const CONFIG = {
            urls: {
                getRows: '/Inventory/RowsSKK',
                getNextCode: '/Inventory/GetNextRowCodeSKK',
                saveRow: '/Inventory/SaveRowSBK',
                deleteRow: '/Inventory/DeleteRowSK',
                getRowById: '/Inventory/GetRowByIdSSK',
                getWarehouses: '/Inventory/GetWarehousesListSK',
                getSections: '/Inventory/GetSectionsSKK',
                getRacks: '/Inventory/GetRackss'
            },
            selectors: {
                table: '#rowTable',
                addForm: '#addRowForm',
                editForm: '#editRowForm',
                addModal: '#addRowModal',
                editModal: '#editRowModal',
                viewModal: '#viewRowModal'
            }
        };

        // ================= GLOBAL VARIABLES =================
        let selectedRowIds = new Set();
        let table;

        // ================= UTILITY FUNCTIONS =================
        const utils = {
            // Tooltip initialization
            initTooltips: function () {
                const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                tooltipTriggerList.map(function (tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl);
                });
            },

            // Date formatting
            formatDate: function (dateString) {
                if (!dateString) return "";
                let date;
                const match = /Date\((\d+)\)/.exec(dateString);
                if (match) {
                    date = new Date(parseInt(match[1], 10));
                } else {
                    date = new Date(dateString);
                }
                return !isNaN(date.getTime()) ?
                    date.toLocaleDateString("en-GB") : "";
            },

            // Validation helpers
            showFieldError: function (inputId, errorId, message) {
                $(`#${inputId}`).addClass("is-invalid");
                $(`#${errorId}`).text(message).removeClass("d-none");
            },

            clearFieldError: function (inputId, errorId) {
                $(`#${inputId}`).removeClass("is-invalid");
                $(`#${errorId}`).text("").addClass("d-none");
            },

            clearAllErrors: function (formSelector) {
                $(`${formSelector} .form-control, ${formSelector} .form-select`).removeClass("is-invalid");
                $(`${formSelector} .text-danger`).text("").addClass("d-none");
            },

            // SweetAlert wrapper
            showAlert: function (title, text, icon, timer = 2000) {
                return Swal.fire({ title, text, icon, timer, showConfirmButton: false });
            },

            // Error handler
            handleError: function (message) {
                Swal.fire({ title: "Error", text: message, icon: "error", timer: 2500 });
            }
        };

        // ================= VALIDATION FUNCTIONS =================
        const validators = {
            rowForm: function (formSelector) {
                let isValid = true;
                const $form = $(formSelector);

                const fields = {
                    addRowName: {
                        value: $form.find("#addRowName").val().trim(),
                        errorId: 'addRowNameError',
                        message: 'Row Name is required.'
                    },
                    addWarehouseDropdown: {
                        value: $form.find("#addWarehouseDropdown").val(),
                        errorId: 'addRowWhError',
                        message: 'Please select a Warehouse.'
                    },
                    addSectionDropdown: {
                        value: $form.find("#addSectionDropdown").val(),
                        errorId: 'addRowSectionError',
                        message: 'Please select a Section.'
                    },
                    addRackDropdown: {
                        value: $form.find("#addRackDropdown").val(),
                        errorId: 'addRowRackError',
                        message: 'Please select a Rack.'
                    }
                };

                Object.keys(fields).forEach(field => {
                    const config = fields[field];
                    if (!config.value) {
                        utils.showFieldError(field, config.errorId, config.message);
                        isValid = false;
                    }
                });

                return isValid;
            },

            editRowForm: function () {
                const nameValue = $('#editRowName').val().trim();
                if (!nameValue) {
                    $('#editRowName').addClass('is-invalid');
                    $('#editRowNameError').text('Row Name is required').removeClass('d-none');
                    return false;
                }
                return true;
            }
        };

        // ================= DATA TABLE INITIALIZATION =================
        function initializeDataTable() {
            table = $(CONFIG.selectors.table).DataTable({
                processing: true,
                serverSide: false,
                ajax: {
                    url: CONFIG.urls.getRows,
                    type: 'GET',
                    dataSrc: 'data'
                },
                dom: '<"d-flex justify-content-between align-items-center mt-1 mb-2"Bf>rt<"d-flex justify-content-between mt-2"<"datatable-info"i><"datatable-pagination"p>>',
                buttons: getTableButtons(),
                columns: getTableColumns(),
                columnDefs: [
                    { orderable: false, targets: "_all" },
                    { className: "text-center", targets: "_all" }
                ],
                drawCallback: function (settings) {
                    utils.initTooltips();
                }
            });

            addDateRangePicker();
        }

        function getTableColumns() {
            return [
                {
                    data: null,
                    render: function (data, type, row) {
                        return `<input type="checkbox" class="rowCheckbox" value="${row.RowId}" />`;
                    },
                    orderable: false
                },
                {
                    data: null,
                    render: function (data, type, row, meta) {
                        return meta.row + 1;
                    },
                    orderable: false
                },
                { data: "RowId", visible: false },
                { data: "RowCode" },
                { data: "RowName" },
                { data: "RackName" },
                { data: "SectionName" },
                { data: "WarehouseName" },
                {
                    data: "AddedDate",
                    render: function (data) {
                        return utils.formatDate(data);
                    }
                },
                { data: "AddedBy" },
                {
                    data: "Description",
                    render: function (data, type, row) {
                        if (!data) return "-";
                        const shortText = data.length > 30 ? data.substring(0, 30) + "..." : data;
                        return `<span data-bs-toggle="tooltip" data-bs-placement="top" title="${data.replace(/"/g, '&quot;')}">${shortText}</span>`;
                    }
                },
                {
                    data: null,
                    render: function (data, type, row) {
                        return `
                            <div class="d-flex justify-content-center gap-1">
                                <button class="btn btn-sm btn-primary viewRow" data-id="${row.RowId}" data-bs-toggle="tooltip" title="View Row Details">
                                    <i class="bi bi-eye-fill"></i>
                                </button>
                                <button class="btn btn-sm btn-secondary editRow" data-id="${row.RowId}" data-bs-toggle="tooltip" title="Edit Row">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                                <button class="btn btn-sm btn-danger deleteRow" data-id="${row.RowId}" data-bs-toggle="tooltip" title="Delete Row">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        `;
                    },
                    orderable: false
                }
            ];
        }

        function getTableButtons() {
            const baseConfig = {
                columns: ':visible:not(:first-child):not(:last-child)',
                rows: (idx, data) => selectedRowIds.has(data.RowId.toString()),
                action: function (e, dt, button, config) {
                    if (selectedRowIds.size === 0) {
                        toastr.warning("Please select at least one row before exporting.", "No Selection");
                        return;
                    }
                    $.fn.dataTable.ext.buttons[config.extend].action.call(this, e, dt, button, config);
                }
            };

            return [
                createPrintButton(baseConfig),
                createPdfButton(baseConfig),
                createExcelButton(baseConfig),
                createCsvButton(baseConfig)
            ];
        }

        function createPrintButton(baseConfig) {
            return {
                extend: 'print',
                text: '<i class="bi bi-printer-fill text-dark fs-5" data-bs-toggle="tooltip" title="Print"></i>',
                title: '',
                exportOptions: baseConfig,
                customize: function (win) {
                    let serialNumber = 1;
                    $(win.document.body).find('table tbody tr').each(function () {
                        $(this).find('td:first').text(serialNumber++);
                    });

                    $(win.document.body).prepend(
                        '<h2 style="text-align: center; margin-bottom: 10px;">Row List</h2>' +
                        '<p style="text-align: center; margin-bottom: 20px; color: #666;">Generated Date: ' + new Date().toLocaleDateString("en-GB") + '</p>' +
                        '<hr style="margin-bottom: 20px;">'
                    );

                    $(win.document.body).find('table')
                        .css('border', '1px solid black').css('border-collapse', 'collapse').css('width', '100%')
                        .find('th, td').css('border', '1px solid black').css('padding', '8px').css('text-align', 'center');

                    $(win.document.body).find('th')
                        .css('background-color', 'black').css('color', 'white').css('font-weight', 'bold');
                },
                action: function (e, dt, button, config) {
                    if (selectedRowIds.size === 0) {
                        toastr.warning("Please select at least one row before printing.", "No Selection");
                        return;
                    }
                    $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                }
            };
        }

        function createPdfButton(baseConfig) {
            return {
                extend: 'pdfHtml5',
                text: '<i class="bi bi-file-earmark-pdf text-danger fs-5" data-bs-toggle="tooltip" title="Export PDF"></i>',
                title: '',
                exportOptions: baseConfig,
                customize: function (doc) {
                    // Get selected data manually
                    let selectedRows = [];
                    table.rows().every(function (rowIdx, tableLoop, rowLoop) {
                        let rowData = this.data();
                        if (selectedRowIds.has(rowData.RowId.toString())) {
                            selectedRows.push(rowData);
                        }
                    });

                    doc.content = [];
                    doc.content.push(
                        { text: 'ROW LIST', style: 'header', alignment: 'center', margin: [0, 0, 0, 10] },
                        { text: 'Generated Date: ' + new Date().toLocaleDateString("en-GB"), style: 'subheader', alignment: 'center', margin: [0, 0, 0, 20] }
                    );

                    let tableData = [
                        [
                            { text: 'SR NO', style: 'tableHeader' },
                            { text: 'ROW CODE', style: 'tableHeader' },
                            { text: 'ROW NAME', style: 'tableHeader' },
                            { text: 'RACK NAME', style: 'tableHeader' },
                            { text: 'SECTION NAME', style: 'tableHeader' },
                            { text: 'WAREHOUSE NAME', style: 'tableHeader' },
                            { text: 'ADDED DATE', style: 'tableHeader' },
                            { text: 'ADDED BY', style: 'tableHeader' },
                            { text: 'DESCRIPTION', style: 'tableHeader' }
                        ]
                    ];

                    selectedRows.forEach((row, index) => {
                        tableData.push([
                            { text: (index + 1).toString(), style: 'tableBody' },
                            { text: row.RowCode || '', style: 'tableBody' },
                            { text: row.RowName || '', style: 'tableBody' },
                            { text: row.RackName || '', style: 'tableBody' },
                            { text: row.SectionName || '', style: 'tableBody' },
                            { text: row.WarehouseName || '', style: 'tableBody' },
                            { text: utils.formatDate(row.AddedDate) || '', style: 'tableBody' },
                            { text: row.AddedBy || '', style: 'tableBody' },
                            { text: row.Description || '', style: 'tableBody' }
                        ]);
                    });

                    doc.content.push({
                        table: {
                            widths: ['8%', '12%', '12%', '12%', '12%', '12%', '10%', '10%', '12%'],
                            body: tableData
                        },
                        layout: {
                            hLineWidth: (i, node) => 1,
                            vLineWidth: (i, node) => 1,
                            hLineColor: (i, node) => '#000000',
                            vLineColor: (i, node) => '#000000',
                            paddingTop: (i, node) => 5,
                            paddingBottom: (i, node) => 5
                        }
                    });

                    doc.styles = {
                        header: { fontSize: 18, bold: true, alignment: 'center' },
                        subheader: { fontSize: 10, color: '#666666', alignment: 'center' },
                        tableHeader: { bold: true, fontSize: 9, color: 'white', fillColor: '#000000', alignment: 'center' },
                        tableBody: { fontSize: 8, alignment: 'center' }
                    };

                    doc.defaultStyle = { fontSize: 8, alignment: 'center' };
                },
                action: function (e, dt, button, config) {
                    if (selectedRowIds.size === 0) {
                        toastr.warning("Please select at least one row before exporting.", "No Selection");
                        return;
                    }
                    $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                }
            };
        }

        function createExcelButton(baseConfig) {
            return {
                extend: 'excelHtml5',
                text: '<i class="bi bi-file-earmark-excel text-success fs-5" data-bs-toggle="tooltip" title="Export Excel"></i>',
                title: 'Row List',
                messageTop: `Generated Date: ${moment().format("DD/MM/YYYY")}`,
                exportOptions: baseConfig,
                customize: function (xlsx) {
                    const sheet = xlsx.xl.worksheets['sheet1.xml'];
                    let serial = 1;

                    $('row', sheet).each(function () {
                        const rowIndex = parseInt($(this).attr('r'));
                        if (rowIndex === 3) {
                            $(this).find('c:first').before('<c t="inlineStr" s="2"><is><t>Sr. No</t></is></c>');
                        } else if (rowIndex > 3) {
                            $(this).find('c:first').before(`<c t="inlineStr" s="2"><is><t>${serial}</t></is></c>`);
                            serial++;
                        }
                    });

                    $('row[r="1"] c, row[r="2"] c', sheet).attr('s', '51');
                },
                action: function (e, dt, button, config) {
                    if (selectedRowIds.size === 0) {
                        toastr.warning("Please select at least one row before exporting Excel.", "No Selection");
                        return;
                    }
                    $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                }
            };
        }

        function createCsvButton(baseConfig) {
            return {
                extend: 'csvHtml5',
                text: '<i class="bi bi-filetype-csv text-success fs-5" data-bs-toggle="tooltip" title="Export CSV"></i>',
                filename: 'Row List',
                title: 'Row List',
                message: 'Generated Date: ' + new Date().toLocaleDateString("en-GB"),
                exportOptions: {
                    columns: ':visible:not(:first-child):not(:nth-child(2)):not(:last-child)',
                    rows: function (idx, data, node) {
                        // Debug: Check what data is available
                        console.log('Row data:', data);
                        console.log('Selected Row IDs:', Array.from(selectedRowIds));

                        // Try different ways to get the ID
                        const rowId = data.RowId || data.rowId || data.id || data[2]; // index 2 is Row ID column

                        // Convert both to string for comparison
                        const rowIdStr = rowId ? rowId.toString() : '';
                        const isSelected = selectedRowIds.has(rowIdStr);

                        console.log('Checking rowId:', rowIdStr, 'Selected:', isSelected);
                        return isSelected;
                    }
                },
                customize: function (csv) {
                    console.log('Raw CSV:', csv);

                    if (!csv || csv.trim() === '') {
                        console.log('Empty CSV data - no selected rows?');
                        return '';
                    }

                    let lines = csv.split('\n');
                    let newCsv = '';
                    let serial = 1;

                    // Add header with "Sr No"
                    if (lines.length > 0 && lines[0].trim()) {
                        newCsv = '"Sr No",' + lines[0] + '\n';
                    }

                    // Add data rows with serial numbers
                    for (let i = 1; i < lines.length; i++) {
                        if (lines[i].trim()) {
                            newCsv += '"' + serial + '",' + lines[i] + '\n';
                            serial++;
                        }
                    }

                    console.log('Final CSV:', newCsv);
                    return newCsv;
                },
                action: function (e, dt, button, config) {
                    console.log('Selected Row IDs before export:', Array.from(selectedRowIds));

                    if (selectedRowIds.size === 0) {
                        toastr.warning("Please select at least one row before exporting CSV.", "No Selection");
                        return;
                    }
                    $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                }
            };
        }

        // ================= DATE RANGE PICKER =================
        function addDateRangePicker() {
            $("#rowTable_wrapper").prepend(`
                <div class="input-group mb-2 mt-3" style="max-width: 280px;">
                    <span class="input-group-text bg-primary text-white">
                        <i class="bi bi-calendar-date"></i>
                    </span>
                    <input type="text" id="rowDateRange" class="form-control" placeholder="Select date range" readonly />
                </div>
            `);

            $('#rowDateRange').daterangepicker({
                autoUpdateInput: false,
                locale: { cancelLabel: 'Clear', format: 'YYYY-MM-DD' },
                opens: 'left',
                ranges: {
                    'Today': [moment(), moment()],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
                    'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
                    'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]
                }
            });

            $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
                if (settings.nTable.id !== "rowTable") return true;
                const dateRange = $('#rowDateRange').val();
                if (!dateRange) return true;

                const [minStr, maxStr] = dateRange.split(' to ');
                const min = moment(minStr, 'DD/MM/YYYY');
                const max = moment(maxStr, 'DD/MM/YYYY');
                const date = moment(data[8], 'DD/MM/YYYY');

                return date.isValid() ? date.isBetween(min, max, 'day', '[]') : true;
            });

            $('#rowDateRange').on('apply.daterangepicker', function (ev, picker) {
                $(this).val(picker.startDate.format('DD/MM/YYYY') + ' to ' + picker.endDate.format('DD/MM/YYYY'));
                table.draw();
            });

            $('#rowDateRange').on('cancel.daterangepicker', function () {
                $(this).val('');
                table.draw();
            });
        }

        // ================= EVENT HANDLERS =================
        function setupEventHandlers() {
            // Add Row
            $("#btnAddrow").on("click", function () {
                $(CONFIG.selectors.addForm)[0].reset();
                utils.clearAllErrors(CONFIG.selectors.addForm);
                loadWarehouses();
                loadNextRowCode();
                $(CONFIG.selectors.addModal).modal("show");
            });

            // Form submissions
            $(CONFIG.selectors.addForm).on("submit", function (e) {
                e.preventDefault();
                submitAddRow();
            });

            $(CONFIG.selectors.editForm).on("submit", function (e) {
                e.preventDefault();
                submitEditRow();
            });

            // Action buttons
            $(CONFIG.selectors.table).on("click", ".viewRow", function () {
                viewRow($(this).data("id"));
            });

            $(CONFIG.selectors.table).on("click", ".editRow", function () {
                editRow($(this).data("id"));
            });

            $(CONFIG.selectors.table).on("click", ".deleteRow", function () {
                deleteRow($(this).data("id"));
            });

            // Live validation
            $(document).on("input change", "#addRowName, #addWarehouseDropdown, #addSectionDropdown, #addRackDropdown, #editRowName", function () {
                const id = $(this).attr("id");
                const errorMap = {
                    addRowName: "addRowNameError",
                    addWarehouseDropdown: "addRowWhError",
                    addSectionDropdown: "addRowSectionError",
                    addRackDropdown: "addRowRackError",
                    editRowName: "editRowNameError"
                };
                if (errorMap[id] && $(this).val()) {
                    utils.clearFieldError(id, errorMap[id]);
                }
            });

            // Location dropdowns
            $("#addWarehouseDropdown").change(function () {
                const warehouseCode = $(this).val();
                const $sectionDdl = $("#addSectionDropdown");
                $sectionDdl.empty().append('<option value="">-- Select Section --</option>');

                if (warehouseCode) {
                    $.get(CONFIG.urls.getSections, { warehouseCode }, function (data) {
                        data.forEach(item => {
                            $sectionDdl.append(`<option value="${item.SectionCode}">${item.SectionName}</option>`);
                        });
                    }).fail(() => utils.handleError("Error loading sections."));
                }
                $("#addRackDropdown").empty().append('<option value="">-- Select Rack --</option>');
            });

            $("#addSectionDropdown").change(function () {
                const sectionCode = $(this).val();
                const $rackDdl = $("#addRackDropdown");
                $rackDdl.empty().append('<option value="">-- Select Rack --</option>');

                if (sectionCode) {
                    $.get(CONFIG.urls.getRacks, { sectionCode }, function (data) {
                        data.forEach(item => {
                            $rackDdl.append(`<option value="${item.RackCodes}">${item.RackNames}</option>`);
                        });
                    }).fail(() => utils.handleError("Error loading racks."));
                }
            });

            // Checkbox selection
            $(document).on('change', '#selectAll', function () {
                const isChecked = $(this).prop('checked');
                $('#rowTable tbody .rowCheckbox').prop('checked', isChecked).trigger('change');
            });

            $(document).on('change', '#rowTable tbody .rowCheckbox', function () {
                const rowId = $(this).val();
                $(this).prop('checked') ? selectedRowIds.add(rowId) : selectedRowIds.delete(rowId);

                const total = $('#rowTable tbody .rowCheckbox').length;
                const checked = $('#rowTable tbody .rowCheckbox:checked').length;
                $('#selectAll').prop('checked', total > 0 && total === checked);
            });

            // Modal cleanup
            $(CONFIG.selectors.addModal).on("hidden.bs.modal", function () {
                $(CONFIG.selectors.addForm)[0].reset();
                utils.clearAllErrors(CONFIG.selectors.addForm);
            });

            $(CONFIG.selectors.editModal).on("hidden.bs.modal", function () {
                $(CONFIG.selectors.editForm)[0].reset();
                utils.clearAllErrors(CONFIG.selectors.editForm);
            });

            $('#rowTable').on('draw.dt', function () {
                $('#selectAll').prop('checked', false);
                selectedRowIds.clear();
                utils.initTooltips();
            });
        }

        // ================= DATA OPERATIONS =================
        function loadWarehouses() {
            $.get(CONFIG.urls.getWarehouses, function (data) {
                const $ddl = $("#addWarehouseDropdown");
                $ddl.empty().append('<option value="">-- Select Warehouse --</option>');
                data.forEach(item => {
                    $ddl.append(`<option value="${item.WarehouseCode}">${item.WarehouseName}</option>`);
                });
            }).fail(() => utils.handleError("Error loading warehouses."));
        }

        function loadNextRowCode() {
            $.get(CONFIG.urls.getNextCode, function (res) {
                if (res && res.RnextCode) {
                    $('#addRowCode').val(res.RnextCode);
                } else {
                    utils.handleError("Next row code not found");
                }
            });
        }

        // ================= CRUD OPERATIONS =================
        function submitAddRow() {
            utils.clearAllErrors(CONFIG.selectors.addForm);

            if (!validators.rowForm(CONFIG.selectors.addForm)) {
                return;
            }

            const formData = {
                RowId: 0,
                RowCode: $('#addRowCode').val(),
                RowName: $('#addRowName').val(),
                WarehouseCode: $('#addWarehouseDropdown').val(),
                SectionCode: $('#addSectionDropdown').val(),
                RackCode: $('#addRackDropdown').val(),
                Description: $('#addDescriptionForRow').val()
            };

            $.ajax({
                url: CONFIG.urls.saveRow,
                type: "POST",
                data: formData,
                success: function (res) {
                    if (res.success) {
                        $(CONFIG.selectors.addModal).modal("hide");
                        table.ajax.reload(null, false);
                        utils.showAlert("Success", "Row saved successfully!", "success");
                    } else {
                        handleRowError(res.message, "addRowName", "addRowNameError");
                    }
                },
                error: function () {
                    utils.handleError("Server error while saving row.");
                }
            });
        }

        function handleRowError(message, inputId, errorId) {
            if (message && message.toLowerCase().includes("already exists")) {
                utils.showFieldError(inputId, errorId, message);
            } else {
                utils.handleError(message || "Something went wrong");
            }
        }

        function editRow(id) {
            $.get(CONFIG.urls.getRowById, { rowId: id }, function (res) {
                if (res) {
                    $("#editRowId").val(res.RowId || '');
                    $("#editRowCode").val(res.RowCode || '');
                    $("#editRowName").val(res.RowName || '');
                    $("#editRowDescription").val(res.Description || '');
                    $("#editWarehouseNameForRow").val(res.WarehouseName || '');
                    $("#editWarehouseCode").val(res.WarehouseCode || '');
                    $("#editSectionNameForRow").val(res.SectionName || '');
                    $("#editSectionCode").val(res.SectionCode || '');
                    $("#editRackNameForRow").val(res.RackName || '');
                    $("#editRackCode").val(res.RackCode || '');
                    $(CONFIG.selectors.editModal).modal("show");
                } else {
                    utils.handleError("Row data not found");
                }
            }).fail(() => utils.handleError("Server error while fetching row data."));
        }

        function submitEditRow() {
            if (!validators.editRowForm()) {
                return;
            }

            const formData = {
                RowId: $('#editRowId').val(),
                RowCode: $('#editRowCode').val(),
                RowName: $('#editRowName').val(),
                WarehouseCode: $('#editWarehouseCode').val(),
                SectionCode: $('#editSectionCode').val(),
                RackCode: $('#editRackCode').val(),
                Description: $('#editRowDescription').val() || ""
            };

            $.ajax({
                url: CONFIG.urls.saveRow,
                type: "POST",
                data: formData,
                success: function (res) {
                    if (res.success) {
                        $(CONFIG.selectors.editModal).modal("hide");
                        table.ajax.reload(null, false);
                        utils.showAlert("Success", "Row updated successfully!", "success");
                    } else {
                        handleRowError(res.message, "editRowName", "editRowNameError");
                    }
                },
                error: function () {
                    utils.handleError("Server error while updating row.");
                }
            });
        }

        function viewRow(id) {
            $.get(CONFIG.urls.getRowById, { rowId: id }, function (res) {
                if (res) {
                    $("#vRowCode").val(res.RowCode || '');
                    $("#vRowName").val(res.RowName || '');
                    $("#vRackName").val(res.RackName || '');
                    $("#vSectionName").val(res.SectionName || '');
                    $("#vWarehouseName").val(res.WarehouseName || '');
                    $("#vDescription").val(res.Description || "-");
                    $("#vAddedBy").val(res.AddedBy || '');
                    $("#vAddedDate").val(utils.formatDate(res.AddedDate) || "N/A");
                    $(CONFIG.selectors.viewModal).modal("show");
                } else {
                    utils.handleError("Row details not found");
                }
            }).fail(() => utils.handleError("Server error while fetching row details."));
        }

        function deleteRow(id) {
            Swal.fire({
                title: "Are you sure?",
                text: "This Row will be permanently deleted!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: '#66b2ff',
                cancelButtonColor: '#dc3545',
                confirmButtonText: "Yes"
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: CONFIG.urls.deleteRow,
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify({ rowId: id }),
                        success: function (res) {
                            if (res.success) {
                                table.ajax.reload();
                                utils.showAlert("Deleted!", res.message, "success");
                            } else {
                                utils.handleError(res.message);
                            }
                        },
                        error: function () {
                            utils.handleError("Something went wrong while deleting Row.");
                        }
                    });
                }
            });
        }

        // ================= INITIALIZATION =================
        function initialize() {
            initializeDataTable();
            setupEventHandlers();
            utils.initTooltips();
        }

        // Start the application
        initialize();
    });
</script>