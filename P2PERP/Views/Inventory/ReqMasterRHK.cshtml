<style>
    #reqTable th,
    #reqTable td {
        text-align: center;
        vertical-align: middle;
    }

    #reqTable1 th,
    #reqTable1 td {
        text-align: center;
        vertical-align: middle;
    }

    button.dt-button.processing,
    div.dt-button.processing {
        pointer-events: auto !important;
        opacity: 1 !important;
        background: none !important;
    }

        button.dt-button.processing:after {
            content: none !important;
        }

    /* Tooltip styling for better appearance */
    .tooltip-inner {
        max-width: 400px;
        text-align: left;
        white-space: pre-wrap;
    }

    /* Description cell styling */
    .description-cell {
        max-width: 150px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        cursor: help;
    }
</style>

<div class="container-fluid py-4 main-content">
    <div class="card mt-3">
        <div class="card-body">
            <div class="text-center mb-3">
                <h3 class="text-primary fw-bold">Requirement Master</h3>
            </div>

            <div class="table-responsive">
                <!-- 🔹 Header Row inside Card -->
                <div class="d-flex justify-content-between align-items-center mb-4 flex-wrap">
                    <div class="input-group" style="height: 40px; max-width: 280px;">
                        <span class="input-group-text bg-primary text-white" style="height: 100%;">
                            <i class="bi bi-calendar-date"></i>
                        </span>
                        <input type="text" id="reportrange" class="form-control" placeholder="Select date range" readonly style="height: 100%;" />
                    </div>
                    <!-- Right: Date Range Picker + Export -->
                    <div class="d-flex align-items-center gap-3 ms-auto">
                        <!-- Export Buttons -->
                        <div id="exportContainer" class="d-flex" style="height: 40px; align-items: center;">
                            <!-- DataTable export buttons will be injected here -->
                        </div>
                    </div>
                </div>

                <table id="reqTable" class="table table-striped table-bordered">
                    <thead class="table-dark">
                        <tr>
                            <th><input type="checkbox" id="selectAll"></th>
                            <th>Sr. No.</th>
                            <th>Item Code</th>
                            <th>Item Name</th>
                            <th>Description</th>
                            <th>Required Quantity</th>
                            <th>Required Date</th>
                            <th>Request Type</th>
                            <th>Added Date</th>
                            <th>Added By</th>
                        </tr>
                    </thead>
                    <tbody id="tblRecent"></tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- 🔹 Modal for Viewing -->
    <div class="modal fade" id="viewPlanModal" data-bs-backdrop="true" tabindex="-1" aria-labelledby="viewPlanModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white position-relative">
                    <div class="w-100 text-center">
                        <h5 class="modal-title text-white fw-bold mb-0" id="viewPlanModalLabel">Requirement Details</h5>
                    </div>
                    <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="viewPlanContent">
                    <!-- Modal content area - dynamically loaded with partial views -->
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let tableStartDate = null; // Start date for table filtering
    let tableEndDate = null;   // End date for table filtering
    let dataTable; // Declare dataTable variable globally
    let originalData = []; // Store original data for exports

    $(document).ready(function () {
        // Load data and initialize table
        loadTableData();

        // ✅ Configure toastr once
        toastr.options = {
            closeButton: true,
            progressBar: true,
            newestOnTop: true,
            positionClass: "toast-top-right",
            preventDuplicates: true,
            timeOut: 3000,
            extendedTimeOut: 1000,
            showDuration: 300,
            hideDuration: 300,
            showMethod: "slideDown",
            hideMethod: "fadeOut"
        };
    });

    function loadTableData() {
        $.ajax({
            url: "/Inventory/ViewReqMasterListRHK",
            type: "GET",
            success: function (response) {
                console.log(response);

                // Store original data for exports
                originalData = response?.data || [];

                // Destroy existing DataTable if already initialized
                if ($.fn.DataTable.isDataTable("#reqTable")) {
                    $('#reqTable').DataTable().clear().destroy();
                }

                // Populate table rows
                $('#tblRecent').empty();

                if (response?.data?.length > 0) {
                    let i = 1;
                    response.data.forEach(item => {
                        // Truncate description for display
                        const shortDescription = truncateDescription(item.Description || 'N/A', 40);

                        $('#tblRecent').append(`
<tr>
    <td><input type="checkbox" class="row-select" value="${item.ItemCode}"></td>
    <td>${i++}</td>
    <td>${item.ItemCode || 'N/A'}</td>
    <td>${item.ItemName || 'N/A'}</td>
    <td>
        <span class="description-cell"
              data-bs-toggle="tooltip"
              data-bs-placement="top"
              data-bs-html="true"
              title="${escapeHtml(item.Description || 'No description available')}">
            ${shortDescription}
        </span>
    </td>
    <td>${item.RequiredQuantity || '0'}</td>
    <td>${moment(item.RequiredDate).format('DD/MM/YYYY')}</td>
    <td>${item.RequestType || 'N/A'}</td>
    <td>${moment(item.AddedDate).format('DD/MM/YYYY')}</td>
    <td>${item.AddedBy || 'N/A'}</td>
</tr>
`);
                    });

                    // Initialize tooltips
                    initializeTooltips();
                } else {
                    $('#tblRecent').html(`<tr><td colspan="10" class="text-center text-muted">No requirements found</td></tr>`);
                }

                // Initialize DataTable
                initDataTable();

                // Initialize date range picker after table is created
                initDateRangePicker();
            },
            error: function (xhr, status, error) {
                console.error("Error loading table data:", error);
                $('#tblRecent').html(`<tr><td colspan="10" class="text-center text-danger">Error loading data</td></tr>`);
            }
        });
    }

    // Helper function to truncate description for display
    function truncateDescription(text, maxLength) {
        if (!text || text === 'N/A') return 'N/A';

        if (text.length <= maxLength) return text;

        return text.substring(0, maxLength) + '...';
    }

    // Helper function to escape HTML for tooltip
    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    // Initialize Bootstrap tooltips
    function initializeTooltips() {
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl, {
                trigger: 'hover'
            });
        });
    }

    function initDataTable() {
        dataTable = $('#reqTable').DataTable({
            pageLength: 10,
            paging: true,
            ordering: false,
            searching: true,
            dom: '<"d-flex justify-content-between align-items-center mt-1 mb-2"Bf>rt<"d-flex justify-content-between mt-2"<"datatable-info"i><"datatable-pagination"p>>',
            buttons: [
                // 🔹 Print
                {
                    extend: 'print',
                    text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                    className: 'btn btn-sm btn-outline-dark',
                    title: 'Requirement Master',
                    messageTop: function () {
                        return '<h3 style="text-align:center">Generated Date: ' +
                            new Date().toLocaleDateString('en-GB') + '</h3>';
                    },
                    action: function (e, dt, button, config) {
                        if ($('#reqTable tbody input.row-select:checked').length === 0) {
                            showExportToast();
                            return;
                        }
                        $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                    },
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('.row-select').prop('checked');
                        },
                        columns: ':visible:not(:first-child)',
                        format: {
                            body: function (data, row, column, node) {
                                // For description column (index 4), return full description
                                if (column === 4) {
                                    const itemCode = $(node).closest('tr').find('td:eq(2)').text();
                                    const originalItem = originalData.find(item => item.ItemCode === itemCode);
                                    return originalItem ? (originalItem.Description || 'N/A') : data;
                                }

                                if (column === 1) {
                                    return $('#reqTable tbody input.row-select:checked')
                                        .index($(node).closest('tr').find('.row-select')) + 1;
                                }

                                return typeof data === 'string'
                                    ? data.replace(/<[^>]*>/g, '').trim()
                                    : data;
                            }
                        }
                    },
                    customize: function (win) {
                        var $body = $(win.document.body);

                        $body.append(`
        <style>
            thead th {
                background-color: black !important;
                color: white !important;
                text-align: center !important;
                -webkit-print-color-adjust: exact !important;
                print-color-adjust: exact !important;
            }
            table {
                border-collapse: collapse !important;
                width: 100% !important;
            }
            td, th {
                border: 1px solid #000 !important;
                padding: 6px !important;
                 text-align: center !important;
            }
        </style>
`);

                        $body.find('h1').css('text-align', 'center');
                        $body.find('table')
                            .addClass('table table-bordered table-striped')
                            .css('width', '100%');

                        $body.css('font-size', '12pt');
                    }
                },
                // 🔹 PDF
                {
                    extend: 'pdfHtml5',
                    text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                    className: 'btn btn-sm btn-outline-danger',
                    title: "Requirement Master",
                    orientation: 'landscape',
                    pagesize: 'A4',
                    customize: function (doc) {
                        doc.content.splice(1, 0, {
                            text: 'Generated Date: ' + new Date().toLocaleDateString('en-GB'),
                            alignment: 'center',
                            margin: [0, 0, 0, 12]
                        });

                        // Center table
                        var table = doc.content[doc.content.length - 1].table;
                        table.widths = new Array(table.body[0].length).fill('*'); // equal widths
                        doc.content[doc.content.length - 1].alignment = 'center'; // ✅ Center table

                        doc.styles.tableHeader = { fillColor: '#000000', color: 'white', alignment: 'center' };

                        var objLayout = {};
                        objLayout['hLineWidth'] = function () { return 1; };
                        objLayout['vLineWidth'] = function () { return 1; };
                        objLayout['hLineColor'] = function () { return '#000'; };
                        objLayout['vLineColor'] = function () { return '#000'; };
                        objLayout['paddingLeft'] = function () { return 4; };
                        objLayout['paddingRight'] = function () { return 4; };
                        doc.content[doc.content.length - 1].layout = objLayout;

                        var tableBody = doc.content[doc.content.length - 1].table.body;
                        tableBody.forEach(function (row) {
                            row.forEach(function (cell) {
                                cell.alignment = 'center';
                            });
                        });
                    },
                    action: function (e, dt, button, config) {
                        if ($('#reqTable tbody input.row-select:checked').length === 0) {
                            showExportToast();
                            return;
                        }
                        $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                    },
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('.row-select').prop('checked');
                        },
                        columns: ':visible:not(:first-child)',
                        format: {
                            body: function (data, row, column, node) {
                                // For description column (index 4), return full description
                                if (column === 4) {
                                    const itemCode = $(node).closest('tr').find('td:eq(2)').text();
                                    const originalItem = originalData.find(item => item.ItemCode === itemCode);
                                    return originalItem ? (originalItem.Description || 'N/A') : data;
                                }

                                if (column === 1) {
                                    return $('#reqTable tbody input.row-select:checked')
                                        .index($(node).closest('tr').find('.row-select')) + 1;
                                }
                                return typeof data === 'string'
                                    ? data.replace(/<[^>]*>/g, '').trim()
                                    : data;
                            }
                        }
                    }
                },
                // 🔹 Excel
                {
                    extend: 'excelHtml5',
                    text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                    className: 'btn btn-sm btn-outline-success',
                    title: "Requirement Master",
                    messageTop: 'Generated Date: ' + moment().format('DD/MM/YYYY'),
                    action: function (e, dt, button, config) {
                        if ($('#reqTable tbody input.row-select:checked').length === 0) {
                            showExportToast();
                            return;
                        }
                        $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                    },
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('.row-select').prop('checked');
                        },
                        columns: ':visible:not(:first-child)',
                        format: {
                            body: function (data, row, column, node) {
                                // For description column (index 4), return full description
                                if (column === 4) {
                                    const itemCode = $(node).closest('tr').find('td:eq(2)').text();
                                    const originalItem = originalData.find(item => item.ItemCode === itemCode);
                                    return originalItem ? (originalItem.Description || 'N/A') : data;
                                }

                                if (column === 1) {
                                    return $('#reqTable tbody input.row-select:checked')
                                        .index($(node).closest('tr').find('.row-select')) + 1;
                                }
                                return typeof data === 'string'
                                    ? data.replace(/<[^>]*>/g, '').trim()
                                    : data;
                            }
                        }
                    },
                    customize: function (xlsx) {
                        const sheet = xlsx.xl.worksheets['sheet1.xml'];

                        // 🔹 Center align the Title (Row 1)
                        $('row:first c', sheet).attr('s', '51');

                        // 🔹 Center align the "Generated Date" (Row 2)
                        $('row:eq(1) c', sheet).attr('s', '51');

                        // 🔹 Optional: Make Title Bold (stronger visual)
                        const styles = xlsx.xl['styles.xml'];
                        const cellXfs = $('cellXfs xf', styles);
                        const fontBold = '<font><b val="1"/></font>';
                        const xf = cellXfs.first().clone(); // Clone first style
                        xf.attr('applyFont', '1');
                        $('alignment', xf).attr('horizontal', 'center');
                        $('font', xf).replaceWith(fontBold);
                        cellXfs.append(xf);
                    }
                },
                // 🔹 CSV
                {
                    extend: 'csvHtml5',
                    text: '<i class="bi bi-filetype-csv text-primary fs-5"></i>',
                    className: 'btn btn-sm btn-outline-primary',
                    title: "Requirement Master",
                    action: function (e, dt, button, config) {
                        if ($('#reqTable tbody input.row-select:checked').length === 0) {
                            showExportToast();
                            return;
                        }
                        $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                    },
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('.row-select').prop('checked');
                        },
                        columns: ':visible:not(:first-child)',
                        format: {
                            body: function (data, row, column, node) {
                                // For description column (index 4), return full description
                                if (column === 4) {
                                    const itemCode = $(node).closest('tr').find('td:eq(2)').text();
                                    const originalItem = originalData.find(item => item.ItemCode === itemCode);
                                    return originalItem ? (originalItem.Description || 'N/A') : data;
                                }

                                if (column === 1) {
                                    return $('#reqTable tbody input.row-select:checked')
                                        .index($(node).closest('tr').find('.row-select')) + 1;
                                }
                                return typeof data === 'string'
                                    ? data.replace(/<[^>]*>/g, '').trim()
                                    : data;
                            }
                        }
                    }
                }
            ]
        });

        // --- SelectAll toggle ---
        $('#selectAll').off('change').on('change', function () {
            $('#reqTable tbody .row-select').prop('checked', $(this).prop('checked'));
        });

        // --- Update SelectAll state ---
        $('#reqTable').off('change', '.row-select').on('change', '.row-select', function () {
            let total = $('#reqTable tbody .row-select').length;
            let checked = $('#reqTable tbody .row-select:checked').length;
            $('#selectAll').prop('checked', total === checked);
        });
    }

    function initDateRangePicker() {
        $('#reportrange').daterangepicker({
            autoUpdateInput: false,
            locale: {
                cancelLabel: 'Clear',
                format: 'DD/MM/YYYY'
            },
            ranges: {
                'Today': [moment(), moment()],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
                'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
                'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]
            }
        });

        $('#reportrange').on('apply.daterangepicker', function (ev, picker) {
            tableStartDate = picker.startDate;
            tableEndDate = picker.endDate;
            $(this).val(tableStartDate.format('DD/MM/YYYY') + ' - ' + tableEndDate.format('DD/MM/YYYY'));
            filterTableByDate();
        });

        $('#reportrange').on('cancel.daterangepicker', function () {
            tableStartDate = null;
            tableEndDate = null;
            $(this).val('');
            filterTableByDate(); // This will clear the filter
        });
    }

    function filterTableByDate() {
        if (tableStartDate && tableEndDate) {
            // Remove any previous filters first
            $.fn.dataTable.ext.search = $.fn.dataTable.ext.search.filter(f => !f.name || f.name !== 'dateRangeFilter');

            // Add new custom filter for both Required Date (column 6) AND Added Date (column 8)
            const dateRangeFilter = function (settings, data, dataIndex) {
                const requiredDate = moment(data[6], 'DD/MM/YYYY'); // column 6 = Required Date
                const addedDate = moment(data[8], 'DD/MM/YYYY');    // column 8 = Added Date

                // Check if either required date OR added date falls within the selected range
                const isRequiredDateInRange = requiredDate.isValid() &&
                    requiredDate.isSameOrAfter(tableStartDate, 'day') &&
                    requiredDate.isSameOrBefore(tableEndDate, 'day');

                const isAddedDateInRange = addedDate.isValid() &&
                    addedDate.isSameOrAfter(tableStartDate, 'day') &&
                    addedDate.isSameOrBefore(tableEndDate, 'day');

                // Return true if EITHER date falls within the range (OR logic)
                return isRequiredDateInRange || isAddedDateInRange;
            };

            // Assign a name to easily remove later
            dateRangeFilter.name = 'dateRangeFilter';

            $.fn.dataTable.ext.search.push(dateRangeFilter);
        } else {
            // Remove filter when no date range is selected
            $.fn.dataTable.ext.search = $.fn.dataTable.ext.search.filter(f => !f.name || f.name !== 'dateRangeFilter');
        }

        dataTable.draw();
    }

    // ✅ Helper function for warning toast
    function showExportToast() {
        toastr.warning("Please select at least one row before exporting.");
    }
</script>