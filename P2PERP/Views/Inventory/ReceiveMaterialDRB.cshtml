@{
    ViewBag.Title = "Receive Material";
}

<div class="container">
    <div class="card p-4">
        <h3 class="text-center text-primary">Receive Material</h3>

        <!-- Date Filters -->
        <div class="mb-3 d-flex gap-2">
            <div class="input-group" style="max-width: 280px;">
                <span class="input-group-text bg-primary text-white">
                    <i class="bi bi-calendar-date"></i>
                </span>
                <input type="text" id="Rejectedrange" class="form-control" placeholder="Select date range" readonly />
            </div>

        </div>

        <div class="row">
            <div class="col-12">
                <div class="table-responsive">
                    <table id="ReturnGoods" class="table table-striped table-bordered">
                        <thead class="table-dark">
                            <tr>
                                <th><input type="checkbox" id="selectAll" /></th>
                                <th>Sr No</th>
                                <th>GRNNO</th>
                                <th>GRNDate</th>
                                @*<th>GRNstatus</th>*@
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="modalContainer"></div>



<script>
    toastr.options = {
        closeButton: true,
        progressBar: true,
        newestOnTop: true,
        positionClass: "toast-top-right",
        preventDuplicates: true,
        timeOut: 3000,
        extendedTimeOut: 1000,
        showDuration: 300,
        hideDuration: 300,
        showMethod: "slideDown",
        hideMethod: "fadeOut"
    };

    $(document).ready(function () {
        // ================= Date Range Picker =================
        let startDate = null;
        let endDate = null;

        function cb(start, end) {
            $('#Rejectedrange').val(start.format('DD/MM/YYYY') + ' - ' + end.format('DD/MM/YYYY'));
            startDate = start;
            endDate = end;
            table.draw();
        }

        $('#Rejectedrange').daterangepicker({
            autoUpdateInput: false,
            locale: { cancelLabel: 'Clear' },
            format: 'DD/MM/YYYY',
            ranges: {
                'Today': [moment(), moment()],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
                'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
                'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]
            }
        }, cb);

        $('#Rejectedrange').on('apply.daterangepicker', function (ev, picker) {
            cb(picker.startDate, picker.endDate);
        });

        $('#Rejectedrange').on('cancel.daterangepicker', function () {
            $(this).val('');
            startDate = null;
            endDate = null;
            table.draw();
        });

        // ================= Custom Date Filter =================
        $.fn.dataTable.ext.search.push(function (settings, data) {
            if (settings.nTable.id !== 'ReturnGoods') return true;

            // 3rd column = GRNDate
            const dateStr = data[3]?.trim();

            // Parse the date string
            const addedDate = moment(dateStr, ["YYYY-MM-DD", "DD/MM/YYYY", "YYYY-MM-DD HH:mm:ss", moment.ISO_8601], true);

            // If date invalid or no range selected, show row
            if (!addedDate.isValid() || !startDate || !endDate) {
                return true;
            }

            // Compare day-level dates
            return addedDate.isSameOrAfter(startDate, 'day') && addedDate.isSameOrBefore(endDate, 'day');
        });


        // ================= DataTable =================
        var table = $('#ReturnGoods').DataTable({
            dom: '<"d-flex justify-content-between align-items-center mb-2"Bf>rt<"d-flex justify-content-between align-items-center"i p>',
            buttons: [

                // ==== Print ====
                {
                    extend: 'print',
                    text: '<i class="bi bi-printer-fill fs-5"></i>',
                    title: 'GRN Details',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('input.rowCheckbox').prop('checked');
                        },
                        columns: [2, 3], // adjust columns as per your DataTable
                        modifier: { search: 'applied', order: 'applied' }
                    },
                    action: function (e, dt, button, config) {
                        var btnApi = dt.button(button);

                        if ($('.rowCheckbox:checked').length === 0) {
                            toastr.warning("Please select at least one row before printing!", "", {
                                onHidden: function () { btnApi.processing(false); }
                            });
                            return;
                        }

                        btnApi.processing(true);
                        setTimeout(() => {
                            try {
                                $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                            } finally {
                                btnApi.processing(false);
                            }
                        }, 50);
                    },

                    customize: function (win) {
                        var $body = $(win.document.body);

                        // ========== Inject custom CSS ==========
                        $body.append(`
            <style>
                thead th {
                    background-color: black !important;
                    color: white !important;
                    text-align: center !important;
                    -webkit-print-color-adjust: exact !important;
                    print-color-adjust: exact !important;
                }
                table {
                    border-collapse: collapse !important;
                    width: 100% !important;
                }
                td, th {
                    border: 1px solid #000 !important;
                    padding: 6px !important;
                    text-align: center !important;
                }
                h1 {
                    text-align: center !important;
                }
            </style>
        `);

                        // ========== Add Title & Date ==========
                        $body.find('h1').after(
                            `<div style="text-align:center;font-style:italic;font-size:10pt;margin-bottom:12px;">
                Generated Date: ${moment().format("DD/MM/YYYY")}
            </div>`
                        );

                        // ========== Add Sr No ==========
                        var $table = $body.find('table');

                        // Add "Sr No" header to first column
                        $table.find('thead tr').prepend('<th>Sr No</th>');

                        // Add numbering to each row in tbody
                        $table.find('tbody tr').each(function (index) {
                            $(this).prepend(`<td>${index + 1}</td>`);
                        });

                        // ========== Apply Bootstrap-like styling ==========
                        $table.addClass('table table-bordered table-striped');
                        $body.css('font-size', '12pt');
                    }
                },

                // ==== PDF ====
                {
                    extend: 'pdfHtml5',
                    text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                    title: 'GRN Details',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('input.rowCheckbox').prop('checked');
                        },
                        columns: [2, 3],
                        modifier: { search: 'applied', order: 'applied' }
                    },
                    action: function (e, dt, button, config) {
                        var btnApi = dt.button(button);

                        if ($('.rowCheckbox:checked').length === 0) {
                            toastr.warning("Please select at least one row before exporting!", "", {
                                onHidden: function () { btnApi.processing(false); }
                            });
                            return;
                        }

                        btnApi.processing(true);

                        setTimeout(() => {
                            try {
                                if (!$.fn.dataTable.ext.buttons.pdfHtml5.__originalAction) {
                                    $.fn.dataTable.ext.buttons.pdfHtml5.__originalAction =
                                        $.fn.dataTable.ext.buttons.pdfHtml5.action;
                                }
                                $.fn.dataTable.ext.buttons.pdfHtml5.__originalAction.call(this, e, dt, button, config);
                            } finally {
                                btnApi.processing(false);
                            }
                        }, 50);
                    },
                    customize: function (doc) {
                        var tableNode = doc.content && doc.content.find(n => n.table);
                        if (!tableNode) return;

                        doc.content.splice(1, 0, {
                            text: `Generated Date: ${moment().format("DD/MM/YYYY")}`,
                            alignment: 'center',
                            margin: [0, 0, 0, 12],
                            fontSize: 10,
                            italics: true
                        });

                        tableNode.table.body[0].unshift({ text: 'Sr No', style: 'tableHeader', alignment: 'center' });
                        for (var r = 1; r < tableNode.table.body.length; r++) {
                            tableNode.table.body[r].unshift({ text: String(r), alignment: 'center', margin: [0, 4, 0, 4], fontSize: 10 });
                        }

                        let colCount = tableNode.table.body[0].length;
                        tableNode.table.widths = Array(colCount).fill('*');

                        tableNode.table.body[0].forEach(function (cell) { cell.color = 'white'; cell.fillColor = '#343a40'; cell.bold = true; cell.fontSize = 11; cell.alignment = 'center'; cell.margin = [4, 6, 4, 6]; });
                        for (var i = 1; i < tableNode.table.body.length; i++) {
                            var row = tableNode.table.body[i];
                            row.forEach(function (cell) { cell.alignment = 'center'; cell.fontSize = 10; cell.margin = [4, 4, 4, 4]; });
                            if (i % 2 === 0) row.forEach(cell => { cell.fillColor = '#f9f9f9'; });
                        }

                        tableNode.layout = {
                            hLineWidth: () => 0.5, vLineWidth: () => 0.5,
                            hLineColor: (i, node) => (i === 0 || i === node.table.body.length) ? '#000000' : '#999999',
                            vLineColor: (i, node) => (i === 0 || i === node.table.widths.length) ? '#000000' : '#999999',
                            paddingLeft: () => 6, paddingRight: () => 6, paddingTop: () => 4, paddingBottom: () => 4
                        };

                        doc.pageMargins = [40, 60, 40, 40];
                        doc.defaultStyle.fontSize = 10;
                        doc.styles.tableHeader = { bold: true, fontSize: 11, color: 'white', fillColor: '#343a40', alignment: 'center' };
                        doc.styles.title = { fontSize: 16, bold: true, alignment: 'center', margin: [0, 0, 0, 6] };
                    }
                },

                //excel
                {
                    extend: 'excelHtml5',
                    text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                    title: null,
                    sheetName: 'GRN Details',
                    filename: 'GRN Details',                            
                    exportOptions: {
                        columns: [1, 2, 3],
                        rows: function (idx, data, node) {
                            return $(node).find('input.rowCheckbox').prop('checked'); // only selected rows
                        },
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                if (colIdx === 1) { // Sr No column
                                    // Get all selected rows' data
                                    var selectedData = table.rows({ order: 'applied', search: 'applied' }).data().toArray()
                                        .filter((d, i) => {
                                            var n = table.row(i).node();
                                            return $(n).find('input.rowCheckbox').prop('checked');
                                        });

                                    // Find this row's position among selected rows using unique GRNCode
                                    var rowData = table.row(node).data();
                                    var srNo = selectedData.findIndex(d => d.GRNCode === rowData.GRNCode) + 1;
                                    return srNo;
                                }
                                return data;
                            }
                        }
                    },
                    customize: function (xlsx) {
                        var sheet = xlsx.xl.worksheets['sheet1.xml'];
                        var stylesXml = xlsx.xl['styles.xml'];

                        // Create a centered text style
                        var cellXfs = $('cellXfs xf', stylesXml);
                        var centerStyleIndex = cellXfs.length;
                        cellXfs.last().after(
                            '<xf numFmtId="0" fontId="0" fillId="0" borderId="0" xfId="0" applyAlignment="1">' +
                            '<alignment horizontal="center" vertical="center"/></xf>'
                        );

                        // ===== Define merge range =====
                        // Merge across 3 columns 
                        var mergeAcross = 3; // total export columns
                        var lastColLetter = String.fromCharCode(64 + mergeAcross); 

                        // Add merge cells section if not exists
                        if ($('mergeCells', sheet).length === 0) {
                            $('worksheet', sheet).prepend('<mergeCells count="0"></mergeCells>');
                        }

                        var mergeCells = $('mergeCells', sheet);
                        var count = parseInt(mergeCells.attr('count') || 0);

                        // Add two merged rows (A1:C1 and A2:C2)
                        mergeCells.append(`<mergeCell ref="A1:${lastColLetter}1"/>`);
                        mergeCells.append(`<mergeCell ref="A2:${lastColLetter}2"/>`);
                        mergeCells.attr('count', count + 2);

                        // ===== Add Title + Date rows =====
                        var titleRow = `
            <row r="1">
                <c r="A1" t="inlineStr" s="${centerStyleIndex}">
                    <is><t>GRN Details</t></is>
                </c>
            </row>
            <row r="2">
                <c r="A2" t="inlineStr" s="${centerStyleIndex}">
                    <is><t>Generated Date: ${moment().format("DD/MM/YYYY")}</t></is>
                </c>
            </row>
        `;

                        // ===== Move existing rows down by 2 =====
                        var rows = $('row', sheet);
                        rows.each(function () {
                            var r = parseInt($(this).attr('r'));
                            $(this).attr('r', r + 2);
                            $(this).find('c').each(function () {
                                var ref = $(this).attr('r');
                                var col = ref.replace(/[0-9]/g, '');
                                $(this).attr('r', col + (r + 2));
                            });
                        });

                        // ===== Insert new rows at the top =====
                        sheet.childNodes[0].childNodes[1].innerHTML =
                            titleRow + sheet.childNodes[0].childNodes[1].innerHTML;
                    },
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.rowCheckbox:checked').length;
                        var btnApi = dt.button(button);

                        if (selected === 0) {
                            toastr.warning("Please select at least one row before exporting!");
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        try { btnApi.processing(true); } catch (err) { }

                        // Call original excelHtml5 action
                        if (!$.fn.dataTable.ext.buttons.excelHtml5.__originalAction) {
                            $.fn.dataTable.ext.buttons.excelHtml5.__originalAction =
                                $.fn.dataTable.ext.buttons.excelHtml5.action;
                        }
                        $.fn.dataTable.ext.buttons.excelHtml5.__originalAction.call(this, e, dt, button, config);

                        setTimeout(function () {
                            try { btnApi.processing(false); } catch (err) { }
                        }, 50);
                    }
                },


                // ==== CSV ====
                {
                    extend: 'csvHtml5',
                    text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',

                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('input.rowCheckbox').prop('checked');
                        },
                        columns: [1, 2, 3],
                        modifier: { search: 'applied', order: 'applied' },
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                if (colIdx === 1) { // Sr No column
                                    // Get all selected rows
                                    var selectedData = table.rows({ order: 'applied', search: 'applied' }).data().toArray()
                                        .filter((d, i) => {
                                            var n = table.row(i).node();
                                            return $(n).find('input.rowCheckbox').prop('checked');
                                        });

                                    var rowData = table.row(node).data();
                                    var srNo = selectedData.findIndex(d => d.GRNCode === rowData.GRNCode) + 1;
                                    return srNo;
                                }
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.rowCheckbox:checked').length;
                        var btnApi = dt.button(button);

                        if (selected === 0) {
                            toastr.warning("Please select at least one row before exporting!");
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        try { btnApi.processing(true); } catch (err) { }

                        // Call original excelHtml5 action
                        if (!$.fn.dataTable.ext.buttons.excelHtml5.__originalAction) {
                            $.fn.dataTable.ext.buttons.excelHtml5.__originalAction = $.fn.dataTable.ext.buttons.excelHtml5.action;
                        }
                        $.fn.dataTable.ext.buttons.excelHtml5.__originalAction.call(this, e, dt, button, config);

                        setTimeout(function () { try { btnApi.processing(false); } catch (err) { } }, 50);
                    }

                }


            ],


            responsive: true,
            ajax: {
                url: "/Inventory/getRecevieMaterialDRB",
                type: "GET",
                dataType: "json"
            },
            columns: [
                {
                    data: null,
                    orderable: false,
                    searchable: false,
                    render: function (data, type, row) {
                        return `<input type="checkbox" class="rowCheckbox" value="${row.GRNCode}" />`;
                    }
                },
                {
                    data: null,
                    title: "Sr No",
                    render: function (data, type, row, meta) {
                        return meta.row + 1;
                    },
                    orderable: false,
                },
                { data: "GRNCode", title: "GRN Code" },
                {
                    data: "AddedDate",
                    title: "GRN Date",
                    render: function (data, type, row) {
                        if (!data) return "";
                        return data.replace(/-/g, "/");
                    },
                    className: "text-center align-middle"
                },
                //{ data: "StatusName", title: "GRNstatus" },
                {
                    data: "StatusName",
                    title: "Action",
                    orderable: false,
                    searchable: false,
                    render: function (data, type, row) {
                        return `
            <button type="button" class="btn btn-success btn-InStock square-pill d-inline-flex align-items-center px-2 py-1 shadow-InStock" data-bs-toggle="tooltip" title="In Stock">
                <i class="bi bi-box-seam fs-6"></i>
            </button>`;
                    }
                }
            ],
            ordering: false,
            language: { emptyTable: "No approved POs available" },

            //  Only center table headers + body cells
            columnDefs: [
                { targets: "_all", className: "text-center align-middle" }
            ]
        });

        // Re-init tooltips after every table draw
        $('#ReturnGoods').on('draw.dt', function () {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (el) {
                return new bootstrap.Tooltip(el);
            });
        });

        // Init tooltips once on page load
        const tooltipTriggerListInit = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerListInit.map(function (el) {
            return new bootstrap.Tooltip(el);
        });

        // Select All
        $('#selectAll').on('change', function () {
            var rows = table.rows({ search: 'applied' }).nodes();
            $('input.rowCheckbox', rows).prop('checked', this.checked);
        });

        // Row checkbox updates SelectAll
        $('#ReturnGoods tbody').on('change', '.rowCheckbox', function () {
            var rows = table.rows({ search: 'applied' }).nodes();
            var total = $('input.rowCheckbox', rows).length;
            var checked = $('input.rowCheckbox:checked', rows).length;
            $('#selectAll').prop('checked', total > 0 && total === checked);
        });

        // View button
        $('#ReturnGoods').on('click', '.btn-view', function () {
            var rowData = table.row($(this).closest('tr')).data();
            var grnCode = rowData.GRNCode;
            $("#modalContainer").load("/Inventory/GetGRNDetailsPartialDRB?GRNCode=" + grnCode, function () {
                $("#grnModal").modal('show');
            });
        });

        // InStock button
        $('#ReturnGoods').on('click', '.btn-InStock', function () {
            var rowData = table.row($(this).closest('tr')).data();
            var grnCode = rowData.GRNCode;
            $("#modalContainer").load("/Inventory/InstockPartialDRB?GRNCode=" + grnCode, function () {
                $("#InStockModal").modal('show');
            });
        });

        function getExportSrNo(rowIdx, tbl) {
            // Get all rows nodes
            let allRows = tbl.rows({ order: 'applied', search: 'applied' }).nodes().toArray();
            // Filter only the checked rows
            let checkedRows = allRows.filter(row => $(row).find('input.row-select').prop('checked'));
            // Find the position of this row in the checkedRows array
            let sr = checkedRows.findIndex(row => tbl.row(row).index() === rowIdx) + 1;
            return sr; // consecutive Sr.No
        }
    });
</script>