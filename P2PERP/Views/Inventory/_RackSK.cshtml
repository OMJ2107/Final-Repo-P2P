<div class="d-flex justify-content-between align-items-center mb-3">
    <div class="flex-grow-1 text-center">
        <h4 class="mb-0 h3 text-primary">Rack List</h4>
    </div>
    <button class="btn btn-success" id="btnAddrack">
        <i class="bi bi-plus-circle"></i> Add Rack
    </button>
</div>

<div class="table-responsive">
    <table id="rackTable" class="table table-bordered table-hover align-middle w-100">
        <thead class="table-dark text-center">
            <tr>
                <th width="50"><input type="checkbox" id="selectAllRack"></th>
                <th width="80">Sr No</th>
                <th>Rack ID</th>
                <th>Rack Code</th>
                <th>Rack Name</th>
                <th>Section Name</th>
                <th>Warehouse Name</th>
                <th>Added Date</th>
                <th>Added By</th>
                <th>Description</th>
                <th width="150">Action</th>
            </tr>
        </thead>
        <tbody class="text-center"></tbody>
    </table>
</div>


<!-- Add Rack Modal -->
<div class="modal fade" id="addRackModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white position-relative py-2">
                <h5 class="modal-title h5 text-white text-center mb-1 w-100" id="addRackModalTitle" style="line-height: 1.2;">
                    Add Rack
                </h5>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3"
                        data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <form id="addRackForm" class="row g-3">

                    <!-- Rack Code -->
                    <div class="col-md-6 mb-3">
                        <label for="addRackCode" class="form-label">Rack Code</label>
                        <input type="text" class="form-control bg-gray" id="addRackCode" name="RackCode" required readonly>
                    </div>

                    <!-- Rack Name -->
                    <div class="col-md-6 mb-3">
                        <label for="addRackName" class="form-label">Rack Name <span class="text-red">*</span></label>
                        <input type="text" class="form-control" id="addRackName" name="RackName">
                        <span id="addRackNameError" class="text-danger"></span>
                    </div>

                    <!-- Warehouse -->
                    <div class="col-md-6 mb-3">
                        <label for="addWarehouseId" class="form-label">Warehouse <span class="text-red">*</span></label>
                        <select class="form-select" id="addWarehouseId" name="WarehouseId">
                            <option value="">-- Select Warehouse --</option>
                        </select>
                        <span id="addRackWhNameError" class="text-danger"></span>
                    </div>

                    <!-- Section -->
                    <div class="col-md-6 mb-3">
                        <label for="addSectionId" class="form-label">Section <span class="text-red">*</span></label>
                        <select class="form-select" id="addSectionId" name="SectionCode">
                            <option value="">-- Select Section --</option>
                        </select>
                        <span id="addRackSectinError" class="text-danger"></span>
                    </div>

                    <!-- Description -->
                    <div class="col-12 mb-3">
                        <label for="addDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="addDescription" name="Description" rows="3"></textarea>
                    </div>

                </form>
            </div>

            <div class="modal-footer">
                <button type="submit" form="addRackForm" class="btn btn-success px-4" id="addRackModalSubmitBtn">
                    Save
                </button>
            </div>
        </div>
    </div>
</div>


<!-- Edit Rack Modal -->
<div class="modal fade" id="editRackModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white position-relative py-2">
                <h5 class="modal-title h5 text-white text-center mb-1 w-100" id="updateRackModalTitle" style="line-height: 1.2;">
                    Update Rack
                </h5>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3"
                        data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editRackForm" class="row g-3">
                    <input type="hidden" id="editRackId" name="RackId" />
                    <!--  Rack Code  -->
                    <div class="col-md-6">
                        <label for="editRackCode">Rack Code</label>

                        <div class="form-floating form-floating-outline">
                            <input type="text" class="form-control bg-gray" id="editRackCode" name="RackCode" required readonly>
                        </div>

                    </div>
                    <!-- Rack Name -->
                    <div class="col-md-6">
                        <label for="editRackName">Rack Name <span class="text-red">*</span></label>

                        <div class="form-floating form-floating-outline">
                            <input type="text" class="form-control" id="editRackName" name="RackName" required>
                        </div>

                        <small class="text-danger" id="editRackNameError"></small>
                    </div>
                    <!--  warehouse name  -->
                    <div class="col-md-6">
                        <label for="editWarehouseName">Warehouse</label>

                        <div class="form-floating form-floating-outline">
                            <input type="text" class="form-control bg-gray" id="editWarehouseName" readonly>
                            <input type="hidden" id="editWarehouseId" name="WarehouseId">
                        </div>

                    </div>
                    <!-- Section name  -->
                    <div class="col-md-6">
                        <label for="editSectionName">Section</label>
                        
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control bg-gray" id="editSectionName" readonly>
                                <input type="hidden" id="editSectionId" name="SectionCode">
                                
                            </div>
                        </div>
                    <!-- Description -->
                    <div class="col-12">
                        <label for="editDescription">Description</label>

                        <div class="form-floating form-floating-outline">
                            <textarea class="form-control" id="editDescription" name="Description" rows="3"></textarea>
                        </div>

                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="submit" form="editRackForm" class="btn btn-success px-4" id="editRackModalSubmitBtn">
                    <i class="bi bi-check-circle me-2 text-white"></i>Update
                </button>
            </div>
        </div>
    </div>
</div>

<!-- View Rack Modal -->
<div class="modal fade" id="viewRackModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white position-relative py-2">
                <h5 class="modal-title h5 text-white text-center mb-1 w-100" id="rackDetailsModalTitle" style="line-height: 1.2;">
                    Rack Details
                </h5>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3"
                        data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <form class="row g-3">
                    <div class="col-md-6">
                        <label for="viewRackCode">Rack Code</label>
                        <div class="form-floating form-floating-outline">
                            <input type="text" class="form-control" id="viewRackCode" readonly>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <label for="viewRackName">Rack Name</label>
                        <div class="form-floating form-floating-outline">
                            <input type="text" class="form-control" id="viewRackName" readonly>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <label for="viewWarehouseName">Warehouse</label>
                        <div class="form-floating form-floating-outline">
                            <input type="text" class="form-control" id="viewWarehouseName" readonly>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <label for="viewSectionName">Section</label>
                        <div class="form-floating form-floating-outline">
                            <input type="text" class="form-control" id="viewSectionName" readonly>
                        </div>
                    </div>

                    <div class="col-12">
                        <label for="viewDescription">Description</label>
                        <div class="form-floating form-floating-outline">
                            <textarea class="form-control" id="viewDescription" rows="2" readonly></textarea>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <label for="viewAddedDate">Added Date</label>
                        <div class="form-floating form-floating-outline">
                            <input type="text" class="form-control" id="viewAddedDate" readonly>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <label for="viewAddedBy">Added By</label>
                        <div class="form-floating form-floating-outline">
                            <input type="text" class="form-control" id="viewAddedBy" readonly>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>



<style>
    button.dt-button.processing,
    div.dt-button.processing {
        pointer-events: auto !important;
        opacity: 1 !important;
        background: none !important;
    }

        button.dt-button.processing:after {
            content: none !important;
        }

    .text-red {
        color: red;
    }
</style>

<script>
    $(document).ready(function () {
        // ================= CONFIGURATION & CONSTANTS =================
        const CONFIG = {
            urls: {
                getRacks: '/Inventory/GetRacksSK',
                getNextCode: '/Inventory/GetNextRackCodeSK',
                saveRack: '/Inventory/SaveRackSK',
                deleteRack: '/Inventory/DeleteRackSK/',
                getRackById: '/Inventory/GetRackByIdSKK/',
                getWarehouses: '/Inventory/GetWarehousesListSK',
                getSections: '/Inventory/GetSectionsSKK'
            },
            selectors: {
                table: '#rackTable',
                addForm: '#addRackForm',
                editForm: '#editRackForm',
                addModal: '#addRackModal',
                editModal: '#editRackModal',
                viewModal: '#viewRackModal'
            }
        };

        // ================= GLOBAL VARIABLES =================
        let selectedRackIds = new Set();
        let isRackInitialized = false;
        let table;

        // ================= UTILITY FUNCTIONS =================
        const utils = {
            // Tooltip initialization
            initTooltips: function () {
                const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                tooltipTriggerList.map(function (tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl, { trigger: 'hover' });
                });
            },

            // Date formatting
            formatDate: function (dateString) {
                if (!dateString) return "";
                let date;
                const match = /\/Date\((\d+)\)\//.exec(dateString);
                if (match) {
                    date = new Date(parseInt(match[1]));
                } else {
                    date = new Date(dateString);
                }
                return !isNaN(date.getTime()) ?
                    date.toLocaleDateString("en-GB", { day: "2-digit", month: "2-digit", year: "numeric" }) : "";
            },

            // Validation helpers
            showFieldError: function (inputId, errorId, message) {
                $(`#${inputId}`).addClass("is-invalid");
                $(`#${errorId}`).text(message).removeClass("d-none");
            },

            clearFieldError: function (inputId, errorId) {
                $(`#${inputId}`).removeClass("is-invalid");
                $(`#${errorId}`).text("").addClass("d-none");
            },

            clearAllErrors: function (formSelector) {
                $(`${formSelector} .form-control, ${formSelector} .form-select`).removeClass("is-invalid");
                $(`${formSelector} .text-danger`).text("").addClass("d-none");
            },

            // SweetAlert wrapper
            showAlert: function (title, text, icon, timer = 2000) {
                return Swal.fire({ title, text, icon, timer, showConfirmButton: false });
            },

            // Error handler
            handleError: function (message) {
                Swal.fire({ title: "Error", text: message, icon: "error", timer: 2500 });
            }
        };

        // ================= VALIDATION FUNCTIONS =================
        const validators = {
            rackForm: function (formSelector) {
                let isValid = true;
                const $form = $(formSelector);

                const fields = {
                    addRackName: {
                        value: $form.find("#addRackName").val().trim(),
                        errorId: 'addRackNameError',
                        message: 'Rack Name is required.'
                    },
                    addWarehouseId: {
                        value: $form.find("#addWarehouseId").val(),
                        errorId: 'addRackWhNameError',
                        message: 'Please select a Warehouse.'
                    },
                    addSectionId: {
                        value: $form.find("#addSectionId").val(),
                        errorId: 'addRackSectinError',
                        message: 'Please select a Section.'
                    }
                };

                Object.keys(fields).forEach(field => {
                    const config = fields[field];
                    if (!config.value) {
                        utils.showFieldError(field, config.errorId, config.message);
                        isValid = false;
                    }
                });

                return isValid;
            },

            editRackForm: function () {
                const nameValue = $('#editRackName').val().trim();
                if (!nameValue) {
                    $('#editRackName').addClass('is-invalid');
                    $('#editRackNameError').text('Rack Name is required').removeClass('d-none');
                    return false;
                }
                return true;
            }
        };

        // ================= DATA TABLE INITIALIZATION =================
        function initializeDataTable() {
            table = $(CONFIG.selectors.table).DataTable({
                dom: '<"d-flex justify-content-between align-items-center mt-1 mb-2"Bf>rt<"d-flex justify-content-between mt-2"<"datatable-info"i><"datatable-pagination"p>>',
                paging: true,
                pageLength: 10,
                lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
                ajax: {
                    url: CONFIG.urls.getRacks,
                    type: "GET",
                    dataSrc: "data"
                },
                columns: getTableColumns(),
                columnDefs: [
                    { orderable: false, targets: "_all" },
                    { className: "text-center", targets: "_all" }
                ],
                buttons: getTableButtons(),
                drawCallback: function (settings) {
                    setTimeout(utils.initTooltips, 100);
                },
                initComplete: function (settings, json) {
                    setTimeout(utils.initTooltips, 100);
                }
            });

            addDateRangePicker();
        }

        function getTableColumns() {
            return [
                {
                    data: "RackId",
                    render: function (data) {
                        return `<input type="checkbox" class="rack-checkbox" value="${data}">`;
                    },
                    orderable: false,
                    searchable: false
                },
                {
                    data: null,
                    render: function (data, type, row, meta) {
                        return (type === 'display' || type === 'export') ? meta.row + 1 : data;
                    }
                },
                { data: "RackId", visible: false },
                { data: "RackCode" },
                { data: "RackName" },
                { data: "SectionName" },
                { data: "WarehouseName" },
                {
                    data: "AddedDate",
                    render: function (data) {
                        return utils.formatDate(data);
                    }
                },
                { data: "AddedBy" },
                {
                    data: "Description",
                    render: function (data, type) {
                        if (!data) return "";
                        if (type === "display") {
                            const truncated = data.length > 30 ? data.substr(0, 30) + "..." : data;
                            return `<span class="description-tooltip" data-bs-toggle="tooltip" data-bs-placement="top" title="${data.replace(/"/g, '&quot;')}">${truncated}</span>`;
                        }
                        return data;
                    }
                },
                {
                    data: "RackId",
                    render: function (data) {
                        return `
                        <div class="d-flex justify-content-center gap-1">
                            <button class="btn btn-sm btn-primary view-rack" data-id="${data}" data-bs-toggle="tooltip" title="View Rack">
                                <i class="bi bi-eye-fill"></i>
                            </button>
                            <button class="btn btn-sm btn-secondary edit-rack" data-id="${data}" data-bs-toggle="tooltip" title="Edit Rack">
                                <i class="bi bi-pencil-square"></i>
                            </button>
                            <button class="btn btn-sm btn-danger delete-rack" data-id="${data}" data-bs-toggle="tooltip" title="Delete Rack">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                        `;
                    },
                    orderable: false,
                    searchable: false
                }
            ];
        }

        function getTableButtons() {
            const baseConfig = {
                columns: ':visible:not(:first-child):not(:last-child)',
                rows: (idx, data) => selectedRackIds.has(data.RackId.toString()),
                action: function (e, dt, button, config) {
                    if (selectedRackIds.size === 0) {
                        toastr.warning("Please select at least one rack before exporting.", "No Selection");
                        return;
                    }
                    $.fn.dataTable.ext.buttons[config.extend].action.call(this, e, dt, button, config);
                }
            };

            return [
                createPrintButton(baseConfig),
                createPdfButton(baseConfig),
                createExcelButton(baseConfig),
                createCsvButton(baseConfig)
            ];
        }

        function createPrintButton(baseConfig) {
            return {
                extend: 'print',
                text: '<i class="bi bi-printer-fill text-dark fs-5" data-bs-toggle="tooltip" title="Print"></i>',
                title: '',
                exportOptions: baseConfig,
                customize: function (win) {
                    let serialNumber = 1;
                    $(win.document.body).find('table tbody tr').each(function () {
                        $(this).find('td:first').text(serialNumber++);
                    });

                    $(win.document.body).prepend(
                        '<h2 style="text-align: center; margin-bottom: 10px;">Rack List</h2>' +
                        '<p style="text-align: center; margin-bottom: 20px; color: #666;">Generated Date: ' + new Date().toLocaleDateString("en-GB") + '</p>' +
                        '<hr style="margin-bottom: 20px;">'
                    );

                    $(win.document.body).find('table')
                        .css('border', '1px solid black').css('border-collapse', 'collapse').css('width', '100%')
                        .find('th, td').css('border', '1px solid black').css('padding', '8px').css('text-align', 'center');

                    $(win.document.body).find('th')
                        .css('background-color', 'black').css('color', 'white').css('font-weight', 'bold');
                },
                action: function (e, dt, button, config) {
                    if (selectedRackIds.size === 0) {
                        toastr.warning("Please select at least one rack before printing.", "No Selection");
                        return;
                    }
                    $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                }
            };
        }

        function createPdfButton(baseConfig) {
            return {
                extend: 'pdfHtml5',
                text: '<i class="bi bi-file-earmark-pdf text-danger fs-5" data-bs-toggle="tooltip" title="Export PDF"></i>',
                title: '',
                exportOptions: baseConfig,
                customize: function (doc) {
                    // Get selected data manually
                    let selectedRows = [];
                    table.rows().every(function (rowIdx, tableLoop, rowLoop) {
                        let rowData = this.data();
                        if (selectedRackIds.has(rowData.RackId.toString())) {
                            selectedRows.push(rowData);
                        }
                    });

                    doc.content = [];
                    doc.content.push(
                        { text: 'RACK LIST', style: 'header', alignment: 'center', margin: [0, 0, 0, 10] },
                        { text: 'Generated Date: ' + new Date().toLocaleDateString("en-GB"), style: 'subheader', alignment: 'center', margin: [0, 0, 0, 20] }
                    );

                    let tableData = [
                        [
                            { text: 'SR NO', style: 'tableHeader' },
                            { text: 'RACK CODE', style: 'tableHeader' },
                            { text: 'RACK NAME', style: 'tableHeader' },
                            { text: 'SECTION NAME', style: 'tableHeader' },
                            { text: 'WAREHOUSE NAME', style: 'tableHeader' },
                            { text: 'ADDED DATE', style: 'tableHeader' },
                            { text: 'ADDED BY', style: 'tableHeader' },
                            { text: 'DESCRIPTION', style: 'tableHeader' }
                        ]
                    ];

                    selectedRows.forEach((row, index) => {
                        tableData.push([
                            { text: (index + 1).toString(), style: 'tableBody' },
                            { text: row.RackCode || '', style: 'tableBody' },
                            { text: row.RackName || '', style: 'tableBody' },
                            { text: row.SectionName || '', style: 'tableBody' },
                            { text: row.WarehouseName || '', style: 'tableBody' },
                            { text: utils.formatDate(row.AddedDate) || '', style: 'tableBody' },
                            { text: row.AddedBy || '', style: 'tableBody' },
                            { text: row.Description || '', style: 'tableBody' }
                        ]);
                    });

                    doc.content.push({
                        table: {
                            widths: ['8%', '12%', '15%', '15%', '15%', '12%', '10%', '13%'],
                            body: tableData
                        },
                        layout: {
                            hLineWidth: (i, node) => 1,
                            vLineWidth: (i, node) => 1,
                            hLineColor: (i, node) => '#000000',
                            vLineColor: (i, node) => '#000000',
                            paddingTop: (i, node) => 5,
                            paddingBottom: (i, node) => 5
                        }
                    });

                    doc.styles = {
                        header: { fontSize: 18, bold: true, alignment: 'center' },
                        subheader: { fontSize: 10, color: '#666666', alignment: 'center' },
                        tableHeader: { bold: true, fontSize: 9, color: 'white', fillColor: '#000000', alignment: 'center' },
                        tableBody: { fontSize: 8, alignment: 'center' }
                    };

                    doc.defaultStyle = { fontSize: 8, alignment: 'center' };
                },
                action: function (e, dt, button, config) {
                    if (selectedRackIds.size === 0) {
                        toastr.warning("Please select at least one rack before exporting.", "No Selection");
                        return;
                    }
                    $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                }
            };
        }

        function createExcelButton(baseConfig) {
            return {
                extend: 'excelHtml5',
                text: '<i class="bi bi-file-earmark-excel text-success fs-5" data-bs-toggle="tooltip" title="Export Excel"></i>',
                title: 'Rack List',
                messageTop: `Generated Date: ${moment().format("DD/MM/YYYY")}`,
                exportOptions: baseConfig,
                customize: function (xlsx) {
                    const sheet = xlsx.xl.worksheets['sheet1.xml'];
                    let serial = 1;

                    $('row', sheet).each(function () {
                        const rowIndex = parseInt($(this).attr('r'));
                        if (rowIndex === 3) {
                            $(this).find('c:first').before('<c t="inlineStr" s="2"><is><t>Sr. No</t></is></c>');
                        } else if (rowIndex > 3) {
                            $(this).find('c:first').before(`<c t="inlineStr" s="2"><is><t>${serial}</t></is></c>`);
                            serial++;
                        }
                    });

                    $('row[r="1"] c, row[r="2"] c', sheet).attr('s', '51');
                },
                action: function (e, dt, button, config) {
                    if (selectedRackIds.size === 0) {
                        toastr.warning("Please select at least one rack before exporting Excel.", "No Selection");
                        return;
                    }
                    $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                }
            };
        }

        function createCsvButton(baseConfig) {
            return {
                extend: 'csvHtml5',
                text: '<i class="bi bi-filetype-csv text-success fs-5" data-bs-toggle="tooltip" title="Export CSV"></i>',
                filename: 'Rack List',
                title: 'Rack List',
                message: 'Generated Date: ' + new Date().toLocaleDateString("en-GB"),
                exportOptions: {
                    columns: ':visible:not(:first-child):not(:nth-child(2)):not(:last-child)',
                    rows: function (idx, data, node) {
                        // Debug: Check what data is available
                        console.log('Row data:', data);
                        console.log('Selected Rack IDs:', Array.from(selectedRackIds));

                        // Try different ways to get the ID
                        const rackId = data.RackId || data.rackId || data.id || data[2]; // index 2 is Rack ID column

                        // Convert both to string for comparison
                        const rackIdStr = rackId ? rackId.toString() : '';
                        const isSelected = selectedRackIds.has(rackIdStr);

                        console.log('Checking rackId:', rackIdStr, 'Selected:', isSelected);
                        return isSelected;
                    }
                },
                customize: function (csv) {
                    console.log('Raw CSV:', csv);

                    if (!csv || csv.trim() === '') {
                        console.log('Empty CSV data - no selected rows?');
                        return '';
                    }

                    let lines = csv.split('\n');
                    let newCsv = '';
                    let serial = 1;

                    // Add header with "Sr No"
                    if (lines.length > 0 && lines[0].trim()) {
                        newCsv = '"Sr No",' + lines[0] + '\n';
                    }

                    // Add data rows with serial numbers
                    for (let i = 1; i < lines.length; i++) {
                        if (lines[i].trim()) {
                            newCsv += '"' + serial + '",' + lines[i] + '\n';
                            serial++;
                        }
                    }

                    console.log('Final CSV:', newCsv);
                    return newCsv;
                },
                action: function (e, dt, button, config) {
                    console.log('Selected Rack IDs before export:', Array.from(selectedRackIds));

                    if (selectedRackIds.size === 0) {
                        toastr.warning("Please select at least one rack before exporting CSV.", "No Selection");
                        return;
                    }
                    $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                }
            };
        }

        // ================= DATE RANGE PICKER =================
        function addDateRangePicker() {
            $("#rackTable_wrapper").prepend(`
                <div class="input-group mb-2 mt-3" style="max-width: 280px;">
                    <span class="input-group-text bg-primary text-white">
                        <i class="bi bi-calendar-date"></i>
                    </span>
                    <input type="text" id="rackDateRange" class="form-control" placeholder="Select date range" readonly />
                </div>
            `);

            $('#rackDateRange').daterangepicker({
                autoUpdateInput: false,
                locale: { cancelLabel: 'Clear' },
                ranges: {
                    'Today': [moment(), moment()],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
                    'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
                    'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]
                }
            });

            $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
                if (settings.nTable.id !== "rackTable") return true;
                const dateRange = $('#rackDateRange').val();
                if (!dateRange) return true;

                const [minStr, maxStr] = dateRange.split(' to ');
                const min = moment(minStr, 'DD/MM/YYYY');
                const max = moment(maxStr, 'DD/MM/YYYY');
                const date = moment(data[7], 'DD/MM/YYYY');
                return date.isBetween(min, max, 'day', '[]');
            });

            $('#rackDateRange').on('apply.daterangepicker', function (ev, picker) {
                $(this).val(picker.startDate.format('DD/MM/YYYY') + ' to ' + picker.endDate.format('DD/MM/YYYY'));
                table.draw();
            });

            $('#rackDateRange').on('cancel.daterangepicker', function () {
                $(this).val('');
                table.draw();
            });
        }

        // ================= EVENT HANDLERS =================
        function setupEventHandlers() {
            // Checkbox selection
            $("#selectAllRack").on("change", function () {
                const isChecked = $(this).prop("checked");
                $(".rack-checkbox").prop("checked", isChecked).trigger("change");
            });

            $(CONFIG.selectors.table).on("change", ".rack-checkbox", function () {
                const id = $(this).val();
                $(this).prop("checked") ? selectedRackIds.add(id) : selectedRackIds.delete(id);

                const total = $(".rack-checkbox").length;
                const checked = $(".rack-checkbox:checked").length;
                $("#selectAllRack").prop("checked", total > 0 && total === checked);
            });

            // Add Rack
            $("#btnAddrack").on("click", function () {
                $(CONFIG.selectors.addForm)[0].reset();
                utils.clearAllErrors(CONFIG.selectors.addForm);
                loadWarehouses();
                loadNextRackCode();
                $(CONFIG.selectors.addModal).modal("show");
            });

            // Form submissions
            $(CONFIG.selectors.addForm).on("submit", function (e) {
                e.preventDefault();
                submitAddRack();
            });

            $(CONFIG.selectors.editForm).on("submit", function (e) {
                e.preventDefault();
                submitEditRack();
            });

            // Action buttons
            $(CONFIG.selectors.table).on("click", ".view-rack", function () {
                viewRack($(this).data("id"));
            });

            $(CONFIG.selectors.table).on("click", ".edit-rack", function () {
                editRack($(this).data("id"));
            });

            $(CONFIG.selectors.table).on("click", ".delete-rack", function () {
                deleteRack($(this).data("id"));
            });

            // Live validation
            $(document).on("input change", "#addRackName, #addWarehouseId, #addSectionId, #editRackName", function () {
                const id = $(this).attr("id");
                const errorMap = {
                    addRackName: "addRackNameError",
                    addWarehouseId: "addRackWhNameError",
                    addSectionId: "addRackSectinError",
                    editRackName: "editRackNameError"
                };
                if (errorMap[id] && $(this).val()) {
                    utils.clearFieldError(id, errorMap[id]);
                }
            });

            // Warehouse change handler
            $('#addWarehouseId').on('change', function () {
                const warehouseCode = $(this).val();
                const $ddl = $("#addSectionId");
                $ddl.empty().append('<option value="">-- Select Section --</option>');
                if (warehouseCode) {
                    $.get(CONFIG.urls.getSections, { warehouseCode }, function (data) {
                        data.forEach(item => {
                            $ddl.append(`<option value="${item.SectionCode}">${item.SectionName}</option>`);
                        });
                    }).fail(() => utils.handleError("Error loading sections."));
                }
            });

            // Modal cleanup
            $(CONFIG.selectors.addModal).on("hidden.bs.modal", function () {
                $(CONFIG.selectors.addForm)[0].reset();
                utils.clearAllErrors(CONFIG.selectors.addForm);
            });

            $(CONFIG.selectors.editModal).on("hidden.bs.modal", function () {
                $(CONFIG.selectors.editForm)[0].reset();
                utils.clearAllErrors(CONFIG.selectors.editForm);
            });
        }

        // ================= DATA OPERATIONS =================
        function loadWarehouses(selectedCode = "") {
            $.get(CONFIG.urls.getWarehouses, function (data) {
                const $ddl = $("#addWarehouseId");
                $ddl.empty().append('<option value="">-- Select Warehouse --</option>');
                data.forEach(item => {
                    $ddl.append(`<option value="${item.WarehouseCode}">${item.WarehouseName}</option>`);
                });
                if (selectedCode) $ddl.val(selectedCode).trigger('change');
            }).fail(() => utils.handleError("Error loading warehouses."));
        }

        function loadNextRackCode() {
            $.get(CONFIG.urls.getNextCode, function (res) {
                if (res && res.NextCode) {
                    $('#addRackCode').val(res.NextCode);
                } else {
                    toastr.error("Failed to get next rack code");
                }
            });
        }

        // ================= CRUD OPERATIONS =================
        function submitAddRack() {
            utils.clearAllErrors(CONFIG.selectors.addForm);

            if (!validators.rackForm(CONFIG.selectors.addForm)) {
                return;
            }

            const formData = {
                RackCode: $('#addRackCode').val(),
                RackName: $('#addRackName').val(),
                WarehouseCode: $('#addWarehouseId').val(),
                SectionCode: $('#addSectionId').val(),
                Description: $('#addDescription').val()
            };

            $.ajax({
                url: CONFIG.urls.saveRack,
                type: "POST",
                data: formData,
                success: function (res) {
                    if (res.success) {
                        $(CONFIG.selectors.addModal).modal("hide");
                        table.ajax.reload(null, false);
                        utils.showAlert("Success", "Rack saved successfully!", "success");
                    } else {
                        handleRackError(res.message, "addRackName", "addRackNameError");
                    }
                },
                error: function () {
                    utils.handleError("Server error while saving rack.");
                }
            });
        }

        function handleRackError(message, inputId, errorId) {
            if (message && message.toLowerCase().includes("already exists")) {
                utils.showFieldError(inputId, errorId, message);
            } else {
                utils.handleError(message || "Something went wrong");
            }
        }

        function editRack(id) {
            $.get(CONFIG.urls.getRackById + id, function (res) {
                if (res) {
                    $('#editRackId').val(res.RackId);
                    $('#editRackCode').val(res.RackCode);
                    $('#editRackName').val(res.RackName);
                    $('#editDescription').val(res.Description || '');
                    $('#editWarehouseId').val(res.WarehouseCode);
                    $('#editWarehouseName').val(res.WarehouseName);
                    $('#editSectionId').val(res.SectionCode);
                    $('#editSectionName').val(res.SectionName);
                    $(CONFIG.selectors.editModal).modal("show");
                } else {
                    utils.handleError("Rack details not found.");
                }
            }).fail(() => utils.handleError("Server error while fetching rack details."));
        }

        function submitEditRack() {
            if (!validators.editRackForm()) {
                return;
            }

            const formData = $(CONFIG.selectors.editForm).serialize();
            $.ajax({
                url: CONFIG.urls.saveRack,
                type: 'POST',
                data: formData,
                success: function (res) {
                    if (res.success) {
                        $(CONFIG.selectors.editModal).modal("hide");
                        table.ajax.reload(null, false);
                        utils.showAlert("Success", res.message, "success");
                    } else {
                        handleRackError(res.message, "editRackName", "editRackNameError");
                    }
                },
                error: function () {
                    utils.handleError("Server error while updating rack.");
                }
            });
        }

        function viewRack(id) {
            $.get(CONFIG.urls.getRackById + id, function (res) {
                if (res) {
                    $('#viewRackCode').val(res.RackCode);
                    $('#viewRackName').val(res.RackName);
                    $('#viewWarehouseName').val(res.WarehouseName);
                    $('#viewSectionName').val(res.SectionName);
                    $('#viewDescription').val(res.Description);
                    $('#viewAddedBy').val(res.AddedBy);
                    $('#viewAddedDate').val(utils.formatDate(res.AddedDate) || "N/A");
                    $(CONFIG.selectors.viewModal).modal("show");
                } else {
                    utils.handleError("Rack details not found.");
                }
            }).fail(() => utils.handleError("Server error while loading rack details."));
        }

        function deleteRack(rackId) {
            Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes",
                cancelButtonText: "Cancel",
                reverseButtons: false,
                customClass: {
                    confirmButton: "btn btn-primary me-2",
                    cancelButton: "btn btn-danger"
                },
                buttonsStyling: false
            }).then((result) => {
                if (result.isConfirmed) {
                    $.post(CONFIG.urls.deleteRack + rackId, function (res) {
                        if (res.success) {
                            table.ajax.reload();
                            utils.showAlert("Deleted!", res.message || "Rack has been deleted.", "success");
                        } else {
                            utils.handleError(res.message || "Error deleting rack!");
                        }
                    }).fail(() => utils.handleError("Server error while deleting."));
                }
            });
        }

        // ================= INITIALIZATION =================
        window.initRackTab = function () {
            if (isRackInitialized) return;
            isRackInitialized = true;

            if (window.setLoaderTimeout) {
                window.setLoaderTimeout(5000);
            }

            initializeDataTable();
            setupEventHandlers();
            setTimeout(utils.initTooltips, 500);
        };

        // Auto-initialize if needed
        // initRackTab();
    });
</script>