
@{
    ViewBag.Title = "ISRStockMHB";
}

<div class="container mt-4">


    <!-- 📋 Table -->
    <div class="table-responsive shadow-lg rounded container-fluid">
        <h3 class="text-center text-primary fw-bold "> ISR & JIT Stock  </h3>
        <!-- Date Range Picker -->
        <div class="mb-3">
            <div class="input-group" style="max-width: 280px;">
                <span class="input-group-text bg-primary text-white">
                    <i class="bi bi-calendar-date"></i>
                </span>
                <input type="text" id="ISRdatepicker" class="form-control" placeholder="Select date range" readonly />
            </div>
        </div>

        <table id="inventoryTable" class="table table-hover table-striped align-middle  table-bordered">
            <thead class="table-dark">
                <tr>
                    <th><input type="checkbox" id="selectAll" /></th>
                    <th>Sr No</th>
                    <th>Item Name</th>
                    <th>Item Code</th>
                    <th>Quantity</th>
                    <th>Description</th>
                    <th>Required date</th>
                    <th>UOM</th>
                    <th>Request Type</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody id="tbodyInventory"></tbody>
        </table>
    </div>
</div>

<!-- ✅ Styles -->
<style>
    .status-badge {
        padding: 6px 10px;
        /*        border-radius: 20px;*/
        font-size: 0.85rem;
        font-weight: 600;
    }

    .status-pending {
        background-color: #ffc107;
        color: #212529;
    }

    .status-rejected {
        background-color: #dc3545;
        color: white;
    }

    .status-approved {
        background-color: #28a745;
        color: white;
    }

    #inventoryTable td,
    #inventoryTable th {
        text-align: center;
        vertical-align: middle;
    }
    button.dt-button.processing,
    div.dt-button.processing {
        pointer-events: auto !important;
        opacity: 1 !important;
        background: none !important;
    }

        button.dt-button.processing:after {
            content: none !important;
        }
</style>

<script>
    $(document).ready(function () {
        let inventoryData = [];

        // Load Inventory Data
        $.ajax({
            url: '/Inventory/ISRStock2MHB',
            type: 'GET',
            success: function (res) {
                if (res && res.Data) {
                    inventoryData = res.Data;
                    renderInventoryTable(inventoryData);
                }
            },
            error: function () {
                alert("Error fetching data.");
            }
        });

        // Render table
        function renderInventoryTable(data) {
            const $tbody = $("#tbodyInventory");
            $tbody.empty();

            if (!data || data.length === 0) {
                $tbody.append(`<tr><td colspan="9" class="text-center">No records found</td></tr>`);
                return;
            }

            $.each(data, function (i, item) {
                const statusClass = getStatusClass(item.StatusName);
                const row = `
                    <tr>
                        <td><input type="checkbox" class="row-select" /></td>
                        <td></td> <!-- Sr No will be auto-filled by DataTable -->
                        <td>${item.ItemName}</td>
                        <td>${item.ItemCode}</td>
                        <td>${item.ISRQuantity}</td>
                        <td data-bs-toggle="tooltip" title="${item.Description || ''}">
                ${item.Description || ''}
                 </td>
                        <td>${item.RequiredDates}</td>
                        <td>${item.UOMName}</td>
                        <td>${item.RequestType}</td>
                        <td><span class="status-badge ${statusClass}">${item.StatusName}</span></td>
                    </tr>
                `;
                $tbody.append(row);
            });

            // Re-initialize DataTable
            if ($.fn.DataTable.isDataTable('#inventoryTable')) {
                $('#inventoryTable').DataTable().destroy();
            }
            $('#inventoryTable').DataTable({
                dom: '<"d-flex justify-content-between align-items-center mb-3"<"dt-left"B><"dt-search"f>>rt<"bottom d-flex justify-content-between align-items-center"ip>',
                ordering:false,
                buttons: [
                    // ✅ Print
                    {
                        extend: 'print',
                        title: 'Stock Level',
                        text: '<i class="bi bi-printer-fill text-dark fs-5" data-bs-toggle="tooltip" title="Print Selected Rows"></i>',
                        titleAttr: 'Print',
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) {
                                showExportToast("Please select at least one row to Print");
                                return;
                            }
                            $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            columns: [1, 2, 3, 4, 5, 6, 7, 8],

                            rows: function (idx, data, node) {
                                return $(node).find('.row-select').prop('checked');
                            }
                        },
                        customize: function (win) {
                            $(win.document.body).find('h1').remove();
                            const today = new Date().toLocaleDateString('en-GB');
                            $(win.document.body).prepend(`
         <div style="text-align:center; margin-bottom:10px;">
             <h2 style="margin:0;">Stocl Level</h2>
             <div style="font-size:12px;">Generated Date: ${today}</div>
         </div>
     `);
                            const $table = $(win.document.body).find('table');
                            $table.addClass('table table-bordered table-striped').css({ 'font-size': '14px', 'width': '100%', 'border-collapse': 'collapse', 'margin-top': '20px' });
                            $table.find('thead th').css({ 'background-color': '#000', 'color': '#fff', 'text-align': 'center' });
                            $table.find('tbody td').css('text-align', 'center');
                            $table.find('tbody tr').each(function (i) { $(this).find('td:first').text(i + 1); });
                        }
                    },
                    // ✅ PDF
                    {
                        extend: 'pdfHtml5',
                        title: 'Stock Level',
                        text: '<i class="bi bi-file-earmark-pdf text-danger fs-5" data-bs-toggle="tooltip" title="Export to PDF"></i>',
                        titleAttr: 'Export PDF',
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) {
                                showExportToast("Please select at least one row to export PDF");
                                return;
                            }
                            $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            columns: [1, 2, 3, 4, 5, 6, 7, 8],
                            rows: function (idx, data, node) {
                                return $(node).find('.row-select').prop('checked');
                            },
                            format: {
                                body: function (data, rowIdx, colIdx) {
                                    if (colIdx === 1) return rowIdx + 1;
                                    if (typeof data === 'string') return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                    return data;
                                }
                            }
                        },
                        customize: function (doc) {
                            try {
                                // Center and enlarge title
                                doc.content[0].alignment = 'center';
                                doc.content[0].fontSize = 14;

                                // Add export date below title
                                var exportDate = new Date().toLocaleDateString('en-GB');
                                doc.content.splice(1, 0, {
                                    text: 'Generated Date: ' + exportDate,
                                    alignment: 'center',
                                    margin: [0, 0, 0, 8],
                                    fontSize: 10
                                });

                                // Find table node
                                var tableNode = doc.content.find(c => c.table);
                                if (!tableNode) return;

                                // Apply styling
                                doc.styles = doc.styles || {};
                                doc.styles.tableHeader = { alignment: 'center', fillColor: '#212529', color: '#ffffff', bold: true };
                                doc.styles.tableBodyEven = { alignment: 'center' };
                                doc.styles.tableBodyOdd = { alignment: 'center' };

                                // Table borders + padding
                                tableNode.layout = {
                                    hLineWidth: () => .5, vLineWidth: () => .5,
                                    hLineColor: () => '#dddddd', vLineColor: () => '#dddddd',
                                    paddingLeft: () => 6, paddingRight: () => 6,
                                    paddingTop: () => 4, paddingBottom: () => 4
                                };

                                // Re-number Sr No column
                                tableNode.table.body.forEach((row, i) => {
                                    if (i > 0) row[0] = { text: String(i), alignment: 'center' };
                                });
                            } catch (err) {
                                console.error('PDF customize error:', err);
                            }
                        }

                    },
                    // ✅ Excel
                    {
                        extend: 'excelHtml5',
                        title: 'Stock Level',
                        text: '<i class="bi bi-file-earmark-excel text-success fs-5" data-bs-toggle="tooltip" title="Export to Excel"></i>',
                        titleAttr: 'Export Excel',
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) {
                                showExportToast("Please select at least one row to export Excel");
                                return;
                            }
                            window.__excelSrCounter = 0;
                            $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            columns: [1, 2, 3, 4, 5, 6, 7, 8],
                            rows: function (idx, data, node) {
                                return $(node).find('.row-select').prop('checked');
                            },
                            format: {
                                body: function (data, rowIdx, colIdx, node) {
                                    if (colIdx === 1) return ++window.__excelSrCounter;
                                    if (typeof data === 'string') return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                    return data;
                                }
                            }
                        },
                        customize: function (xlsx) {
                            const sheet = xlsx.xl.worksheets['sheet1.xml'];
                            const now = new Date();
                            const formattedDate = now.toLocaleDateString('en-GB'); // DD/MM/YYYY

                            const newRowNumber = 2;

                            // Create "Generated Date" row
                            const dateRow = `
<row r="${newRowNumber}">
    <c t="inlineStr" r="A${newRowNumber}">
        <is><t>Generated Date: ${formattedDate}</t></is>
    </c>
</row>`;

                            // Shift existing rows down by +1
                            $('row', sheet).each(function () {
                                const r = parseInt($(this).attr('r'));
                                if (r >= newRowNumber) $(this).attr('r', r + 1);
                            });
                            $('c', sheet).each(function () {
                                const cellRef = $(this).attr('r');
                                const col = cellRef.replace(/[0-9]/g, '');
                                const row = parseInt(cellRef.replace(/[A-Z]/g, ''));
                                if (row >= newRowNumber) $(this).attr('r', col + (row + 1));
                            });

                            // Add the new date row right after the title
                            $('row[r="1"]', sheet).after(dateRow);

                            // ✅ Merge cells from A to last column
                            const totalCols = $('row c', sheet).last().attr('r').replace(/[0-9]/g, '');
                            let mergeCells = $('mergeCells', sheet);
                            if (mergeCells.length === 0) {
                                $('worksheet', sheet).prepend(`<mergeCells count="1"><mergeCell ref="A${newRowNumber}:${totalCols}${newRowNumber}"/></mergeCells>`);
                            } else {
                                const count = parseInt(mergeCells.attr('count')) + 1;
                                mergeCells.attr('count', count);
                                mergeCells.append(`<mergeCell ref="A${newRowNumber}:${totalCols}${newRowNumber}"/>`);
                            }

                            // ✅ Center align the merged cell
                            const styles = xlsx.xl['styles.xml'];
                            const styleIndex = $('cellXfs xf', styles).length;
                            $('cellXfs', styles).append('<xf xfId="0" applyAlignment="1"><alignment horizontal="center"/></xf>');
                            $(`c[r="A${newRowNumber}"]`, sheet).attr('s', styleIndex);
                        }
                   
                    },
                   {
    extend: 'csvHtml5',
    title: 'Stock_Level',
    text: '<i class="bi bi-filetype-csv text-primary fs-5" data-bs-toggle="tooltip" title="Export to CSV"></i>',
    titleAttr: 'Export CSV',

    // 🧭 Custom Action — checks if any row is selected
    action: function (e, dt, button, config) {
        if ($('.row-select:checked').length === 0) {
            showExportToast("Please select at least one row to export CSV");
            return;
        }
        // Run default CSV export action
        $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
    },

    exportOptions: {
        columns: [1, 2, 3, 4, 5, 6, 7, 8], // ✅ columns to export
        rows: function (idx, data, node) {
            // ✅ export only selected rows
            return $(node).find('.row-select').prop('checked');
        },

        // ✅ Proper serial numbering + HTML cleanup
        format: {
            body: function (data, rowIdx, colIdx) {
                // Remove HTML tags and trim
                if (typeof data === 'string') data = data.replace(/<[^>]*>/g, '').trim();

                // Serial number column
                if (colIdx === 0 || colIdx === 1) {
                    // Initialize counter once
                    if (typeof this.srnoCounter === 'undefined') this.srnoCounter = 0;
                    return ++this.srnoCounter;
                }

                return data; // fallback
            }
        }
    }
}

                ],
                columnDefs: [
                    { targets: 1, render: function (data, type, row, meta) { return meta.row + 1; } },
                    { orderable: false, targets: [0, 9] }
                ],
                order: [],

                createdRow: function (row, data, dataIndex) {
                    // Center align all cells
                    $('td', row).addClass('text-center');
                },
                drawCallback: function () {
                    // Re-enable tooltips after redraw
                    $('[data-bs-toggle="tooltip"]').tooltip();
                }
            });



        }


        function getStatusClass(status) {
            if (!status) return "";
            status = status.toLowerCase();
            if (status === "pending") return "status-pending";
            if (status === "approved") return "status-approved";
            if (status === "rejected") return "status-rejected";
            return "";
        }

        // Select All Functionality
        $(document).on("change", "#selectAll", function () {
            $(".row-select").prop("checked", this.checked);
        });

        $(document).on("change", ".row-select", function () {
            $("#selectAll").prop("checked", $(".row-select:checked").length === $(".row-select").length);
        });

        // Toastr Configuration
        toastr.options = {
            closeButton: true,
            progressBar: true,
            preventDuplicates: true,
            newestOnTop: true,
            positionClass: "toast-top-right",
            timeOut: "3000"
        };

        // Toast Warning
        function showExportToast() {
            toastr.warning("Please select at least one row before exporting.", "Warning");
        }
    });
    // 📌 Date Range Picker for Required Date
    $(document).on('focus', '#ISRdatepicker', function () {
        if (!$(this).data('daterangepicker')) {
            $(this).daterangepicker({
                autoUpdateInput: false,
                opens: "center",
                drops: "down",
                alwaysShowCalendars: true,
                locale: { cancelLabel: 'Clear' },
                ranges: {
                    'Today': [moment(), moment()],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
                    'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
                    'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]
                }
            }, function (start, end) {
                $('#ISRdatepicker').val(start.format('DD/MM/YYYY') + ' - ' + end.format('DD/MM/YYYY'));

                // ✅ DataTable filter for Required Date column (index 6)
                $.fn.dataTable.ext.search.push(function (settings, data) {
                    if (settings.nTable.id !== 'inventoryTable') return true;

                    const requiredDate = moment(data[6], 'DD/MM/YYYY');
                    return requiredDate.isBetween(start, end, undefined, '[]');
                });

                $('#inventoryTable').DataTable().draw();

                // remove filter after each draw
                $.fn.dataTable.ext.search.pop();
            });

            // Clear on cancel
            $('#ISRdatepicker').on('cancel.daterangepicker', function () {
                $(this).val('');
                $('#inventoryTable').DataTable().draw();
            });
        }
    });

</script>
