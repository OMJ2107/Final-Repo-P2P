<style>
    #currentStockTable thead th {
        text-align: center;
        vertical-align: middle;
    }

    #currentStockTable td {
        text-align: center;
        vertical-align: middle;
    }

    div.dt-buttons {
        margin-top: 10px;
        margin-bottom: 10px;
    }

    /* Buffer on export icon proccess remove */
    button.dt-button.processing,
    div.dt-button.processing {
        pointer-events: auto !important;
        opacity: 1 !important;
        background: none !important;
    }

        button.dt-button.processing:after {
            content: none !important;
        }
</style>

<div class="container mt-4 card shadow-sm">
    <h3 class="text-primary text-center fw-bolder mt-3">Current Stock Check</h3>
    <table id="currentStockTable" class="table table-bordered table-striped wrap">
        <thead class="table-dark text-center">
            <tr>
                <th>
                    <input type="checkbox" id="selectAllCurrent">
                </th>
                <th>Sr.No</th>
                <th>Item Code</th>
                <th>Item Name</th>
                <th>Current Qty</th>
                <th>Reorder Qty</th>
                <th>Bin List</th>
                <th>Status</th>
            </tr>
        </thead>
    </table>
</div>

<!-- Modal -->
<div class="modal fade" id="viewModal" tabindex="-1" aria-labelledby="viewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <!-- Added modal-dialog-centered -->
        <div class="modal-content">
            <div class="modal-header bg-primary justify-content-center position-relative" style="padding-top: 0.7rem; padding-bottom: 0.7rem;">
                <h4 class="modal-title text-white text-center" id="viewModalLabel">View Item</h4>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-2" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <div class="row mb-2">
                    <!-- Left Column -->
                    <div class="col-md-6">
                        <div class="mb-2">
                            <label class="form-label fw-bold">Item Code:</label>
                            <input type="text" id="modalItemCode" class="form-control bg-light text-muted" readonly>
                        </div>
                        <div class="mb-2">
                            <label class="form-label fw-bold">Item Name:</label>
                            <input type="text" id="modalItemName" class="form-control bg-light text-muted" readonly>
                        </div>
                    </div>

                    <!-- Right Column -->
                    <div class="col-md-6">
                        <div class="mb-2">
                            <label class="form-label fw-bold">Current Quantity:</label>
                            <input type="text" id="modalQuantity" class="form-control bg-light text-muted" readonly>
                        </div>
                        <div class="mb-2">
                            <label class="form-label fw-bold">Reorder Quantity:</label>
                            <input type="text" id="modalReorderQty" class="form-control bg-light text-muted" readonly>
                        </div>
                    </div>
                </div>

                <hr />
                <h5>Bin Details</h5>
                <table class="table table-sm table-bordered">
                    <thead class="table-dark text-center">
                        <tr>
                            <th>Sr.No.</th>
                            <th>Bin Name</th>
                            <th>Quantity</th>
                        </tr>
                    </thead>
                    <tbody id="modalBinTable"></tbody>
                </table>

            </div>
        </div>
    </div>
</div>


<script>
$(document).ready(function () {
    toastr.options = {
        closeButton: true,
        progressBar: true,
        preventDuplicates: true,
        newestOnTop: true,
        positionClass: "toast-top-right",
        timeOut: "3000"
    };

    var selectedIds = new Set();

    function serialFormatter() {
        let counter = 1;
        return function (data, row, column, node) {
            if (column === 1) return counter++;
            return data;
        };
    }

    // Initialize DataTable
    var currentStockTable = $('#currentStockTable').DataTable({
        "ajax": {
            "url": "@Url.Action("CurrentStockJsonLM", "Inventory")",
            "type": "GET",
            "datatype": "json"
        },
        "columns": [
            {
                "data": null,
                "orderable": false,
                "searchable": false,
                "className": "text-center",
                "render": function (data, type, row, meta) {
                    let uniqueId = row.ItemCode + "_" + meta.row;
                    return `<input type="checkbox" class="row-checkbox-current" data-id="${uniqueId}" data-code="${row.ItemCode}">`;
                }
            },
            {
                "data": null,
                "orderable": false,
                "searchable": false,
                "className": "text-center",
                "render": function (data, type, row, meta) {
                    return meta.row + 1;
                }
            },
            { "data": "ItemCode", orderable: false, "className": "text-center" },
            { "data": "ItemName", orderable: false, "className": "text-center" },
            { "data": "CurrentQty", orderable: false, "className": "text-center" },
            { "data": "ReorderQuantity", orderable: false, "className": "text-center" },
            { "data": "BinsList", orderable: false, "className": "text-center" },
            {
                data: null,
                orderable: false,
                className: "text-center",
                render: function (data, type, row) {
                    return `<button class="btn btn-sm transfer-btn bg-primary circular-glass-btn"
                    data-id="${row.ItemCode}"
                    title="View Current Stock"
                    data-bs-toggle="tooltip">
                <i class="bi bi-eye-fill"></i>
            </button>`;
                }

            }
        ],
        dom: '<"d-flex justify-content-between align-items-center mb-2"Bf>rt<"d-flex justify-content-between align-items-center mt-2"ip>',
        buttons: [
            // --- PRINT ---
            {
                extend: 'print',
                text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                title: '',
                exportOptions: {
                    columns: function (idx, data, node) {
                        var header = $(node).closest('table').find('th').eq(idx).text().trim();
                        if (header === "Status") return false;
                        if (header === "BinList") return true;
                        if (idx === 0) return false; // skip checkbox/serial
                        return true;
                    },
                    rows: function (idx, data, node) {
                        return selectedIds.has(data.ItemCode + "_" + idx);
                    },
                    format: {
                        body: serialFormatter() // fixed serial numbering logic
                    }
                },
                action: function (e, dt, button, config) {
                    if (selectedIds.size === 0) {
                        toastr.warning("Please select at least one item before printing.");
                        return;
                    }
                    // reset counter & trigger print
                    $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                },
                customize: function (win) {
                    //  Body reference
                    var $body = $(win.document.body);

                    //  Add custom styles
                    $body.append(`
<style>
    thead th {
        background-color: black !important;
        color: white !important;
        text-align: center !important;
        vertical-align: middle !important;
        -webkit-print-color-adjust: exact !important;
        print-color-adjust: exact !important;
        font-weight: bold !important;
        padding: 8px !important;
    }
    table {
        border-collapse: collapse !important;
        width: 100% !important;
        margin: 0 auto !important;
    }
    td, th {
        border: 1px solid #000 !important;
        padding: 6px !important;
        text-align: center !important;
        vertical-align: middle !important;
    }
    tbody td {
        text-align: center !important;
        vertical-align: middle !important;
    }
    h3, p {
        text-align: center !important;
    }
</style>
        `);

                    //  Add title and metadata
                    $body.prepend(`
            <h3>Current Stock Report</h3>
            <p>Generated Date: ${moment().format("DD/MM/YYYY")}</p>
        `);

                    //  Apply font & layout styling
                    $body.css({
                        'font-size': '12pt',
                        'font-family': 'Arial, sans-serif'
                    });

                    //  Fix serial numbers (recalculate for selected rows)
                    const $table = $body.find('table');
                    $table.find('tbody tr').each(function (index) {
                        $(this).find('td:first').text(index + 1);
                    });
                }
            },


            // --- PDF ---
            {
                extend: 'pdfHtml5',
                text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                title: `Current Stock`,
                exportOptions: {
                    columns: function (idx, data, node) {
                        var header = $(node).closest('table').find('th').eq(idx).text().trim();
                        if (header === "Status") return false;
                        if (header === "BinList") return true;
                        if (idx === 0) return false;
                        return true;
                    },
                    rows: function (idx, data, node) {
                        return selectedIds.has(data.ItemCode + "_" + idx);
                    },
                    format: { body: serialFormatter() }
                },
                action: function (e, dt, button, config) {
                    if (selectedIds.size === 0) {
                        toastr.warning("Please select at least one item before exporting.");
                        return;
                    }
                    $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                },
                customize: function (doc) {
                    // table layout styling
                    var objLayout = {};
                    objLayout['hLineWidth'] = function (i) { return 0.8; };
                    objLayout['vLineWidth'] = function (i) { return 0.8; };
                    objLayout['hLineColor'] = function (i) { return '#000'; };
                    objLayout['vLineColor'] = function (i) { return '#000'; };
                    objLayout['paddingLeft'] = function (i) { return 5; };
                    objLayout['paddingRight'] = function (i) { return 5; };
                    doc.content[1].layout = objLayout;

                    // header styling
                    var headerCells = doc.content[1].table.body[0];
                    headerCells.forEach(function (cell) {
                        cell.fillColor = '#000000';
                        cell.color = '#ffffff';
                        cell.bold = true;
                        cell.alignment = 'center';
                    });

                    //  Center align table on PDF
                    doc.content[1].table.widths = Array(
                        doc.content[1].table.body[0].length
                    ).fill('*');

                    doc.content[1].alignment = 'center';
                    doc.content[1].margin = [0, 10, 0, 0];

                    //  Add Generated Date under title (DATE ONLY)
                    var generatedDate = moment().format("YYYY-MM-DD");
                    doc.content.splice(1, 0, {
                        text: `Generated Date: ${moment().format("DD/MM/YYYY")}`,
                        alignment: 'center',
                        margin: [0, 0, 0, 10],
                        fontSize: 10,
                        italics: true
                    });
                }
            },

            // --- Excel ---
            {
                extend: 'excelHtml5',
                text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                title: 'Current Stock Report',
                messageTop: `Generated Date: ${moment().format("DD/MM/YYYY")}`,
                exportOptions: {
                    columns: [1, 2, 3, 4, 5, 6], // Export only actual data columns
                    rows: function (idx, data, node) {
                        let uniqueId = data.ItemCode + "_" + idx;
                        return selectedIds.has(uniqueId);
                    }
                },
                customize: function (xlsx) {
                    let sheet = xlsx.xl.worksheets['sheet1.xml'];

                    // Title row style (already centered)
                    let titleStyle = $('row[r="1"] c', sheet).attr('s');

                    // Bold Title and keep it centered
                    $('row[r="1"] c', sheet).attr('s', titleStyle);

                    // Bold Generated Date and keep it centered
                    $('row[r="2"] c', sheet).attr('s', titleStyle);

                    // Insert "Sr. No" column at start and make bold
                    let serial = 1;
                    $('row', sheet).each(function () {
                        let rowIndex = parseInt($(this).attr('r'));

                        if (rowIndex === 3) {
                            // Header row: add Sr. No at start and make bold
                            $(this).find('c:first').before(`<c t="inlineStr" s="2"><is><t>Sr. No</t></is></c>`);
                        } else if (rowIndex > 3) {
                            // Data rows: insert serial numbers
                            $(this).find('c:first').before(`<c t="inlineStr" s="2"><is><t>${serial}</t></is></c>`);
                            serial++;
                        }
                    });
                },
                action: function (e, dt, button, config) {
                    if (selectedIds.size === 0) {
                        toastr.warning('Please select at least one row to export!');
                    } else {
                        $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                    }
                }
            },
            // --- CSV ---
            {
                extend: 'csvHtml5',
                text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                title: `Current Stock - ${moment().format("DD/MM/YYYY")}`,
                exportOptions: {
                    columns: function (idx, data, node) {
                        var header = $(node).closest('table').find('th').eq(idx).text().trim();
                        if (header === "Status") return false;
                        if (header === "BinList") return true;
                        if (idx === 0) return false;
                        return true;
                    },
                    rows: function (idx, data, node) {
                        return selectedIds.has(data.ItemCode + "_" + idx);
                    },
                    format: { body: serialFormatter() }
                },
                action: function (e, dt, button, config) {
                    if (selectedIds.size === 0) {
                        toastr.warning("Please select at least one item before exporting.");
                        return;
                    }
                    $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                }
            }
        ]

    });

    // Row checkbox logic
    $('#currentStockTable tbody').on('change', '.row-checkbox-current', function () {
        const id = $(this).data('id');
        if ($(this).is(':checked')) selectedIds.add(id);
        else selectedIds.delete(id);
        const allChecked = $('.row-checkbox-current').length === $('.row-checkbox-current:checked').length;
        $('#selectAllCurrent').prop('checked', allChecked);
    });

    // Select All checkbox
    $('#selectAllCurrent').on('change', function () {
        const isChecked = $(this).is(':checked');
        $('.row-checkbox-current').prop('checked', isChecked).trigger('change');
    });

    // ---- Modal Open ----
    $('#currentStockTable tbody').on('click', '.transfer-btn', function () {
        var rowData = currentStockTable.row($(this).closest('tr')).data();

        // Fill input fields instead of span/label
        $('#modalItemCode').val(rowData.ItemCode);
        $('#modalItemName').val(rowData.ItemName);
        $('#modalQuantity').val(rowData.CurrentQty);
        $('#modalReorderQty').val(rowData.ReorderQuantity);

        // Fill Bin table with Sr.No. (unchanged)
        let binList = rowData.BinName ? rowData.BinName.split(",") : [];
        let binRows = "";
        let srNo = 1;

        binList.forEach(bin => {
            let parts = bin.trim().match(/(.*)\((\d+)\)/);
            if (parts) {
                binRows += `<tr class="text-center">
                          <td>${srNo++}</td>
                          <td>${parts[1].trim()}</td>
                          <td>${parts[2]}</td>
                        </tr>`;
            }
        });

        $('#modalBinTable').html(binRows);
        $('#viewModal').modal('show');
    });


    // Initialize Bootstrap tooltips
    $('body').tooltip({
        selector: '[title]',
        trigger: 'hover',
        placement: 'top'
    });


    $(document).ready(function () {
    // Tooltip initialize
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });

    // DataTable draw ke baad dynamic tooltips
    currentStockTable.on('draw', function () {
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });
});

});
</script>