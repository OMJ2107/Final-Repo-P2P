<div class="d-flex justify-content-between align-items-center mb-3">
    <div class="flex-grow-1 text-center">
        <h4 class="mb-0 h3 text-primary">Warehouse List</h4>
    </div>
    <button class="btn btn-success" id="btnAddWarehouse">
        <i class="bi bi-plus-circle"></i> Add Warehouse
    </button>
</div>

<style>
    button.dt-button.processing,
    div.dt-button.processing {
        pointer-events: auto !important;
        opacity: 1 !important;
        background: none !important;
    }

        button.dt-button.processing:after {
            content: none !important;
        }

  
    /* Fix double border for input-group-merge */
    .input-group-merge .form-control,
    .input-group-merge .form-select {
        border-left: 0 !important;
        border-radius: 0 0.375rem 0.375rem 0 !important;
    }

    .input-group-merge .input-group-text {
        border-right: 0 !important;
        border-radius: 0.375rem 0 0 0.375rem !important;
    }

    /* For invalid state */
    .input-group-merge .form-control.is-invalid,
    .input-group-merge .form-select.is-invalid {
        border-left: 1px solid #dc3545 !important;
    }

        .input-group-merge .form-control.is-invalid ~ .input-group-text,
        .input-group-merge .form-select.is-invalid ~ .input-group-text {
            border-color: #dc3545 !important;
            background-color: #f8d7da;
        }

    button.dt-button.processing,
    div.dt-button.processing {
        pointer-events: auto !important;
        opacity: 1 !important;
        background: none !important;
    }

        button.dt-button.processing:after {
            content: none !important;
        }
</style>

<div class="table-responsive">
    <table id="warehouseTable" class="table table-bordered table-hover align-middle w-100">
        <thead class="table-dark text-center">
            <tr>
                <th><input type="checkbox" id="WHselectAll"></th>
                <th>Sr No.</th>
                <th>Warehouse ID</th>
                <th>Warehouse Code</th>
                <th>Warehouse Name</th>
                <th>Address</th>
                <th>City</th>
                <th>Added Date</th>
                <th>Added By</th>
                <th>Phone</th>
                <th>Email</th>
                <th>Description</th>
                <th>Capacity</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody class="text-center"></tbody>
    </table>
</div>

<!-- Add/Edit Warehouse Modal -->
<div class="modal fade" id="addWarehouseModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white position-relative py-2">
                <h5 class="modal-title h5 text-white text-center mb-1 w-100" id="warehouseModalTitle" style="line-height: 1.2;">
                    Add Warehouse
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addWarehouseForm" class="row g-3">
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-barcode-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="WarehouseCode" name="WarehouseCode" readonly>
                                <label for="WarehouseCode">Warehouse Code <span class="text-danger">*</span></label>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-building-4-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" name="WarehouseName">
                                <label for="WarehouseName">Warehouse Name <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <span id="WarehouseNameError" class="text-danger"></span>
                    </div>
                    <div class="col-12">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-map-pin-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" name="Address">
                                <label for="Address">Address <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <span id="WarehouseAddressError" class="text-danger"></span>
                    </div>
                    <div class="col-md-4">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-earth-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <select class="form-select h-auto" id="CountryId" name="CountryCode">
                                    <option value="">-- Select Country --</option>
                                </select>
                                <label for="CountryId">Country <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <span id="WarehouseCountryError" class="text-danger"></span>
                    </div>
                    <div class="col-md-4">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-government-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <select class="form-select" id="StateId" name="StateCode">
                                    <option value="">-- Select State --</option>
                                </select>
                                <label for="StateId">State <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <span id="WarehouseStateError" class="text-danger"></span>
                    </div>
                    <div class="col-md-4">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-building-fill"></i></span>
                            <div class="form-floating form-floating-outline">
                                <select class="form-select" id="CityId" name="CityId">
                                    <option value="">-- Select City --</option>
                                </select>
                                <label for="CityId">City <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <span id="WarehouseCityError" class="text-danger"></span>
                    </div>
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-phone-fill"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="number" class="form-control" name="Phone" pattern="[0-9]{10}" placeholder="Enter 10-digit phone">
                                <label for="Phone">Phone <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <span id="WarehousePhoneError" class="text-danger"></span>
                    </div>
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-mail-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="email" class="form-control" name="Email">
                                <label for="Email">Email <span class="text-danger">*</span></label>
                            </div>
                        </div>
                        <span id="WarehouseEmailError" class="text-danger"></span>
                    </div>
                    <div class="col-12">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-file-text-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <textarea class="form-control" name="Description" rows="3"></textarea>
                                <label for="Description">Description</label>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="submit" form="addWarehouseForm" class="btn btn-success px-4" id="warehouseModalSubmitBtn">
                    <i class="bi bi-check-circle me-2 text-white"></i>Save
                </button>
            </div>
        </div>
    </div>
</div>

<!-- View Warehouse Modal -->
<div class="modal fade" id="viewWarehouseModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white position-relative py-2">
                <h5 class="modal-title h5 text-white text-center mb-1 w-100" style="line-height: 1.2;">
                    Warehouse Details
                </h5>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form class="row g-3">
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-barcode-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vwCode" readonly>
                                <label for="vwCode">Warehouse Code</label>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-building-4-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vwName" readonly>
                                <label for="vwName">Warehouse Name</label>
                            </div>
                        </div>
                    </div>
                    <div class="col-12">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-map-pin-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <textarea class="form-control" id="vwAddress" rows="2" readonly></textarea>
                                <label for="vwAddress">Address</label>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-building-fill"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vwCity" readonly>
                                <label for="vwCity">City</label>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-phone-fill"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vwPhone" readonly>
                                <label for="vwPhone">Phone</label>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-mail-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vwEmail" readonly>
                                <label for="vwEmail">Email</label>
                            </div>
                        </div>
                    </div>
                    <div class="col-12">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-file-text-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <textarea class="form-control" id="vwDesc" rows="2" readonly></textarea>
                                <label for="vwDesc">Description</label>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-calendar-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vwAddedDates" readonly>
                                <label for="vwAddedDates">Added Date</label>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-user-3-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vwAddedBy" readonly>
                                <label for="vwAddedBy">Added By</label>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        // ================= CONFIGURATION & CONSTANTS =================
        const CONFIG = {
            urls: {
                getWarehouses: '/Inventory/GetWarehousesSK',
                getNextCode: '/Inventory/GetNextWarehouseCodeSK',
                addWarehouse: '/Inventory/AddWarehouseSK',
                updateWarehouse: '/Inventory/UpdateWarehouseSK',
                deleteWarehouse: '/Inventory/DeleteWarehouseSK',
                viewWarehouse: '/Inventory/ViewWarehouseSK',
                getCountries: '/Purchase/GetCountries',
                getStates: '/Account/GetStates',
                getCities: '/Account/GetCities'
            },
            selectors: {
                table: '#warehouseTable',
                form: '#addWarehouseForm',
                modal: '#addWarehouseModal',
                viewModal: '#viewWarehouseModal'
            }
        };

        // ================= GLOBAL VARIABLES =================
        let selectedWarehouseIds = new Set();
        let cityMap = new Map();
        let table;

        // ================= UTILITY FUNCTIONS =================
        const utils = {
            // Date formatting utility
            formatSqlDate: function (sqlDate) {
                if (!sqlDate) return "N/A";

                let dateObj;
                const match = /\/Date\((\d+)\)\//.exec(sqlDate);

                if (match) {
                    dateObj = new Date(parseInt(match[1], 10));
                } else if (typeof sqlDate === 'string' && sqlDate.includes('T')) {
                    dateObj = new Date(sqlDate);
                } else if (typeof sqlDate === 'string') {
                    dateObj = new Date(sqlDate + 'T00:00:00');
                } else {
                    dateObj = new Date(sqlDate);
                }

                return isNaN(dateObj.getTime()) ? "Invalid Date" :
                    dateObj.toLocaleDateString("en-GB", { day: "2-digit", month: "2-digit", year: "numeric" });
            },

            // Validation helpers
            showFieldError: function (inputId, errorId, message) {
                const $input = $(`#${inputId}`).length ? $(`#${inputId}`) : $(`[name='${inputId}']`);
                $input.addClass("is-invalid");
                $(`#${errorId}`).text(message).removeClass("d-none");
            },

            clearFieldError: function (inputId, errorId) {
                const $input = $(`#${inputId}`).length ? $(`#${inputId}`) : $(`[name='${inputId}']`);
                $input.removeClass("is-invalid");
                $(`#${errorId}`).text("").addClass("d-none");
            },

            clearAllErrors: function (formSelector) {
                $(`${formSelector} .form-control, ${formSelector} .form-select`).removeClass("is-invalid");
                $(`${formSelector} .text-danger`).text("").addClass("d-none");
            },

            // Tooltip initialization
            initTooltips: function () {
                const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                tooltipTriggerList.map(function (tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl, { trigger: 'hover' });
                });
            }
        };

        // ================= VALIDATION FUNCTIONS =================
        const validators = {
            warehouseForm: function (formSelector) {
                let isValid = true;
                const $form = $(formSelector);

                const fields = {
                    WarehouseName: { value: $form.find("[name='WarehouseName']").val().trim(), required: true },
                    Address: { value: $form.find("[name='Address']").val().trim(), required: true },
                    CountryId: { value: $form.find("#CountryId").val(), required: true },
                    StateId: { value: $form.find("#StateId").val(), required: true },
                    CityId: { value: $form.find("#CityId").val(), required: true },
                    Phone: {
                        value: $form.find("[name='Phone']").val().trim(),
                        required: true,
                        pattern: /^\d{10}$/,
                        patternMessage: "Enter a valid 10-digit phone number."
                    },
                    Email: { value: $form.find("[name='Email']").val().trim(), required: true }
                };

                Object.keys(fields).forEach(field => {
                    const config = fields[field];
                    const errorId = `Warehouse${field}Error`;

                    if (!config.value) {
                        utils.showFieldError(field, errorId, `${field.replace(/([A-Z])/g, ' $1').trim()} is required.`);
                        isValid = false;
                    } else if (config.pattern && !config.pattern.test(config.value)) {
                        utils.showFieldError(field, errorId, config.patternMessage);
                        isValid = false;
                    }
                });

                return isValid;
            }
        };

        // ================= DATA TABLE INITIALIZATION =================
        function initializeDataTable() {
            table = $(CONFIG.selectors.table).DataTable({
                dom: '<"d-flex justify-content-between align-items-center mt-1 mb-2"Bf>rt<"d-flex justify-content-between mt-2"<"datatable-info"i><"datatable-pagination"p>>',
                ajax: {
                    url: CONFIG.urls.getWarehouses,
                    type: 'GET',
                    dataSrc: 'data'
                },
                order: [[2, 'desc']],
                columns: [
                    {
                        data: "WareHouseId",
                        render: function (data) {
                            return `<input type="checkbox" class="row-select" value="${data}" />`;
                        }
                    },
                    {
                        data: null,
                        render: function (data, type, row, meta) {
                            return type === 'display' ? meta.row + 1 : '';
                        }
                    },
                    { data: "WareHouseId", visible: false },
                    { data: "WarehouseCode", visible: false },
                    { data: "WarehouseName" },
                    { data: "Address" },
                    {
                        data: null,
                        render: function (data, type, row) {
                            const cityKey = `${row.CountryCode}_${row.StateCode}_${row.CityId}`;
                            return type === 'export' ?
                                (cityMap.get(cityKey) || "N/A") :
                                `<span class="city-name" data-country="${row.CountryCode}" data-state="${row.StateCode}" data-cityid="${row.CityId}">Loading...</span>`;
                        }
                    },
                    {
                        data: "AddedDate",
                        render: function (data, type) {
                            if (!data) return "";
                            return type === 'sort' ? new Date(data).getTime() : utils.formatSqlDate(data);
                        }
                    },
                    { data: "AddedBy" },
                    { data: "Phone" },
                    { data: "Email" },
                    {
                        data: "Description",
                        visible: false,
                        render: function (data) {
                            if (!data) return "";
                            const truncated = data.length > 30 ? data.substr(0, 30) + "..." : data;
                            return `<span class="description-tooltip" data-bs-toggle="tooltip" title="${data.replace(/"/g, '&quot;')}">${truncated}</span>`;
                        }
                    },
                    {
                        data: "Capacity",
                        visible: false,
                        render: function (data) {
                            return data ? parseInt(data).toLocaleString('en-IN') : data;
                        }
                    },
                    {
                        data: "WareHouseId",
                        render: function (data) {
                            return `
                                <div class="d-flex justify-content-center gap-1">
                                    <button class="btn btn-sm btn-primary btn-view" data-id="${data}" data-bs-toggle="tooltip" title="View Warehouse">
                                        <i class="bi bi-eye-fill"></i>
                                    </button>
                                    <button class="btn btn-sm btn-secondary btn-edit" data-id="${data}" data-bs-toggle="tooltip" title="Edit Warehouse">
                                        <i class="bi bi-pencil-square"></i>
                                    </button>
                                    <button class="btn btn-sm btn-danger btn-delete" data-id="${data}" data-bs-toggle="tooltip" title="Delete Warehouse">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            `;
                        }
                    }
                ],
                columnDefs: [
                    { orderable: false, targets: [0, 13] },
                    { className: "text-center", targets: "_all" },
                    { type: 'date', targets: 7 }
                ],
                buttons: getTableButtons(),
                drawCallback: function () {
                    setTimeout(utils.initTooltips, 100);
                    loadAllCityData();
                },
                initComplete: function () {
                    setTimeout(utils.initTooltips, 100);
                }
            });

            // Add date range picker
            addDateRangePicker();
        }

        // ================= TABLE BUTTONS CONFIGURATION =================
        function getTableButtons() {
            const baseConfig = {
                columns: ':visible:not(:first-child):not(:last-child):not(:nth-child(5))',
                rows: (idx, data) => selectedWarehouseIds.has(data.WareHouseId),
                action: function (e, dt, button, config) {
                    if (selectedWarehouseIds.size === 0) {
                        toastr.warning("Please select at least one warehouse before exporting.", "No Selection");
                        return;
                    }
                    $.fn.dataTable.ext.buttons[config.extend].action.call(this, e, dt, button, config);
                }
            };

            return [
                createPrintButton(baseConfig),
                createPdfButton(baseConfig),
                createExcelButton(baseConfig),
                createCsvButton(baseConfig)
            ];
        }

        function createPrintButton(baseConfig) {
            return {
                extend: 'print',
                text: '<i class="bi bi-printer-fill text-dark fs-5" data-bs-toggle="tooltip" title="Print"></i>',
                title: '',
                exportOptions: {
                    columns: ':visible:not(:first-child):not(:last-child):not(:nth-child(5))',
                    rows: function (idx, data, node) {
                        return selectedWarehouseIds.has(data.WareHouseId);
                    },
                    format: {
                        body: function (data, row, column, node) {
                            // Reset serial counter for each export
                            if (!this.serialCounter) {
                                this.serialCounter = 1;
                            }

                            // For serial number column (index 1)
                            if (column === 1) {
                                var serial = this.serialCounter;
                                this.serialCounter++;
                                return serial.toString();
                            }

                            // For city column (index 6) - get actual city name
                            if (column === 6) {
                                const cityKey = `${row.CountryCode}_${row.StateCode}_${row.CityId}`;
                                return cityMap.get(cityKey) || "N/A";
                            }

                            return data;
                        }
                    }
                },
                action: function (e, dt, button, config) {
                    if (selectedWarehouseIds.size === 0) {
                        toastr.warning("Please select at least one warehouse before printing.", "No Selection");
                        return;
                    }
                    $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                },
                customize: function (win) {
                    // Reset serial counter
                    this.serialCounter = 1;

                    $(win.document.body).prepend(
                        '<h2 style="text-align: center; margin-bottom: 10px;">Warehouse List</h2>' +
                        '<p style="text-align: center; margin-bottom: 20px; color: #666;">Generated Date: ' + new Date().toLocaleDateString("en-GB") + '</p>' +
                        '<hr style="margin-bottom: 20px;">'
                    );

                    $(win.document.body).find('table')
                        .css('border', '1px solid black').css('border-collapse', 'collapse').css('width', '100%')
                        .find('th, td').css('border', '1px solid black').css('padding', '8px').css('text-align', 'center');

                    $(win.document.body).find('th')
                        .css('background-color', 'black').css('color', 'white').css('font-weight', 'bold');
                }
            };
        }

        function createPdfButton(baseConfig) {
            return {
                extend: 'pdfHtml5',
                text: '<i class="bi bi-file-earmark-pdf text-danger fs-5" data-bs-toggle="tooltip" title="Export PDF"></i>',
                title: 'WareHouse',
                exportOptions: {
                    columns: ':visible:not(:first-child):not(:last-child):not(:nth-child(5))',
                    rows: function (idx, data, node) {
                        return selectedWarehouseIds.has(data.WareHouseId);
                    },
                    format: {
                        body: function (data, row, column, node) {
                            if (!this.serialCounter) {
                                this.serialCounter = 1;
                            }

                            if (column === 1) {
                                var serial = this.serialCounter;
                                this.serialCounter++;
                                return serial.toString();
                            }

                            if (column === 6) {
                                const cityKey = `${row.CountryCode}_${row.StateCode}_${row.CityId}`;
                                return cityMap.get(cityKey) || "N/A";
                            }

                            return data;
                        }
                    }
                },
                action: function (e, dt, button, config) {
                    if (selectedWarehouseIds.size === 0) {
                        toastr.warning("Please select at least one warehouse before exporting.", "No Selection");
                        return;
                    }
                    $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                },
                customize: function (doc) {
                    // Reset serial counter
                    this.serialCounter = 1;

                    doc.content.splice(0, 0,
                        { text: 'Warehouse List', alignment: 'center', fontSize: 16, bold: true, margin: [0, 0, 0, 10] },
                        { text: 'Generated Date: ' + new Date().toLocaleDateString("en-GB"), alignment: 'center', margin: [0, 0, 0, 15] }
                    );

                    doc.styles.tableHeader.fillColor = 'black';
                    doc.styles.tableHeader.color = 'white';
                    doc.styles.tableHeader.alignment = 'center';
                    doc.styles.tableHeader.bold = true;

                    doc.content[2].layout = {
                        hLineWidth: i => 0.5, vLineWidth: i => 0.5,
                        hLineColor: i => '#000000', vLineColor: i => '#000000',
                        paddingLeft: i => 5, paddingRight: i => 5
                    };
                }
            };
        }

        function createExcelButton(baseConfig) {
            return {
                extend: 'excelHtml5',
                text: '<i class="bi bi-file-earmark-excel text-success fs-5" data-bs-toggle="tooltip" title="Export Excel"></i>',
                title: 'Warehouse List',
                messageTop: `Generated Date: ${moment().format("DD/MM/YYYY")}`,
                exportOptions: {
                    columns: ':visible:not(:first-child):not(:last-child):not(:nth-child(5))',
                    rows: function (idx, data, node) {
                        return selectedWarehouseIds.has(data.WareHouseId);
                    },
                    format: {
                        body: function (data, row, column, node) {
                            if (!this.serialCounter) {
                                this.serialCounter = 1;
                            }

                            if (column === 1) {
                                var serial = this.serialCounter;
                                this.serialCounter++;
                                return serial.toString();
                            }

                            if (column === 6) {
                                const cityKey = `${row.CountryCode}_${row.StateCode}_${row.CityId}`;
                                return cityMap.get(cityKey) || "N/A";
                            }

                            return data;
                        }
                    }
                },
                action: function (e, dt, button, config) {
                    if (selectedWarehouseIds.size === 0) {
                        toastr.warning("Please select at least one warehouse before exporting Excel.", "No Selection");
                        return;
                    }
                    $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                },
                customize: function (xlsx) {
                    const sheet = xlsx.xl.worksheets['sheet1.xml'];
                    let serial = 1;

                    $('row', sheet).each(function () {
                        const rowIndex = parseInt($(this).attr('r'));
                        if (rowIndex === 3) {
                            // Header row - insert "Sr. No" at the beginning
                            $(this).find('c:first').before('<c t="inlineStr" s="2"><is><t>Sr. No</t></is></c>');
                        } else if (rowIndex > 3) {
                            // Data rows - insert serial numbers
                            $(this).find('c:first').before(`<c t="inlineStr" s="2"><is><t>${serial}</t></is></c>`);
                            serial++;
                        }
                    });

                    // Style header rows
                    $('row[r="1"] c, row[r="2"] c', sheet).attr('s', '51');
                    $('row[r="3"] c', sheet).attr('s', '2'); // Style for header row with bold
                }
            };
        }

        function createCsvButton(baseConfig) {
            return {
                extend: 'csvHtml5',
                text: '<i class="bi bi-filetype-csv text-success fs-5" data-bs-toggle="tooltip" title="Export CSV"></i>',
                title: 'Warehouse List',
                message: 'Generated Date: ' + new Date().toLocaleDateString("en-GB"),
                exportOptions: {
                    columns: ':visible:not(:first-child):not(:last-child):not(:nth-child(5))',
                    rows: function (idx, data, node) {
                        return selectedWarehouseIds.has(data.WareHouseId);
                    },
                    format: {
                        body: function (data, row, column, node) {
                            if (!this.serialCounter) {
                                this.serialCounter = 1;
                            }

                            if (column === 1) {
                                var serial = this.serialCounter;
                                this.serialCounter++;
                                return serial.toString();
                            }

                            if (column === 6) {
                                const cityKey = `${row.CountryCode}_${row.StateCode}_${row.CityId}`;
                                return cityMap.get(cityKey) || "N/A";
                            }

                            return data;
                        }
                    }
                },
                action: function (e, dt, button, config) {
                    if (selectedWarehouseIds.size === 0) {
                        toastr.warning("Please select at least one warehouse before exporting CSV.", "No Selection");
                        return;
                    }
                    $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                }
            };
        }

        // ================= CITY DATA MANAGEMENT =================
        function loadAllCityData() {
            $('.city-name').each(function () {
                const $span = $(this);
                const country = $span.data('country');
                const state = $span.data('state');
                const cityId = $span.data('cityid');
                const cityKey = `${country}_${state}_${cityId}`;

                if (!country || !state || !cityId) {
                    $span.text("N/A");
                    return;
                }

                if (cityMap.has(cityKey)) {
                    $span.text(cityMap.get(cityKey));
                    return;
                }

                $.get(CONFIG.urls.getCities, { countryCode: country, stateCode: state, CityId: cityId }, function (city) {
                    const cityName = city && city.Name ? city.Name : "Unknown";
                    $span.text(cityName);
                    cityMap.set(cityKey, cityName);
                });
            });
        }
        //========= Date Range Picker====
        function addDateRangePicker() {
            $('#warehouseTable_wrapper').prepend(`
        <div class="input-group mb-2 mt-3" style="max-width: 280px;">
            <span class="input-group-text bg-primary text-white">
                <i class="bi bi-calendar-date"></i>
            </span>
            <input type="text" id="warehouseDateRange" class="form-control" placeholder="Select date range" readonly />
        </div>
    `);

            // Initialize date range picker
            $('#warehouseDateRange').daterangepicker({
                autoUpdateInput: false,
                locale: { cancelLabel: 'Clear' },
                ranges: {
                    'Today': [moment(), moment()],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
                    'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
                    'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]
                }
            });

            // Custom filter function for DataTable
            $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
                if (settings.nTable.id !== "warehouseTable") return true;

                var dateRange = $('#warehouseDateRange').val();
                if (!dateRange) return true;

                var minMax = dateRange.split(' to ');
                var min = moment(minMax[0], 'DD/MM/YYYY');
                var max = moment(minMax[1], 'DD/MM/YYYY');

                // Added Date column index = 7 (0-based)
                var date = moment(data[7], 'DD/MM/YYYY');
                return date.isBetween(min, max, 'day', '[]');
            });

            // Apply filter on selection
            $('#warehouseDateRange').on('apply.daterangepicker', function (ev, picker) {
                $(this).val(picker.startDate.format('DD/MM/YYYY') + ' to ' + picker.endDate.format('DD/MM/YYYY'));
                table.draw();
            });

            // Clear filter
            $('#warehouseDateRange').on('cancel.daterangepicker', function () {
                $(this).val('');
                table.draw();
            });
        }

        // ================= EVENT HANDLERS =================
        function setupEventHandlers() {
            // Checkbox selection
            $("#WHselectAll").on("change", function () {
                $(".row-select").prop("checked", $(this).prop("checked")).trigger("change");
            });

            $(document).on("change", ".row-select", function () {
                const id = parseInt($(this).val());
                $(this).prop("checked") ? selectedWarehouseIds.add(id) : selectedWarehouseIds.delete(id);
                $("#WHselectAll").prop("checked", selectedWarehouseIds.size === $(".row-select").length);
            });

            // Location dropdowns
            $('#CountryId').change(function () {
                const countryCode = $(this).val();
                if (!countryCode) {
                    $("#StateId, #CityId").empty().append('<option value="">-- Select --</option>');
                    return;
                }

                $.getJSON(CONFIG.urls.getStates, { CountryCode: countryCode }, function (states) {
                    $('#StateId').empty().append('<option value="">Select State</option>');
                    states.forEach(state => {
                        $('#StateId').append(`<option value="${state.Iso2}">${state.Name}</option>`);
                    });
                });
            });

            $('#StateId').change(function () {
                const countryCode = $('#CountryId').val();
                const stateCode = $(this).val();

                $.getJSON(CONFIG.urls.getCities, { countryCode, stateCode }, function (data) {
                    const cities = typeof data === "string" ? JSON.parse(data) : data;
                    $('#CityId').empty().append('<option value="">Select City</option>');
                    cities.forEach(city => {
                        $('#CityId').append(`<option value="${city.Id}">${city.Name}</option>`);
                    });
                });
            });

            // Form interactions
            $(document).on("input change", "#addWarehouseForm .form-control, #addWarehouseForm .form-select", function () {
                const fieldName = $(this).attr("name") || $(this).attr("id");
                utils.clearFieldError(fieldName, `Warehouse${fieldName}Error`);
            });

            $('#addWarehouseModal').on('hidden.bs.modal', function () {
                $(CONFIG.selectors.form)[0].reset();
                utils.clearAllErrors(CONFIG.selectors.form);
                $("#WareHouseId").remove();
            });

            // Add warehouse button
            $("#btnAddWarehouse").on("click", function () {
                openAddWarehouseModal();
            });

            // Form submission
            $(CONFIG.selectors.form).on("submit", function (e) {
                e.preventDefault();
                submitWarehouseForm();
            });

            // Action buttons
            $(document).on("click", ".btn-view", function () {
                viewWarehouse($(this).data("id"));
            });

            $(document).on("click", ".btn-edit", function () {
                editWarehouse($(this).data("id"));
            });

            $(document).on("click", ".btn-delete", function () {
                deleteWarehouse($(this).data("id"));
            });
        }

        // ================= MODAL OPERATIONS =================
        function openAddWarehouseModal() {
            $(CONFIG.selectors.form)[0].reset();
            $("#warehouseModalTitle").text("Add Warehouse");
            $("#warehouseModalSubmitBtn").html('<i class="bi bi-check-circle me-2 text-white"></i>Save');

            // Load next code and countries
            $.get(CONFIG.urls.getNextCode, function (res) {
                res.success && $("#WarehouseCode").val(res.code);
            });

            loadCountries();
            $(CONFIG.selectors.modal).modal("show");
        }

        function loadCountries() {
            $.getJSON(CONFIG.urls.getCountries, function (countries) {
                $('#CountryId').empty().append('<option value="">Select Country</option>');
                countries.forEach(country => {
                    $('#CountryId').append(`<option value="${country.iso2}">${country.name}</option>`);
                });
            });
        }

        function submitWarehouseForm() {
            utils.clearAllErrors(CONFIG.selectors.form);

            if (!validators.warehouseForm(CONFIG.selectors.form)) {
                return;
            }

            const formData = $(CONFIG.selectors.form).serialize();
            const isEdit = $("#WareHouseId").length > 0;
            const url = isEdit ? CONFIG.urls.updateWarehouse : CONFIG.urls.addWarehouse;

            $.ajax({
                url: url,
                type: 'POST',
                data: formData,
                success: function (res) {
                    if (res.success) {
                        $(CONFIG.selectors.modal).modal("hide");
                        table.ajax.reload(null, false);
                        Swal.fire({ title: "Success", text: res.message, icon: "success", showConfirmButton: false, timer: 2000 });
                    } else {
                        handleFormError(res);
                    }
                },
                error: function () {
                    Swal.fire({ title: "Error", text: "Something went wrong!", icon: "error", confirmButtonText: "OK" });
                }
            });
        }

        function handleFormError(res) {
            $(".text-danger.field-error").remove();
            $("input, select").removeClass("is-invalid");

            if (res.field) {
                const $input = $(`[name=${res.field}]`);
                $input.addClass("is-invalid");
                $(`#WarehouseNameError`).html(res.message || "Warehouse name already exists.").removeClass("d-none");

                $input.focus();
                $('html, body').animate({ scrollTop: $input.offset().top - 100 }, 300);
            } else {
                Swal.fire({ title: "Error", text: res.message, icon: "error", confirmButtonText: "OK" });
            }
        }

        // ================= CRUD OPERATIONS =================
        function viewWarehouse(id) {
            $.get(CONFIG.urls.viewWarehouse, { id }, function (res) {
                if (res.success) {
                    const data = res.data;
                    populateViewModal(data);
                    $(CONFIG.selectors.viewModal).modal("show");
                } else {
                    Swal.fire("Error", res.message, "error");
                }
            });
        }

        function populateViewModal(data) {
            $("#vwCode").val(data.WarehouseCode);
            $("#vwName").val(data.WarehouseName);
            $("#vwAddress").val(data.Address);
            $("#vwPhone").val(data.Phone);
            $("#vwEmail").val(data.Email);
            $("#vwDesc").val(data.Description);
            $("#vwAddedDates").val(utils.formatSqlDate(data.AddedDate));
            $("#vwAddedBy").val(data.AddedBy);

            // Load city name
            if (data.CountryCode && data.StateCode && data.CityId) {
                $.get(CONFIG.urls.getCities, { countryCode: data.CountryCode, stateCode: data.StateCode, CityId: data.CityId }, function (cityRes) {
                    $("#vwCity").val(cityRes && cityRes.Name ? cityRes.Name : "N/A");
                });
            } else {
                $("#vwCity").val("N/A");
            }
        }

        function editWarehouse(id) {
            $.get(CONFIG.urls.viewWarehouse, { id }, function (res) {
                if (res.success) {
                    const data = res.data;
                    populateEditModal(data);
                } else {
                    Swal.fire("Error", res.message, "error");
                }
            });
        }

        function populateEditModal(data) {
            $("#WarehouseCode").val(data.WarehouseCode);
            $("[name='WarehouseName']").val(data.WarehouseName);
            $("[name='Address']").val(data.Address);
            $("[name='Phone']").val(data.Phone);
            $("[name='Email']").val(data.Email);
            $("[name='Description']").val(data.Description);

            if (!$("#WareHouseId").length) {
                $("<input>").attr({ type: "hidden", id: "WareHouseId", name: "WareHouseId", value: data.WareHouseId }).appendTo(CONFIG.selectors.form);
            } else {
                $("#WareHouseId").val(data.WareHouseId);
            }

            $("#warehouseModalTitle").text("Update Warehouse");
            $("#warehouseModalSubmitBtn").html('<i class="bi bi-check-circle me-2 text-white"></i>Update');

            // FIXED: Load countries, states, and cities sequentially
            $.getJSON(CONFIG.urls.getCountries, function (countries) {
                $('#CountryId').empty().append('<option value="">Select Country</option>');
                countries.forEach(country => {
                    $('#CountryId').append(`<option value="${country.iso2}">${country.name}</option>`);
                });

                // Set country and load states
                $("#CountryId").val(data.CountryCode);
                if (data.CountryCode) {
                    $.getJSON(CONFIG.urls.getStates, { CountryCode: data.CountryCode }, function (states) {
                        $("#StateId").empty().append('<option value="">Select State</option>');
                        states.forEach(state => {
                            $("#StateId").append(`<option value="${state.Iso2}">${state.Name}</option>`);
                        });

                        // Set state and load cities
                        $("#StateId").val(data.StateCode);
                        if (data.StateCode) {
                            $.getJSON(CONFIG.urls.getCities, {
                                countryCode: data.CountryCode,
                                stateCode: data.StateCode
                            }, function (cities) {
                                const citiesData = typeof cities === "string" ? JSON.parse(cities) : cities;
                                $("#CityId").empty().append('<option value="">Select City</option>');
                                citiesData.forEach(city => {
                                    $("#CityId").append(`<option value="${city.Id}">${city.Name}</option>`);
                                });
                                $("#CityId").val(data.CityId);
                            });
                        }
                    });
                }
            });

            $(CONFIG.selectors.modal).modal("show");
        }

        function deleteWarehouse(id) {
            const swalWithBootstrapButtons = Swal.mixin({
                customClass: { confirmButton: "btn btn-primary me-2", cancelButton: "btn btn-danger" },
                buttonsStyling: false
            });

            swalWithBootstrapButtons.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes",
                cancelButtonText: "Cancel",
                reverseButtons: false,
                timer: 10000,
                showCloseButton: true
            }).then((result) => {
                if (result.isConfirmed) {
                    performDelete(id, swalWithBootstrapButtons);
                } else if (result.dismiss === Swal.DismissReason.cancel) {
                    swalWithBootstrapButtons.fire({ title: "Cancelled", text: "Your warehouse record is safe", icon: "error", timer: 3000 });
                }
            });
        }

        function performDelete(id, swalInstance) {
            $.ajax({
                url: CONFIG.urls.deleteWarehouse,
                type: 'POST',
                data: { id },
                success: function (res) {
                    if (res.success) {
                        swalInstance.fire({ title: "Deleted!", text: res.message, icon: "success", showConfirmButton: false, timer: 3000 });
                        table.ajax.reload(null, false);
                    } else {
                        swalInstance.fire({ title: "Error!", text: res.message, icon: "error", timer: 4000 });
                    }
                },
                error: function () {
                    swalInstance.fire({ title: "Error!", text: "Something went wrong while deleting.", icon: "error", timer: 4000 });
                }
            });
        }

        // ================= INITIALIZATION =================
        function initialize() {
            initializeDataTable();
            setupEventHandlers();
            setTimeout(utils.initTooltips, 500);
        }

        // Start the application
        initialize();
    });
</script>