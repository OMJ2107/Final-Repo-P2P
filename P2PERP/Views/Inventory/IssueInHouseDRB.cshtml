@model P2PLibray.Inventory.IssueItemViewModelDRB
@{
    ViewBag.Title = "Issue In-House";
}


<style>
    .form-control, .form-select {
        border-radius: 0.5rem;
        border: 1px solid #ced4da;
        transition: all 0.3s ease;
    }

        .form-control:focus, .form-select:focus {
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.15);
            border-color: #86b7fe;
        }

    .btn {
        border-radius: 0.5rem;
        transition: all 0.3s ease;
    }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

    .card {
        border: none;
    }

    .table th {
        border-top: none;
        font-weight: 600;
    }

    .table-responsive {
        border-radius: 0.5rem;
        overflow: hidden;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .form-control, .form-select, .btn {
            font-size: 0.9rem;
        }

        .card-body {
            padding: 1.5rem;
        }
    }
</style>

<div class="container mt-4">
    <!-- Header -->
    <div class="card-header bg-primary text-white d-flex justify-content-center align-items-center rounded-top p-3">
        <h3 class="modal-title fw-bold text-white mb-0">Transfer In-House</h3>
    </div>

    <!-- Main Card -->
    <div class="card shadow-lg border-0 rounded">
        <div class="card-body p-4">
            <form id="issueItemForm">
                <!-- First Row - Three Columns -->
                <div class="row g-3 mb-4">
                    <div class="col-md-4">
                        <label class="form-label fw-bold text-primary">Issue Code</label>
                        <input type="text" id="IssueCode" class="form-control form-control-lg bg-light text-dark shadow-sm" readonly />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label fw-bold text-primary">Issue Date</label>
                        <input type="date" id="IssueDate" class="form-control form-control-lg bg-light text-dark shadow-sm" value="@DateTime.Now.ToString("yyyy-MM-dd")" readonly />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label fw-bold text-primary">Department<span class="text-danger">*</span></label>
                        <select class="form-select form-select-lg dept-select shadow-sm" id="Department">
                            <option value="">Select Department</option>
                        </select>
                        <div id="deptError" class="text-danger mt-1 small" style="display:none;"></div>
                    </div>

                </div>

                <!-- Second Row - Three Columns -->
                <div class="row g-3 mb-4">
                    <div class="col-md-4">
                        <label class="form-label fw-bold text-primary">Employee Name<span class="text-danger">*</span></label>
                        <select class="form-select form-select-lg emp-select shadow-sm" id="Employee">
                            <option value="">Select Employee</option>
                        </select>
                        <div id="empError" class="text-danger mt-1 small" style="display:none;"></div>
                    </div>

                    <div class="col-md-4">
                        <label class="form-label fw-bold text-primary">Item Name<span class="text-danger">*</span></label>
                        <select class="form-select form-select-lg item-select shadow-sm" id="ItemName">
                            <option selected value="">Select Item</option>
                        </select>
                        <!-- 🔹 Error message for Item -->
                        <small id="ItemNameError" class="text-danger d-none">Please select an item.</small>
                    </div>

                    <div class="col-md-4">
                        <label class="form-label fw-bold text-primary">Bin Name<span class="text-danger">*</span></label>
                        <select class="form-select form-select-lg item-bin shadow-sm" id="BinName">
                            <option selected value="">Select Bin</option>
                        </select>
                        <!-- 🔹 Error message for Bin -->
                        <small id="BinNameError" class="text-danger d-none">Please select a bin.</small>
                    </div>
                </div>

                <!-- Third Row - Three Columns -->
                <div class="row g-3 mb-4">
                    <div class="col-md-4">
                        <label class="form-label fw-bold text-primary">Item Code</label>
                        <input type="text" id="ItemCode" class="form-control form-control-lg bg-light text-dark shadow-sm" readonly />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label fw-bold text-primary">Category</label>
                        <input type="text" id="ItemCategory" class="form-control form-control-lg bg-light text-dark shadow-sm" readonly />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label fw-bold text-primary">UOM</label>
                        <input type="text" id="UOM" class="form-control form-control-lg bg-light text-dark shadow-sm" readonly />
                    </div>
                </div>

                <!-- Fourth Row - Two Columns + Button -->
                <div class="row g-3 mb-4">
                    <div class="col-md-4">
                        <label class="form-label fw-bold text-primary">Quantity</label>
                        <input type="number"
                               id="Quantity"
                               class="form-control form-control-lg  text-dark shadow-sm"
                               min="1"
                               placeholder="Enter quantity" />
                        <small id="QuantityError" class="text-danger d-none">Quantity must be greater than 0.</small>
                    </div>

                    <div class="col-md-4">
                        <label class="form-label fw-bold text-primary">Unit Price</label>
                        <input type="number" id="PricePerUnit" class="form-control form-control-lg bg-light text-dark shadow-sm" readonly />
                    </div>
                    <div class="col-md-4 d-flex align-items-end">
                        <button type="button" id="btnAddItem" class="btn btn-success btn-lg w-50 shadow-sm">
                            <i class="bi bi-plus-circle me-2"></i> Add Item
                        </button>
                    </div>
                </div>
            </form>
        </div>

        <!-- Items Table -->
        <div class="container-fluid px-4 mt-4">
            <div class="table-responsive rounded shadow-sm">
                <table id="issuedItemsTable" class="table table-hover align-middle mb-0">
                    <thead class="table-primary text-dark">
                        <tr>
                            <th>Item Code</th>
                            <th>Item Name</th>
                            <th>Category</th>
                            <th>UOM</th>
                            <th>Qty</th>
                            <th>Unit Price</th>
                            <th>Amount</th>
                            <th>Bin Name</th>
                            <th class="text-center">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Table rows will be populated dynamically -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Total Amount Display -->
        <div class="container-fluid px-4 mt-4">
            <div class="row justify-content-end">
                <div class="col-md-4">

                    <div class="d-flex justify-content-between align-items-center p-1 bg-light rounded shadow-sm">
                        <label class="fw-bold text-primary mb-0 fs-5">Total Amount:</label>
                        <input type="text" id="TotalAmount" class="form-control w-50 text-center fw-bold fs-5 bg-success text-white border-0" value="0.00" readonly />
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Submit Button -->
    <div class="container-fluid px-4 mt-4 mb-4">
        <div class="d-flex justify-content-center">
            <button type="button" id="btnSubmitIssuedItems" class="btn btn-warning btn-lg px-5 shadow-sm">
                <i class="bi bi-check2-circle me-2"></i> Issue Item 
            </button>
        </div>
    </div>

</div>





<script>
    $(document).ready(function () {

        // Load departments
        $.getJSON("/Inventory/GetDepartmentsDRB", function (response) {
            let $ddl = $(".dept-select");
            $ddl.empty().append('<option value="">Select Department</option>');
            $.each(response, function (i, dept) {
                $ddl.append($("<option>").val(dept.DeptID).text(dept.DepartmentName));
            });
        });

        // Load employees by department
        $(".dept-select").change(function () {
            let deptId = $(this).val();
            let $empSelect = $(".emp-select");

            $empSelect.empty().append('<option value="">Select Employee</option>');

            if (deptId) {
                $.ajax({
                    type: "GET",
                    url: "/Inventory/EmployeesByDepartmentDRB",
                    data: { Did: deptId },
                    dataType: "json",
                    success: function (response) {
                        if (response && response.length > 0) {
                            $.each(response, function (i, emp) {
                                $empSelect.append(
                                    $("<option>").val(emp.StaffCode).text(emp.EmployeeName)
                                );
                            });
                        } else {
                            $empSelect.append('<option value="">No employees found</option>');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error loading employees:", error);
                        Swal.fire("Error", "Failed to load employees for this department.", "error");
                    }
                });
            }
        });

        // Load items
        // Load items (unique)
        $.getJSON("/Inventory/GetInStockItemsDRB", function (response) {
            let $ddl = $(".item-select");
            $ddl.empty().append('<option value="">Select Item</option>');

            let uniqueItems = new Set();
            $.each(response, function (i, item) {
                if (!uniqueItems.has(item.ItemCode)) {
                    uniqueItems.add(item.ItemCode);
                    $ddl.append($("<option>")
                        .val(item.ItemCode)
                        .text(item.ItemName)
                        .data("details", item));
                }
            });
        });


        // Load IssueCode
        $.getJSON("/Inventory/getIssueCodeDRB", function (response) {
            $("#IssueCode").val(response[0].IssueCode);


        });




        // When item selected → auto-fill details
        $(".item-select").change(function () {
            let selected = $(this).find("option:selected").data("details");
            if (selected) {
                var item = $("#ItemCode").val(selected.ItemCode);
                $("#ItemCategory").val(selected.ItemCategoryName);
                $("#UOM").val(selected.UOMName);
                $("#PricePerUnit").val(selected.UnitPrice);
            } else {
                $("#ItemCode, #ItemCategory, #UOM, #Quantity, #PricePerUnit").val("");
            }
        });

        // Load Bins by Items
        //  Global stock tracker
        let binStockMap = {};  // { BinCode: remainingQty }

        $(".item-select").change(function () {
            let ItemId = $(this).val();
            let $BinSelect = $(".item-bin");

            $BinSelect.empty().append('<option value="">Select Bin</option>');

            if (ItemId) {
                $.ajax({
                    type: "GET",
                    url: "/Inventory/GetBinBasedOnItemDRB",
                    data: { itemcode: ItemId },
                    dataType: "json",
                    success: function (response) {
                        if (response && response.length > 0) {
                            $.each(response, function (i, emp) {

                                // Check if we already reduced stock earlier
                                let remaining = binStockMap[emp.BinCode] !== undefined
                                    ? binStockMap[emp.BinCode]
                                    : emp.CurrentItems;

                                // Save in map
                                binStockMap[emp.BinCode] = remaining;

                                // If stock > 0 show in dropdown
                                if (remaining > 0) {
                                    $BinSelect.append(
                                        $("<option>")
                                            .val(emp.BinCode)
                                            .text(emp.BinName + " (Available: " + remaining + ")")
                                            .data("binname", emp.BinName)
                                            .data("currentitems", remaining)
                                    );
                                }
                            });
                        } else {
                            $BinSelect.append('<option value="">No Bin found</option>');
                        }
                    }
                });
            }
        });


    //Add Item Button
        $(document).ready(function () {

            // Global bin stock map (assumes you declare/initialize it elsewhere if needed)
            window.binStockMap = window.binStockMap || {};

            // Add item to table (delegated so it works even if the button is re-rendered)
            $(document).on("click", "#btnAddItem", function (e) {
               

                let code = $("#ItemCode").val();
                let name = $("#ItemName option:selected").text();
                let cat = $("#ItemCategory").val();
                let uom = $("#UOM").val();
                let qty = parseInt($("#Quantity").val());
                let price = parseFloat($("#PricePerUnit").val()) || 0;
                let amount = (qty * price).toFixed(2);

                let $bin = $("#BinName option:selected");
                let binCode = $bin.val();
                let binName = $bin.data("binname");
                let currentItems = $bin.data("currentitems") || 0;

                // 🔹 Item Dropdown Validation
                if (!$("#ItemName").val()) {
                    $("#ItemName").addClass("is-invalid");
                    $("#ItemNameError").removeClass("d-none").text("Please select an item.");
                    return;
                } else {
                    $("#ItemName").removeClass("is-invalid");
                    $("#ItemNameError").addClass("d-none");
                }

                // 🔹 Bin Dropdown Validation
                if (!$("#BinName").val()) {
                    $("#BinName").addClass("is-invalid");
                    $("#BinNameError").removeClass("d-none").text("Please select a bin.");
                    return;
                } else {
                    $("#BinName").removeClass("is-invalid");
                    $("#BinNameError").addClass("d-none");
                }

                // 🔹 Quantity Validation (Zero or Negative)
                if (isNaN(qty) || qty <= 0) {
                    $("#Quantity").addClass("is-invalid");
                    $("#QuantityError").removeClass("d-none").text("Quantity must be greater than 0!");
                    return;
                } else {
                    $("#Quantity").removeClass("is-invalid");
                    $("#QuantityError").addClass("d-none");
                }

                // 🔹 Basic Validation (keep your original logic)
                if (!code || !qty || !price || !binCode) {
                    $("#QuantityError").removeClass("d-none").text("Select item, bin, and enter valid quantity!");
                    return;
                }

                // 🔹 Stock Limit Validation
                if (qty > currentItems) {
                    $("#QuantityError").removeClass("d-none").text("Quantity exceeds available stock in selected bin!");
                    return;
                }

                //  All validations passed
                $("#ItemNameError, #BinNameError, #QuantityError").addClass("d-none");
                $("#ItemName, #BinName, #Quantity").removeClass("is-invalid");

                //  Add row to Issued Items Table (your original markup)
                $("#issuedItemsTable tbody").append(`
            <tr data-bincode="${binCode}">
                <td>${code}</td>
                <td>${name}</td>
                <td>${cat}</td>
                <td>${uom}</td>
                <td>${qty}</td>
                <td>${price}</td>
                <td>₹${amount}</td>
                <td>${binName}</td>
                <td class="text-center">
                    <button type="button" class="btn btn-sm btn-danger btn-delete">
                        <i class="bi bi-trash"></i>
                    </button>
                </td>
            </tr>
        `);

                // 🔹 Deduct stock from dropdown + global map
                let newQty = currentItems - qty;
                binStockMap[binCode] = newQty; // update global tracker

                if (newQty > 0) {
                    // update option text and data
                    $bin.data("currentitems", newQty);
                    // If option element is not the selected one (some browsers), update it by selector:
                    $("#BinName option[value='" + binCode + "']").data("currentitems", newQty).text(binName + " (Available: " + newQty + ")");
                } else {
                    // remove the option safely
                    $("#BinName option[value='" + binCode + "']").remove();
                }

                // 🔹 Update total amount (call your function if exists)
                if (typeof updateTotal === "function") {
                    updateTotal();
                }

                // 🔹 Reset form fields - also trigger change so Select2 or other plugins update UI
                $("#ItemName").val("").trigger("change");
                $("#BinName").val("").trigger("change");
                $("#ItemCode").val("");
                $("#ItemCategory").val("");
                $("#UOM").val("");
                $("#Quantity").val("");
                $("#PricePerUnit").val("");

                // Optional: put focus back to ItemName for quick add
                $("#ItemName").focus();
            });


            // Real-time validation 
            $(document).on("change input", "#ItemName", function () {
                // If value becomes valid, hide error
                if ($(this).val()) {
                    $(this).removeClass("is-invalid");
                    $("#ItemNameError").addClass("d-none");
                }
            });

            $(document).on("change input", "#BinName", function () {
                if ($(this).val()) {
                    $(this).removeClass("is-invalid");
                    $("#BinNameError").addClass("d-none");
                }
            });

            $(document).on("input", "#Quantity", function () {
                let qty = parseInt($(this).val());
                if (!isNaN(qty) && qty > 0) {
                    $(this).removeClass("is-invalid");
                    $("#QuantityError").addClass("d-none");
                }
            });

           
            // Select2 compatibility (if you use Select2)
            if ($.fn.select2) {
                // hide error when select2 selection occurs
                $(document).on("select2:select", "#ItemName", function () {
                    $(this).removeClass("is-invalid");
                    $("#ItemNameError").addClass("d-none");
                });
                $(document).on("select2:select", "#BinName", function () {
                    $(this).removeClass("is-invalid");
                    $("#BinNameError").addClass("d-none");
                });

            
            }

            // Optional: Delete row handler (delegated)
            $(document).on("click", ".btn-delete", function () {
                // If you need to return stock to bin, handle it here.
                $(this).closest("tr").remove();
                if (typeof updateTotal === "function") updateTotal();
            });

        });


        // Render quantity based on Bin change
        $(document).on("change", ".item-bin", function () {
            let currentItems = $(this).find(":selected").data("currentitems") || 0;
            $("#Quantity").val(currentItems);   //show in textbox
        });








        // Function to calculate and display total amount
        function updateTotal() {
            let total = 0;
            $("#issuedItemsTable tbody tr").each(function () {
                let amountText = $(this).find("td:eq(6)").text(); // Correct index
                amountText = amountText.replace(/[^\d.-]/g, ""); // Remove ₹ or commas
                let amt = parseFloat(amountText) || 0;
                total += amt;
            });
            $("#TotalAmount").val("₹ " + total.toFixed(2));
        }





        // Delete row (with SweetAlert confirm) — robust + debug
        $("#issuedItemsTable").on("click", ".btn-delete", function (e) {
            // Stop form submit / other handlers from interfering
            e.preventDefault();
            e.stopImmediatePropagation();

            // Find the row
            let row = $(this).closest("tr");
            if (!row || row.length === 0) {
                console.error("Delete: couldn't find the row.");
                return;
            }

            // Safely read quantity (fallback to 0)
            let qtyText = row.find("td:eq(4)").text() || row.find("td").eq(4).text();
            let qty = parseInt(qtyText.toString().trim(), 10);
            if (isNaN(qty)) {
                console.warn("Delete: quantity parse failed, defaulting to 0. qtyText:", qtyText);
                qty = 0;
            }

            // Safely read binName (trimmed)
            let binName = (row.find("td:eq(7)").text() || row.find("td").eq(7).text() || "").toString().trim();

            // Debug info to console
            console.log("Delete clicked — qty:", qty, "binName:", binName, "row:", row);

            // Check Swal is available and has fire
            if (typeof Swal === "undefined" || typeof Swal.fire !== "function") {
                console.error("SweetAlert2 (Swal.fire) not found. Make sure SweetAlert2 script is loaded.");
                // Fallback: simple confirm
                if (!confirm("Are you sure you want to delete this item?")) return;
                performDelete();
                return;
            }

            Swal.fire({
                title: "Are you sure?",
                text: "This item will be removed from the list.",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, delete it",
                cancelButtonText: "Cancel",
                customClass: {
                    cancelButton: 'btn btn-danger'
                },
            }).then((result) => {
                if (result && result.isConfirmed) {
                    performDelete();
                } else {
                    console.log("Delete cancelled by user.");
                }
            });

            // performDelete is a local function so row/qty/binName closure is used safely
            function performDelete() {
                // Optional: smooth fade out then remove
                row.fadeOut(200, function () {
                    row.remove();
                    // update totals if function exists
                    try {
                        if (typeof updateTotal === "function") {
                            updateTotal();
                        } else {
                            console.warn("updateTotal() not found.");
                        }
                    } catch (err) {
                        console.error("Error calling updateTotal():", err);
                    }

                    // Restore Bin stock
                    $("#BinName option").each(function () {
                        try {
                            if ($(this).data("binname") === binName) {
                                let restored = (parseInt($(this).data("currentitems"), 10) || 0) + qty;
                                $(this).data("currentitems", restored);
                                $(this).text(binName + " (Available: " + restored + ")");
                            }
                        } catch (err) {
                            console.error("Error restoring bin option:", err, this);
                        }
                    });
                });
            }
        });


        // Real-time validation setup
        $(document).ready(function () {

            // Hide errors when user selects valid department or employee
            $("#Department").change(function () {
                if ($(this).val()) {
                    $("#deptError").hide().text("");
                }
            });

            $("#Employee").change(function () {
                if ($(this).val()) {
                    $("#empError").hide().text("");
                }
            });

            // Submit issued items
            $("#btnSubmitIssuedItems").click(function (e) {
                e.preventDefault();

                // Clear previous validation messages
                $("#deptError").hide().text("");
                $("#empError").hide().text("");
                $("#itemError").remove();

                let header = {
                    IssueCode: $("#IssueCode").val(),
                    IssueDate: $("#IssueDate").val(),
                    StaffCode: $("#Employee").val(),
                    Department: $("#Department").val()
                };

                let items = [];
                $("#issuedItemsTable tbody tr").each(function () {
                    let row = $(this).find("td");
                    items.push({
                        IssueCode: header.IssueCode,
                        BinCode: $(this).data("bincode"),
                        ItemCode: $(row[0]).text(),
                        Quantity: $(row[4]).text(),
                        UnitPrice: $(row[5]).text(),
                        Amount: $(row[6]).text()
                    });
                });

                //  Validation flags
                let isValid = true;

                // Department validation (below dropdown)
                if (!header.Department) {
                    $("#deptError")
                        .text("Please select a department.")
                        .show();
                    isValid = false;
                }

                // Employee validation (below dropdown)
                if (!header.StaffCode) {
                    $("#empError")
                        .text("Please select an employee.")
                        .show();
                    isValid = false;
                }

               

                // Stop if invalid
                if (!isValid) return;

                //  Save Issue Header
                $.ajax({
                    url: "/Inventory/SaveIssueHeaderDRB",
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(header),
                    success: function () {
                        //  Save Issue Details
                        $.ajax({
                            url: "/Inventory/SaveIssueDetailsDRB",
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(items),
                            success: function () {
                                Swal.fire({
                                    icon: "success",
                                    title: "Items Issued Successfully!",
                                    showConfirmButton: false,
                                    timer: 2000
                                });

                                // Reset form & table
                                $("#issuedItemsTable tbody").empty();
                                $("#TotalAmount").val("0.00");
                                $("#Department").val("");
                                $("#Employee").val("");
                                $("#deptError, #empError, #itemError").hide().text("");
                            }
                        });
                    }
                });
            });


        });



    });

    // Prevent entering quantity more than CurrentItems
    $(document).on("input", "#Quantity", function () {
        let maxQty = $("#BinName option:selected").data("currentitems") || 0;
        let entered = parseInt($(this).val()) || 0;

        if (entered > maxQty) {
            Swal.fire("Warning", "Quantity cannot exceed available stock in bin!", "warning");
            $(this).val(maxQty); // reset to max
        }
    });

    //Show error msg when quantity is zero or  negative
    $(document).ready(function () {
        $("#Quantity").on("input", function () {
            let qty = parseFloat($(this).val());
            let $error = $("#QuantityError");

            // Show error only if value is entered and it's 0 or negative
            if ($(this).val() !== "" && (isNaN(qty) || qty <= 0)) {
                $error.removeClass("d-none");        // show error message
                $(this).addClass("is-invalid");      // red border
            } else {
                $error.addClass("d-none");           // hide error message
                $(this).removeClass("is-invalid");   // remove red border
            }
        });
    });


</script>