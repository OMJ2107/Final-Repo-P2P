@{
    ViewBag.Title = "QCheckDashboardNAM";
}



<style>


    button.dt-button.processing,
    div.dt-button.processing {
        pointer-events: auto !important;
        opacity: 1 !important;
        background: none !important;
    }

        button.dt-button.processing:after {
            content: none !important;
        }

    .stat-card {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 240px;
        height: 220px;
        border-radius: 20px;
        font-weight: bold;
        text-align: center;
        color: #fff;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        transition: transform 0.2s, box-shadow 0.2s;
        margin-left: 10px;
    }

        .stat-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        }


    .pending-card {
        background: orange;
        height: 180px;
    }


    .totalqc-card {
        background: #007bff; /* Blue for total QC */
        height: 180px;
    }


    .confirm-card {
        background: green;
        height: 180px;
    }

    .nonconfirm-card {
        background: red;
        height: 180px;
    }

    /* ---- Chart Container ---- */
    .chart-container {
        background: #fff;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        margin-top: 20px;
    }

    /* Chart title & alignment */
    .chart-title {
        font-weight: bold;
        font-size: 16px;
        color: #333;
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

    .dt-toolbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 10px;
    }

    .dt-left {
        display: flex;
        align-items: center;
        gap: 10px;
        flex-wrap: wrap;
    }

    .chart-container {
        position: relative;
        flex: 1 1 45%;
        max-width: 600px;
        margin: 0 auto;
        height: 300px;
    }


    .chartparent {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-around;
        gap: 20px;
        margin-top: 20px;
    }

    .Confirm-list-body, .Nonconfirm-list-body {
        max-height: 400px;
        overflow-y: auto;
        overflow-x: auto;
        padding: 10px 15px;
    }

        .Confirm-list-body table, .Nonconfirm-list-body table {
            width: 700%;
            table-layout: fixed;
        }

        .Confirm-list-body td, .Nonconfirm-list-body td {
            word-wrap: break-word;
            white-space: normal;
        }

    #reportrange {
        font-size: 14px;
    }

    .visually-hidden {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        border: 0;
    }

    .confirm-list-body,
    .nonconfirm-list-body {
        max-height: 400px;
        overflow-y: auto;
        overflow-x: auto;
        padding: 15px;
    }

    .calendar-btn {
        background-color: #6f42c1;
        color: white;
        border: none;
        border-radius: 6px;
        padding: 10px 14px;
        cursor: pointer;
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .calendar-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.25);
        }




    #confirmModal .btn-close,
    #NonconfirmModal .btn-close {
        filter: invert(1); /* turns black × to white */
        opacity: 1 !important; /* full visibility */
    }

    #toastContainer {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 2000;
    }


    .bg-purple {
        background-color: #6f42c1 !important;
    }


    .modal-header {
        display: flex !important;
        align-items: center;
        justify-content: center;
        position: relative;
        z-index: 1056;
    }


    .modal-content {
        overflow: visible !important;
        position: relative;
        z-index: 1055;
    }

    .dashboard-container {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 20px;
        flex-wrap: nowrap;
        margin-top: 20px;
        flex-shrink: 0;
    }



    .modal-title {
        color: #fff !important;
    }
</style>
<div class="dashboard-container" bg-white shadow-lg rounded-4 p-5 my-4" style="max-width: 95%;" ,"style="display: flex; justify-content: left; gap: 20px; flex-wrap: wrap;">

    <div class="dashboard-container">
        <div class="stat-card pending-card">
            <i class="bi bi-hourglass-split fs-2"></i>
            <div class="count" id="pending">0</div>
            <div class="label">Pending Count</div>
        </div>

        <div class="stat-card confirm-card">
            <i class="bi bi-check-circle fs-2"></i>
            <div class="count" id="confirm">0</div>
            <div class="label">Confirm Items Count</div>
        </div>

        <div class="stat-card nonconfirm-card">
            <i class="bi bi-x-circle fs-2"></i>
            <div class="count" id="nonconfirm">0</div>
            <div class="label">NonConfirm Items Count</div>
        </div>
        <!-- ✅ New Total QC Card -->
        <div class="stat-card totalqc-card">
            <i class="bi bi-bar-chart-line fs-2"></i>
            <div class="count" id="totalqc">0</div>
            <div class="label">Total QC</div>
        </div>
    </div>
</div>


<!-- Date Button (fixed position) -->
<button id="calendarTrigger"
        class="btn btn-primary rounded-circle shadow-lg position-fixed"
        style="top: 70px; right: 20px; width: 60px; height: 60px; z-index: 1050;">
    <i class="bi bi-calendar-date fs-4"></i>
</button>

<!-- Hidden input used for daterangepicker -->
<input type="text" id="reportrange" class="form-control position-fixed"
       style="top: 70px; right: 20px; width: 1px; height: 1px; opacity: 0; z-index: -1;" />

<!-- Only one toast container -->
<div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 2000;"></div>

<div class="chartparent">
    <div class="chart-container" id="doughnutChart"></div>
</div>



<!-- Confirm Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" style="max-width: 1200px; width: 95%; min-height: 600px;">
        <div class="modal-content" style="min-height: 600px;">

            <!-- Modal Header -->
            <div class="modal-header bg-purple justify-content-center">
                <h5 class="modal-title w-100 text-center text-white  mb-3">Confirm List</h5>
                <button type="button" class="btn-close position-absolute end-0 me-3" data-bs-dismiss="modal"></button>
            </div>

            <!-- Modal Body -->
            <div class="modal-body Confirm-list-body" style="max-height: 500px; overflow-y: auto;">

                <!-- Table -->
                <div class="table-responsive">
                    <table class="table table-striped table-hover table-bordered" id="confirmTable">
                        <thead class="table-dark">
                            <tr>
                                <th class="text-center"><input type="checkbox" id="selectAllConfirm" /></th>
                                <th class="text-center">Sr.No</th>
                                <th class="text-center">QualityCheckCode</th>
                                <th class="text-center">ItemName</th>
                                <th class="text-center">Quantity</th>
                                <th class="text-center">Added By</th>
                                <th class="text-center">Added Date</th>
                            </tr>
                        </thead>
                        <tbody id="confirmListTable"></tbody>
                    </table>
                </div>
            </div>

        </div>
    </div>
</div>

<!-- Pending Modal -->
<div class="modal" id="PendingModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" style="max-width: 1200px; width: 95%; min-height: 600px;">
        <div class="modal-content" style="min-height: 600px;">


            <!-- Modal Header -->
            <div class="modal-header bg-purple justify-content-center">
                <h5 class="modal-title w-100 text-center text-white  mb-3">
                    Pending List
                </h5>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3" data-bs-dismiss="modal"></button>
            </div>

            <!-- Modal Body -->
            <div class="modal-body Pending-list-body" style="max-height: 500px; overflow-y: auto;">
                <!-- Table -->
                <div class="table-responsive">
                    <table class="table table-striped table-hover table-bordered" id="PendingTable">
                        <thead class="table-dark">
                            <tr>
                                <th class="text-center"><input type="checkbox" id="selectAllPending" /></th>
                                <th class="text-center">Sr.No</th>
                                <th class="text-center">QualityCheckCode</th>
                                <th class="text-center">ItemName</th>
                                <th class="text-center">Quantity</th>
                                <th class="text-center">Added By</th>
                                <th class="text-center">Added Date</th>
                            </tr>
                        </thead>
                        <tbody id="PendingListTable"></tbody>
                    </table>
                </div>
            </div>

        </div>
    </div>
</div>

<!-- NonConfirm Modal -->
<div class="modal fade" id="NonconfirmModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" style="max-width: 1200px; width: 95%; min-height: 600px;">
        <div class="modal-content" style="min-height: 600px;">

            <!-- Modal Header -->
            <div class="modal-header bg-purple justify-content-center">
                <h5 class="modal-title w-100 text-center text-white ">Non-Confirm List</h5>
                <button type="button" class="btn-close position-absolute end-0 me-3" data-bs-dismiss="modal"></button>
            </div>

            <!-- Modal Body -->
            <div class="modal-body Nonconfirm-list-body" style="max-height: 500px; overflow-y: auto;">

                <!-- Table -->
                <div class="table-responsive">
                    <table class="table table-striped table-hover table-bordered" id="NonconfirmTable">
                        <thead class="table-dark">
                            <tr>
                                <th class="text-center"><input type="checkbox" id="selectAllNonConfirm" /></th>
                                <th class="text-center">Sr.No</th>
                                <th class="text-center">QualityCheckCode</th>
                                <th class="text-center">ItemName</th>
                                <th class="text-center">Quantity</th>
                                <th class="text-center">Added By</th>
                                <th class="text-center">Added Date</th>
                            </tr>
                        </thead>
                        <tbody id="NonconfirmListTable"></tbody>
                    </table>
                </div>
            </div>

        </div>
    </div>
</div>
<script>

    let startDateGlobal = null;
    let endDateGlobal = null;
    $(document).ready(function () {
        $.fn.dataTable.ext.errMode = 'none';
        loadDashboardData(); // initial load
        initDateRangePicker();

        let startDateGlobal = null;
        let endDateGlobal = null;
        $(document).ready(function () {
            $.fn.dataTable.ext.errMode = 'none';
            loadDashboardData(); // initial load
            initDateRangePicker();

            // Open datepicker on calendar button click
            $('#calendarTrigger').on('click', function () {
                $('#reportrange').data('daterangepicker').show();
            });
        });

        // Toast Notification
        function showToast(message, type = 'warning') {
            // Map to Bootstrap contextual colors
            let icon = '';
            let progressColor = '';

            switch (type) {
                case 'success':
                    icon = '<i class="bi bi-check-circle-fill me-2"></i>';
                    progressColor = 'bg-light';
                    break;
                case 'warning':
                    icon = '<i class="bi bi-exclamation-triangle-fill me-2"></i>';
                    progressColor = 'bg-dark';
                    break;
                case 'info':
                    icon = '<i class="bi bi-info-circle-fill me-2"></i>';
                    progressColor = 'bg-light';
                    break;
                default: // error
                    icon = '<i class="bi bi-x-circle-fill me-2"></i>';
                    progressColor = 'bg-light';
            }

            const toastId = `toast-${Date.now()}`;

            // ✅ Toast HTML with white text for all
            const toastHTML = `
<div id="${toastId}" class="toast align-items-center bg-${type} border-0 mb-2 shadow-lg"
                                 role="alert" aria-live="assertive" aria-atomic="true"
                                 data-bs-delay="3000" data-bs-animation="true">
                                <div class="d-flex">
                                    <div class="toast-body d-flex align-items-center text-white">
                                        ${icon} ${message}
                                    </div>
                                    <button type="button" class="btn-close btn-close-white me-2 m-auto"
                                            data-bs-dismiss="toast" aria-label="Close"></button>
                                </div>
                                <div class="progress" style="height: 3px; margin:0; background: rgba(255,255,255,0.3);">
                            <div class="progress-bar" role="progressbar"></div>
</div>

</div>`;

            const $toast = $(toastHTML);
            $('#toastContainer').prepend($toast); // newestOnTop

            // ✅ Initialize bootstrap toast
            const toast = new bootstrap.Toast($toast[0], { delay: 3000 });
            toast.show();

            // ✅ Animate progress bar
            $toast.find('.progress-bar')
                .css({
                    width: "100%",
                    float: "right",
                    backgroundColor: "black"
                })
                .animate(
                    { width: "0%" },
                    { duration: 3000, easing: "linear" }
                );



            // ✅ Auto-remove
            $toast.on('hidden.bs.toast', function () {
                $(this).remove();
            });
        }
        $.ajax({
            url: '/Quality/GetConfirmCountNAM',
            type: 'GET',
            data: requestData,
            success: function (data) {
                if (data) {
                    $('#confirm').text(data.ConfirmCount);
                    $('#nonconfirm').text(data.NonConfirmCount);
                    $('#pending').text(data.PendingCount);

                    // ✅ Calculate and show Total QC Count
                    const totalQC = (data.ConfirmCount || 0) + (data.NonConfirmCount || 0) + (data.PendingCount || 0);
                    $('#totalqc').text(totalQC);

                    renderDoughnutChart(data.ConfirmCount, data.NonConfirmCount, data.PendingCount);
                }
            }
        });
    }

    // === Pie Chart ===
    function renderDoughnutChart(c, n, p) {
        Highcharts.chart('doughnutChart', {
            chart: {
                type: 'pie',
                backgroundColor: 'transparent'
            },
            title: { text: null },
            plotOptions: {
                pie: {
                    innerSize: '60%',
                    allowPointSelect: true,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: true,
                        format: '<b>{point.name}</b>: {point.y}',
                        style: {
                            fontSize: '13px',
                            fontWeight: 'bold',
                            color: 'black'
                        },
                        connectorColor: '#000'
                    },
                    point: {
                        events: {
                            click: function () {
                                if (this.name === 'Confirm') loadConfirmList(startDateGlobal, endDateGlobal);
                                else if (this.name === 'Non Confirm') loadNonConfirmList(startDateGlobal, endDateGlobal);
                                else if (this.name === 'Pending') loadPendingList(startDateGlobal, endDateGlobal);
                            }
                        }
                    }
                }
            },
            tooltip: {
                pointFormat: '{series.name}: <b>{point.y}</b>'
            },
            series: [{
                name: 'Count',
                colorByPoint: true,
                data: [
                    { name: 'Confirm', y: c, color: 'Green' },
                    { name: 'Non Confirm', y: n, color: 'red' },
                    { name: 'Pending', y: p, color: 'Orange' }
                ]
            }]
        });
    }

    function loadPendingList(startDate = null, endDate) {
        if ($.fn.DataTable.isDataTable('#confirmTable')) $('#confirmTable').DataTable().destroy();
        if ($.fn.DataTable.isDataTable('#NonconfirmTable')) $('#NonconfirmTable').DataTable().destroy();
        if ($.fn.DataTable.isDataTable('#PendingTable')) $('#PendingTable').DataTable().destroy();


        let requestData = {};
        startDate = startDateGlobal;
        endDate = endDateGlobal;
        if (startDate && endDate) {
            requestData = { startDate: startDate, endDate: endDate };
        }

        $.get('/Quality/GetPendingListNAM', requestData, d => {
            var r = '';
            console.log(d);
            if (d && d.length) {
                $.each(d, (i, x) => {
                    r += `<tr>
                            <td class="text-center"><input type="checkbox" class="Pending-row-select" value="${x.QualityCheckCode}" /></td>
                            <td class="text-center">${i + 1}</td>
                            <td class="text-center">${x.QualityCheckCode}</td>
                            <td class="text-center">${x.ItemName}</td>
                            <td class="text-center">${x.Quantity}</td>
                            <td class="text-center">${x.AddedBy}</td>
                            <td>${moment(x.AddedDate).format('DD/MM/YYYY')}</td>
                        </tr>`;
                });
            } else {
                r = '<tr><td colspan="7" class="text-center">No Records</td></tr>';
            }

            $('#PendingListTable').html(r);

            if ($.fn.DataTable.isDataTable('#PendingTable')) $('#PendingTable').DataTable().destroy();

            let t = $('#PendingTable').DataTable({



                dom: '<"dt-toolbar"<"dt-left"B><"dt-search"f>>rt<"bottom d-flex justify-content-between align-items-center"ip>>',
                ordering: false,
                buttons: [
                    {
                        extend: 'print',
                        title: '',
                        text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                        titleAttr: 'Print Selected',
                        action: function (e, dt, button, config) {
                            if ($('#PendingTable .Pending-row-select:checked').length === 0) {
                                showToast("Please select at least one row to print!", "warning");
                                return;
                            }
                            $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            // ✅ include Added Date column (remove :not(:last-child))
                            columns: ':visible:not(:first-child)',
                            rows: (idx, d, node) => $(node).find('.Pending-row-select').prop('checked'),
                            format: {
                                body: (data, row, col, node) => {
                                    data = typeof data === 'string' ? data.replace(/<[^>]*>/g, '').trim() : data;
                                    if (col === 1) return ++window.__srnoCounter || (window.__srnoCounter = 1);
                                    return data;
                                }
                            }
                        },
                        customize: function (win) {
                            const today = new Date();
                            const formattedDate = today.toLocaleDateString('en-GB');

                            // === Header Section ===
                            $(win.document.body).prepend(`
                <div style="text-align:center; font-size:18px; font-weight:bold; margin-bottom:5px;">
                    Pending Quality List
                </div>
                <div style="text-align:center; font-size:12px; margin-bottom:10px;">
                    Genrated Date: ${formattedDate}
                </div>
            `);

                            // === Table Styling ===
                            $(win.document.body).find('thead th').css({
                                'background-color': '#212529',
                                'color': '#ffffff',
                                'text-align': 'center',
                                '-webkit-print-color-adjust': 'exact',
                                'print-color-adjust': 'exact'
                            });

                            $(win.document.body).find('table')
                                .addClass('table table-bordered table-striped')
                                .css('font-size', '14px');

                            // === Sr.No Auto Numbering ===
                            $(win.document.body).find('table tbody tr').each(function (i) {
                                $(this).find('td:first').text(i + 1);
                            });
                        }
                    }
                    ,


                    {
                        extend: 'pdfHtml5',
                        title: 'Pending List',
                        text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                        titleAttr: 'Export PDF',
                        action: function (e, dt, button, config) {
                            if ($('#PendingTable .Pending-row-select:checked').length === 0) {
                                showToast("Please select at least one record to export PDF", "warning");
                                return;
                            }
                            $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            // ✅ Include Added Date column (remove :not(:last-child))
                            columns: ':visible:not(:first-child)',
                            rows: (idx, d, node) => $(node).find('.Pending-row-select').prop('checked'),
                            format: {
                                body: (data, row, col) => typeof data === 'string'
                                    ? data.replace(/<\/?[^>]+(>|$)/g, "").trim()
                                    : data
                            }
                        },
                        filename: function () {
                            return 'Pending_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                        },
                        customize: function (doc) {
                            // === Title and alignment ===
                            doc.content[0].alignment = 'center';
                            doc.content[0].fontSize = 14;
                            doc.content[0].text = 'Pending Quality List';

                            // === Add generated date below title ===
                            doc.content.splice(1, 0, {
                                text: 'Generated Date: ' + new Date().toLocaleDateString('en-GB'),
                                alignment: 'center',
                                margin: [0, 0, 0, 8],
                                fontSize: 10
                            });

                            // === Get table reference ===
                            const tableNode = doc.content.find(c => c.table);
                            if (!tableNode) return;

                            // === Table header styling ===
                            doc.styles.tableHeader = {
                                alignment: 'center',
                                fillColor: '#212529',
                                color: '#ffffff',
                                bold: true
                            };

                            // === Add serial number (Sr. No.) ===
                            tableNode.table.body.forEach((row, i) => {
                                if (i > 0) row[0] = { text: String(i), alignment: 'center' };
                            });

                            // === Add padding like your Purchase PDF ===
                            tableNode.layout = {
                                paddingLeft: () => 30,
                                paddingRight: () => 6
                            };
                        }
                    }
                    ,


                    {
                        extend: 'excelHtml5',
                        title: '',
                        filename: 'Pending_List',
                        text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                        titleAttr: 'Export Excel',
                        action: function (e, dt, button, config) {
                            if ($('#PendingTable .Pending-row-select:checked').length === 0) {
                                showToast("Please select at least one record to export Excel", "warning");
                                return;
                            }
                            window.__excelSrCounter = 0;
                            $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            // ✅ Include Added Date column (remove :not(:last-child))
                            columns: ':visible:not(:first-child)',
                            rows: (idx, d, node) => $(node).find('.Pending-row-select').prop('checked'),
                            format: {
                                body: (data, row, col, node) =>
                                    col === 1
                                        ? ++window.__excelSrCounter // Sr.No auto increment
                                        : (typeof data === 'string'
                                            ? data.replace(/<\/?[^>]+(>|$)/g, "").trim()
                                            : data)
                            }
                        },
                        customize: function (xlsx) {
                            const sheet = xlsx.xl.worksheets['sheet1.xml'];
                            const today = new Date();
                            const dateStr = today.toLocaleDateString('en-GB');

                            // Shift all existing rows down by 2 to make space for title + date
                            $(sheet).find('row').each(function () {
                                let r = parseInt($(this).attr('r'));
                                $(this).attr('r', r + 2);
                                $(this).find('c').each(function () {
                                    const cellRef = $(this).attr('r');
                                    const col = cellRef.replace(/\d+/g, '');
                                    const row = parseInt(cellRef.replace(/\D/g, '')) + 2;
                                    $(this).attr('r', col + row);
                                });
                            });

                            // Add Title & Date Row at top (center aligned)
                            const titleRow = `
<row r="1">
        <c t="inlineStr" r="A1" s="51"><is><t>Pending Quality List</t></is></c>
</row>`;
                            const dateRow = `
<row r="2">
        <c t="inlineStr" r="A2" s="51"><is><t>Genrated Date: ${dateStr}</t></is></c>
</row>`;

                            // ✅ Merge cells (extended range to include Added Date column if more columns)
                            const mergeCells = `
<mergeCells count="2">
        <mergeCell ref="A1:G1"/>
        <mergeCell ref="A2:G2"/>
</mergeCells>`;

                            // Prepend new rows to sheet
                            sheet.childNodes[0].childNodes[1].innerHTML =
                                titleRow + dateRow + sheet.childNodes[0].childNodes[1].innerHTML;

                            // Add merged cell info for centering
                            if ($(sheet).find('mergeCells').length === 0) {
                                $(sheet).append(mergeCells);
                            } else {
                                $(sheet).find('mergeCells').append('<mergeCell ref="A1:G1"/><mergeCell ref="A2:G2"/>');
                            }
                        }
                    },



                    {
                        extend: 'csvHtml5',
                        text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                        titleAttr: 'Export CSV',
                        action: function (e, dt, button, config) {
                            if ($('#PendingTable .Pending-row-select:checked').length === 0) {
                                showToast("Please select at least one row to export CSV", "warning");
                                return;
                            }
                            window.__srnoCounter = 0;
                            $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            // ✅ Include Added Date column (remove :not(:last-child))
                            columns: ':visible:not(:first-child)',
                            rows: (idx, d, node) => $(node).find('.Pending-row-select').prop('checked'),
                            format: {
                                body: (data, row, col, node) => {
                                    data = typeof data === 'string' ? data.replace(/<[^>]*>/g, '').trim() : data;
                                    if (col === 1) return ++window.__srnoCounter; // Auto Sr.No
                                    return data;
                                }
                            }
                        },
                        filename: () => 'Pending_List_' + new Date().toISOString().slice(0, 10).replace(/-/g, ""),
                        customize: function (csv) {
                            // Return CSV without extra heading or date rows (as per your logic)
                            return csv;
                        }
                    }
                ],


            });

            $("#PendingModal").modal("show");
        });

        $('#selectAllPending').on('click', function () {
            var checked = this.checked;
            $('#PendingTable .Pending-row-select').prop('checked', checked);
        });
        // Uncheck "Select All" if any single checkbox is unchecked
        $('#PendingTable').on('change', '.Pending-row-select', function () {
            // If any unchecked → uncheck header checkbox
            if (!this.checked) {
                $('#selectAllPending').prop('checked', false);
            } else {
                // If all checked → check header checkbox automatically
                const allChecked = $('.Pending-row-select:checked').length === $('.Pending-row-select').length;
                $('#selectAllPending').prop('checked', allChecked);
            }
        });

    }


    function loadNonConfirmList(startDate = null, endDate) {

        if ($.fn.DataTable.isDataTable('#NonconfirmTable')) $('#NonconfirmTable').DataTable().destroy();
        if ($.fn.DataTable.isDataTable('#confirmTable')) $('#confirmTable').DataTable().destroy();
        if ($.fn.DataTable.isDataTable('#PendingTable')) $('#PendingTable').DataTable().destroy();



        let requestData = {};
        startDate = startDateGlobal;
        endDate = endDateGlobal;
        if (startDate && endDate) {
            requestData = { startDate: startDate, endDate: endDate };
        }


        $.get('/Quality/GetNonConfirmedListNAM', requestData,

            $.get('/Quality/GetPendingListNAM', requestData, d => {
                var r = '';
                console.log(d);
                if (d && d.length) {
                    $.each(d, (i, x) => {
                        r += `<tr>
              <td class="text-center"><input type="checkbox" class="Nonconfirm-row-select" value="${x.QualityCheckCode}" /></td>
              <td class="text-center">${i + 1}</td>
              <td class="text-center">${x.QualityCheckCode}</td>
              <td class="text-center">${x.ItemName}</td>
              <td class="text-center">${x.Quantity}</td>
              <td class="text-center">${x.AddedBy}</td>
                                        <td>${moment(x.AddedDate).format('DD/MM/YYYY')}</td>
            </tr>`;
                    });
                } else {
                    r = '<tr><td colspan="7" class="text-center">No Records</td></tr>';
                }

                $('#PendingListTable').html(r);

                if ($.fn.DataTable.isDataTable('#PendingTable')) $('#PendingTable').DataTable().destroy();

                let t = $('#PendingTable').DataTable({



                    dom: '<"dt-toolbar"<"dt-left"B><"dt-search"f>>rt<"bottom d-flex justify-content-between align-items-center"ip>>',
                    ordering: false,

                    buttons: [
                        {
                            extend: 'print',
                            title: '',
                            text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                            titleAttr: 'Print Selected',
                            action: function (e, dt, button, config) {
                                if ($('#PendingTable .Pending-row-select:checked').length === 0) {
                                    showToast("Please select at least one row to print!", "warning");
                                    return;
                                }
                                $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                            },
                            exportOptions: {
                                // ✅ include Added Date column (remove :not(:last-child))
                                columns: ':visible:not(:first-child)',
                                rows: function (idx, data, node) {
                                    return $(node).find('.Nonconfirm-row-select').prop('checked');
                                },
                                format: {
                                    body: (function () {
                                        let counter = 0;
                                        return function (data, row, column, node) {
                                            data = typeof data === 'string'
                                                ? data.replace(/<[^>]*>/g, '').trim()
                                                : data;
                                            if (column === 1) { // Auto number first visible column
                                                counter++;
                                                return counter;
                                            }
                                            return data;
                                        };
                                    })()
                                }
                            },
                            title: '',
                            customize: function (win) {
                                const today = new Date();
                                const formattedDate = today.toLocaleDateString('en-GB');

                                // 🔹 Add main title and date
                                $(win.document.body).prepend(`
        <div style="text-align:center; font-size:18px; font-weight:bold; margin-bottom:5px;">Non-confirm List</div>
        <div style="text-align:center; font-size:12px; margin-bottom:10px;">Genrated Date: ${formattedDate}</div>
`);

                                // 🔹 Style table headers
                                $(win.document.body).find('table thead th').css({
                                    'background-color': '#212529',
                                    'color': '#ffffff',
                                    'text-align': 'center',
                                    '-webkit-print-color-adjust': 'exact',
                                    'print-color-adjust': 'exact'
                                });

                                // 🔹 Add table classes and font size
                                $(win.document.body).find('table')
                                    .addClass('table table-bordered table-striped')
                                    .css('font-size', '14px');

                                // 🔹 Auto number rows
                                $(win.document.body).find('table tbody tr').each(function (i) {
                                    $(this).find('td:first').text(i + 1);
                                });
                            }
                        },


                        {
                            extend: 'pdfHtml5',
                            title: 'Pending List',
                            text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                            titleAttr: 'Export PDF',
                            action: function (e, dt, button, config) {
                                if ($('#PendingTable .Pending-row-select:checked').length === 0) {
                                    showToast("Please select at least one record to export PDF", "warning");
                                    return;
                                }
                                $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                                dt.processing(false); // ✅ remove spinner
                            },
                            exportOptions: {
                                // ✅ include Added Date column (removed :not(:last-child))
                                columns: ':visible:not(:first-child)',
                                rows: (idx, d, node) => $(node).find('.Nonconfirm-row-select').prop('checked'),
                                format: {
                                    body: (data, row, col) =>
                                        typeof data === 'string' ? data.replace(/<\/?[^>]+(>|$)/g, "").trim() : data
                                }
                            },
                            title: 'Non-confirm List',
                            filename: function () {
                                return 'NonConfirm_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                            },
                            customize: function (doc) {
                                // === Title styling ===
                                doc.content[0].alignment = 'center';
                                doc.content[0].fontSize = 14;
                                doc.content[0].text = 'Non-confirm List';

                                // === Add generated date below title ===
                                doc.content.splice(1, 0, {
                                    text: 'Generated Date: ' + new Date().toLocaleDateString('en-GB'),
                                    alignment: 'center',
                                    margin: [0, 0, 0, 8],
                                    fontSize: 10
                                });

                                // === Get table reference ===
                                const tableNode = doc.content.find(c => c.table);
                                if (!tableNode) return;

                                // === Table header styling ===
                                doc.styles.tableHeader = {
                                    alignment: 'center',
                                    fillColor: '#212529',
                                    color: '#ffffff',
                                    bold: true
                                };

                                // === Add serial number (Sr. No.) ===
                                tableNode.table.body.forEach((row, i) => {
                                    if (i > 0) row[0] = { text: String(i), alignment: 'center' };
                                });

                                // === Table layout and padding ===
                                tableNode.layout = {
                                    paddingLeft: () => 30,
                                    paddingRight: () => 6
                                };
                            }
                        }
                        ,




                        {
                            extend: 'excelHtml5',
                            title: '',
                            filename: 'Pending_List',
                            text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                            titleAttr: 'Export Excel',
                            action: function (e, dt, button, config) {
                                if ($('#PendingTable .Pending-row-select:checked').length === 0) {
                                    showToast("Please select at least one record to export Excel", "warning");
                                    return;
                                }
                                window.__excelSrCounter = 0; // reset Sr. No counter
                                $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                                dt.processing(false); // ✅ remove spinner
                            },
                            exportOptions: {
                                // ✅ include Added Date column (remove :not(:last-child))
                                columns: ':visible:not(:first-child)',
                                rows: function (idx, data, node) {
                                    return $(node).find('.Nonconfirm-row-select').prop('checked');
                                },
                                format: {
                                    body: (data, row, col, node) =>
                                        col === 1
                                            ? ++window.__excelSrCounter
                                            : (typeof data === 'string' ? data.replace(/<\/?[^>]+(>|$)/g, "").trim() : data)
                                }
                            },
                            title: '',
                            filename: function () {
                                return 'NonConfirm_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                            },
                            customize: function (xlsx) {
                                const sheet = xlsx.xl.worksheets['sheet1.xml'];
                                const today = new Date();
                                const dateStr = today.toLocaleDateString('en-GB');

                                // 🔹 Shift existing rows down to add title + date
                                $(sheet).find('row').each(function () {
                                    let r = parseInt($(this).attr('r'));
                                    $(this).attr('r', r + 2);
                                    $(this).find('c').each(function () {
                                        const cellRef = $(this).attr('r');
                                        const col = cellRef.replace(/\d+/g, '');
                                        const row = parseInt(cellRef.replace(/\D/g, '')) + 2;
                                        $(this).attr('r', col + row);
                                    });
                                });

                                // 🔹 Add Title & Date Row at top (center aligned)
                                const titleRow = `
<row r="1">
        <c t="inlineStr" r="A1" s="51"><is><t>Non-confirm List</t></is></c>
</row>`;
                                const dateRow = `
<row r="2">
        <c t="inlineStr" r="A2" s="51"><is><t>Generated Date: ${dateStr}</t></is></c>
</row>`;

                                // 🔹 Merge cells to center title and date (A1:E1 and A2:E2)
                                const mergeCells = `
<mergeCells count="2">
        <mergeCell ref="A1:E1"/>
        <mergeCell ref="A2:E2"/>
</mergeCells>`;

                                // 🔹 Prepend new rows to sheet
                                sheet.childNodes[0].childNodes[1].innerHTML =
                                    titleRow + dateRow + sheet.childNodes[0].childNodes[1].innerHTML;

                                // 🔹 Add merged cell info for centering
                                if ($(sheet).find('mergeCells').length === 0) {
                                    $(sheet).append(mergeCells);
                                } else {
                                    $(sheet).find('mergeCells').append('<mergeCell ref="A1:E1"/><mergeCell ref="A2:E2"/>');
                                }
                            }
                        },



                        {
                            extend: 'csvHtml5',
                            text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                            titleAttr: 'Export CSV',
                            action: function (e, dt, button, config) {
                                if ($('#PendingTable .Pending-row-select:checked').length === 0) {
                                    showToast("Please select at least one row to export CSV", "warning");
                                    return;
                                }
                                window.__srnoCounter = 0; // reset Sr. No counter
                                $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                                dt.processing(false); // remove spinner
                            },
                            exportOptions: {
                                // ✅ Include Added Date column (remove :not(:last-child))
                                columns: ':visible:not(:first-child)',
                                rows: (idx, d, node) => $(node).find('.Pending-row-select').prop('checked'),
                                format: {
                                    body: (function () {
                                        let counter = 0;
                                        return function (data, row, column, node) {
                                            data = typeof data === 'string' ? data.replace(/<[^>]*>/g, '').trim() : data;
                                            if (column === 1) return ++window.__srnoCounter; // Sr. No
                                            return data;
                                        };
                                    })()
                                }
                            },
                            title: '',
                            filename: function () {
                                return 'NonConfirm_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                            },
                            customize: function (csv) {
                                // Return CSV without any heading or export date
                                return csv;
                            }
                        }
                    ],

                });


                $("#NonconfirmModal").modal("show");
            });
        $('#selectAllNonConfirm').on('click', function () {
            var checked = this.checked;
            $('#NonconfirmTable .Nonconfirm-row-select').prop('checked', checked);
        });
        // Select / Deselect all rows
        $('#selectAllNonConfirm').on('click', function () {
            var checked = this.checked;
            $('#NonconfirmTable .Nonconfirm-row-select').prop('checked', checked);
        });

        // If any row checkbox is unchecked, uncheck the header checkbox
        $('#NonconfirmTable').on('change', '.Nonconfirm-row-select', function () {
            if (!this.checked) {
                $('#selectAllNonConfirm').prop('checked', false);
            } else {
                // If all checkboxes are checked, check the header checkbox
                var allChecked = $('#NonconfirmTable .Nonconfirm-row-select').length ===
                    $('#NonconfirmTable .Nonconfirm-row-select:checked').length;
                $('#selectAllNonConfirm').prop('checked', allChecked);
            }
        });

    }

            $('#selectAllPending').on('click', function () {
                var checked = this.checked;
                $('#PendingTable .Pending-row-select').prop('checked', checked);
            });
            // Uncheck "Select All" if any single checkbox is unchecked
            $('#PendingTable').on('change', '.Pending-row-select', function () {
                // If any unchecked → uncheck header checkbox
                if (!this.checked) {
                    $('#selectAllPending').prop('checked', false);
                } else {
                    // If all checked → check header checkbox automatically
                    const allChecked = $('.Pending-row-select:checked').length === $('.Pending-row-select').length;
                    $('#selectAllPending').prop('checked', allChecked);
                }
            });

        }

    // Load Confirm List
    function loadConfirmList(startDate = null, endDate) {
        if ($.fn.DataTable.isDataTable('#confirmTable')) $('#confirmTable').DataTable().destroy();
        if ($.fn.DataTable.isDataTable('#NonconfirmTable')) $('#NonconfirmTable').DataTable().destroy();
        if ($.fn.DataTable.isDataTable('#PendingTable')) $('#PendingTable').DataTable().destroy();



        let requestData = {};
        startDate = startDateGlobal;
        endDate = endDateGlobal;
        if (startDate && endDate) {
            requestData = { startDate: startDate, endDate: endDate };
        }
        $.get('/Quality/GetConfirmedListNAM', requestData,

            d => {
                var r = '';
                if (d && d.length) {
                    $.each(d, (i, x) => {
                        r += `<tr>
                 <td class="text-center"><input type="checkbox" class="confirm-row-select" value="${x.QualityCheckCode}" /></td>
                 <td class="text-center">${i + 1}</td>
                 <td class="text-center">${x.QualityCheckCode}</td>
                 <td class="text-center">${x.ItemName}</td>
                 <td class="text-center">${x.Quantity}</td>
                 <td class="text-center">${x.AddedBy}</td>
                                        <td>${moment(x.AddedDate).format('DD/MM/YYYY')}</td>
               </tr>`;
                    });
                }
                else r = '<tr><td colspan="6" class="text-center">No Records</td></tr>';
                $('#confirmListTable').html(r);
                if ($.fn.DataTable.isDataTable('#confirmTable')) $('#confirmTable').DataTable().destroy();
                let t = $('#confirmTable').DataTable({
                    dom: '<"dt-toolbar"<"dt-left"B><"dt-search"f>>rt<"bottom d-flex justify-content-between align-items-center"ip>>',
                    ordering: false,
                    buttons: [
                        // Print button
                        // Print
                        // ✅ PRINT BUTTON (includes Added Date)
                        {
                            extend: 'print',
                            title: '',
                            text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                            titleAttr: 'Print Selected',
                            action: function (e, dt, button, config) {
                                if ($('#confirmTable .confirm-row-select:checked').length === 0) {
                                    showToast("Please select at least one row to print!", "warning");
                                    return;
                                }
                                $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                                dt.processing(false);
                            },
                            exportOptions: {
                                // ✅ Include Added Date column (removed :not(:last-child))
                                columns: ':visible:not(:first-child)',
                                rows: (idx, data, node) => $(node).find('.confirm-row-select').prop('checked'),
                                format: {
                                    body: (function () {
                                        let counter = 0;
                                        return function (data, row, column, node) {
                                            data = typeof data === 'string' ? data.replace(/<[^>]*>/g, '').trim() : data;
                                            if (column === 1) return ++counter; // Sr.No auto
                                            return data;
                                        };
                                    })()
                                }
                            },
                            customize: function (win) {
                                const today = new Date();
                                const formattedDate = today.toLocaleDateString('en-GB');
                                $(win.document.body).prepend(`
                <div style="text-align:center; font-size:18px; font-weight:bold; margin-bottom:5px;">Confirm List</div>
                <div style="text-align:center; font-size:12px; margin-bottom:10px;">Generated Date: ${formattedDate}</div>
            `);
                                $(win.document.body).find('thead th').css({
                                    'background-color': '#212529',
                                    'color': '#ffffff',
                                    'text-align': 'center',
                                    '-webkit-print-color-adjust': 'exact',
                                    'print-color-adjust': 'exact'
                                });
                                $(win.document.body).find('table').addClass('table table-bordered table-striped').css('font-size', '14px');
                                $(win.document.body).find('table tbody tr').each(function (i) {
                                    $(this).find('td:first').text(i + 1);
                                });

                                // ✅ Center align Added Date column
                                $(win.document.body).find('table tbody tr td:last-child').css('text-align', 'center');
                            }
                        },

                        // ✅ PDF BUTTON (includes Added Date)
                        {
                            extend: 'pdfHtml5',
                            title: 'Confirm List',
                            text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                            titleAttr: 'Export PDF',
                            action: function (e, dt, button, config) {
                                if ($('#confirmTable .confirm-row-select:checked').length === 0) {
                                    showToast("Please select at least one row to export!", "warning");
                                    return;
                                }
                                $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                                dt.processing(false);
                            },
                            exportOptions: {
                                // ✅ Include Added Date column
                                columns: ':visible:not(:first-child)',
                                rows: (idx, data, node) => $(node).find('.confirm-row-select').prop('checked'),
                                format: {
                                    body: (function () {
                                        let counter = 0;
                                        return function (data, row, column, node) {
                                            data = typeof data === 'string' ? data.replace(/<[^>]*>/g, '').trim() : data;
                                            if (column === 1) return ++counter;
                                            return data;
                                        };
                                    })()
                                }
                            },
                            customize: function (doc) {
                                // === Title and styling ===
                                doc.content[0].alignment = 'center';
                                doc.content[0].fontSize = 14;

                                // === Add Generated Date below title ===
                                doc.content.splice(1, 0, {
                                    text: 'Generated Date: ' + new Date().toLocaleDateString('en-GB'),
                                    alignment: 'center',
                                    margin: [0, 0, 0, 8],
                                    fontSize: 10
                                });

                                const tableNode = doc.content.find(c => c.table);
                                if (!tableNode) return;

                                // === Table header styling ===
                                doc.styles.tableHeader = {
                                    alignment: 'center',
                                    fillColor: '#212529',
                                    color: '#ffffff',
                                    bold: true
                                };

                                // === Sr.No auto numbering ===
                                tableNode.table.body.forEach((row, i) => {
                                    if (i > 0) row[0] = { text: String(i), alignment: 'center' };
                                });

                                // === Add padding ===
                                tableNode.layout = {
                                    paddingLeft: () => 30,
                                    paddingRight: () => 6
                                };
                            },
                            filename: function () {
                                return 'Confirm_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                            }
                        ],


                        // Excel
                        {
                            extend: 'excelHtml5',
                            title: '',
                            filename: 'Confirm_List',
                            text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                            titleAttr: 'Export Excel',
                            action: function (e, dt, button, config) {
                                if ($('#confirmTable .confirm-row-select:checked').length === 0) {
                                    showToast("Please select at least one row to export!", "warning");
                                    return;
                                }
                                window.__excelSrCounter = 0;
                                $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                                dt.processing(false);
                            },
                            exportOptions: {
                                columns: ':visible',
                                rows: (idx, d, node) => $(node).find('.confirm-row-select').prop('checked'),
                                format: {
                                    body: (data, row, col, node) =>
                                        col === 1 ? ++window.__excelSrCounter : (typeof data === 'string' ? data.replace(/<\/?[^>]+(>|$)/g, "").trim() : data)
                                }
                            },
                            customize: function (xlsx) {
                                const sheet = xlsx.xl.worksheets['sheet1.xml'];
                                const today = new Date();
                                const dateStr = today.toLocaleDateString('en-GB');

                                // Shift all rows down to make space for title and date
                                $(sheet).find('row').each(function () {
                                    let r = parseInt($(this).attr('r'));
                                    $(this).attr('r', r + 2);
                                    $(this).find('c').each(function () {
                                        const cellRef = $(this).attr('r');
                                        const col = cellRef.replace(/\d+/g, '');
                                        const row = parseInt(cellRef.replace(/\D/g, '')) + 2;
                                        $(this).attr('r', col + row);
                                    });
                                });

                                // Add Title & Date Row at top (center aligned)
                                const titleRow = `
<row r="1">
        <c t="inlineStr" r="A1" s="51"><is><t>Confirm List</t></is></c>
</row>`;
                                const dateRow = `
<row r="2">
        <c t="inlineStr" r="A2" s="51"><is><t>Generated on: ${dateStr}</t></is></c>
</row>`;

                                // Merge cells to center title and date (A1:E1 and A2:E2)
                                const mergeCells = `
<mergeCells count="2">
        <mergeCell ref="A1:E1"/>
        <mergeCell ref="A2:E2"/>
</mergeCells>`;

                                // Prepend new rows to sheet
                                sheet.childNodes[0].childNodes[1].innerHTML =
                                    titleRow + dateRow + sheet.childNodes[0].childNodes[1].innerHTML;

                                // Add merged cell info for centering
                                if ($(sheet).find('mergeCells').length === 0) {
                                    $(sheet).append(mergeCells);
                                } else {
                                    $(sheet).find('mergeCells').append('<mergeCell ref="A1:E1"/><mergeCell ref="A2:E2"/>');
                                }
                            }
                        },



                        // CSV
                        {
                            extend: 'csvHtml5',
                            text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                            titleAttr: 'Export to CSV',
                            action: function (e, dt, button, config) {
                                if ($('#confirmTable .confirm-row-select:checked').length === 0) {
                                    showToast("Please select at least one row to export!", "warning");
                                    return;
                                }
                                window.__srnoCounter = 0;
                                $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                                dt.processing(false);
                            },
                            exportOptions: {
                                columns: ':visible',
                                rows: (idx, d, node) => $(node).find('.confirm-row-select').prop('checked'),
                                format: {
                                    body: (data, row, col, node) => {
                                        data = typeof data === 'string' ? data.replace(/<[^>]*>/g, '').trim() : data;
                                        if (col === 1) return ++window.__srnoCounter;
                                        return data;
                                    }
                                }
                            },
                            filename: function () {
                                return 'Confirm_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                            },
                            customize: function (csv) {
                                // Simply return CSV without any heading or generated date
                                return csv;
                            }
                        }
                    ],

                });

                $("#confirmModal").modal("show");

            // If any row checkbox is unchecked, uncheck the header checkbox
            $('#confirmTable').on('change', '.confirm-row-select', function () {
                if (!this.checked) {
                    $('#selectAllConfirm').prop('checked', false);
                } else {
                    // If all checkboxes are checked, check the header checkbox
                    var allChecked = $('#confirmTable .confirm-row-select').length ===
                        $('#confirmTable .confirm-row-select:checked').length;
                    $('#selectAllConfirm').prop('checked', allChecked);
                }
            });
        $('#selectAllConfirm').on('click', function () {
            var checked = this.checked;
            $('#confirmTable .confirm-row-select').prop('checked', checked);
        });
        // Select / Deselect all rows
        $('#selectAllConfirm').on('click', function () {
            var checked = this.checked;
            $('#confirmTable .confirm-row-select').prop('checked', checked);
        });

        // If any row checkbox is unchecked, uncheck the header checkbox
        $('#confirmTable').on('change', '.confirm-row-select', function () {
            if (!this.checked) {
                $('#selectAllConfirm').prop('checked', false);
            } else {
                // If all checkboxes are checked, check the header checkbox
                var allChecked = $('#confirmTable .confirm-row-select').length ===
                    $('#confirmTable .confirm-row-select:checked').length;
                $('#selectAllConfirm').prop('checked', allChecked);
            }
        });

    }

        }


        // Date Range Picker for Dashboard
        function initDateRangePicker() {
            var start = moment().subtract(29, 'days');
            var end = moment();
            function cb(start, end) {
                $('#reportrange').val(start.format('YYYY-MM-DD') + ' - ' + end.format('YYYY-MM-DD'));
                startDateGlobal = start.format("YYYY-MM-DD");
                endDateGlobal = end.format("YYYY-MM-DD");
                loadDashboardData(start.format("YYYY-MM-DD"), end.format("YYYY-MM-DD"));

    // Date Range Picker for Dashboard
    function initDateRangePicker() {
        var start = moment().subtract(29, 'days');
        var end = moment();
        function cb(start, end) {
            $('#reportrange').val(start.format('YYYY-MM-DD') + ' - ' + end.format('YYYY-MM-DD'));
            startDateGlobal = start.format("YYYY-MM-DD");
            endDateGlobal = end.format("YYYY-MM-DD");
            loadDashboardData(start.format("YYYY-MM-DD"), end.format("YYYY-MM-DD"));





        }
        $('#reportrange').daterangepicker({
            startDate: start, endDate: end, autoUpdateInput: false,
            ranges: {
                'Today': [moment(), moment()],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 1 Month': [moment().subtract(1, 'month'), moment()],
                'Last 3 Months': [moment().subtract(3, 'month'), moment()],
                'Last 1 Year': [moment().subtract(1, 'year'), moment()]
            },
            locale: { cancelLabel: 'Clear' }
        }, cb);

        $('#reportrange').on('cancel.daterangepicker', function () {
            $(this).val('');
            loadDashboardData();
            startDateGlobal = null;
            endDateGlobal = null;

        });
    }

</script>
