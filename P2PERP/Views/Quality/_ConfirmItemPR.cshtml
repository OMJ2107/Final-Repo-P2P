<!-- Confirm Item List Table Container -->
<div class="container mt-5 card shadow-sm">

    <div class="row align-items-center my-3">
        <!-- 🔹 Date Range Picker (Left aligned) -->
        <div class="col-md-3">
            <div class="input-group" style="max-width: 280px;">
                <span class="input-group-text bg-primary text-white">
                    <i class="bi bi-calendar-event"></i>
                </span>
                <input type="text" id="tblConfirm" class="form-control" readonly placeholder="Select Date Range" />
            </div>
        </div>

        <!--  Centered Heading -->
        <div class="col-md-6 text-center">
            <h4 class="mb-0 text-primary">Confirm Item List</h4>
        </div>

        <!--  Empty right column (optional) -->
        <div class="col-md-3"></div>
    </div>

    <div class="table-responsive">
        <table id="confirmItemTable" class="table table-striped table-bordered wrap" style="width:100%">
            <thead class="table-dark">
                <tr>
                    <th><input type="checkbox" id="selectAllConfirm" /></th>
                    <th>Sr No</th>
                    <th>GRN Code</th>
                    <th>Vendor Name</th>
                    <th>Add Date</th>
                    <th>Action</th>
                </tr>
            </thead>
        </table>
    </div>
</div>

<!-- Modal for View Item -->
<div class="modal fade" id="viewItemModal" tabindex="-1" aria-labelledby="viewItemModalLabel" aria-hidden="true" data-bs-backdrop="True">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">

            <!-- 🔹 Centered Header with Background -->
            <div class="modal-header bg-primary text-white justify-content-center py-3">
                <h5 class="modal-title text-white fw-bold text-center w-100" id="viewItemModalLabel">Confirm Item Details</h5>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-2 mt-1 mb-2" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <!--  GRN Code Box -->
            <div class="px-4 py-3 ">
                <div class="border rounded bg-light p-2 d-inline-block">
                    <strong>GRN Code:</strong>
                    <span id="modalGRNCode" class="text-black  fw-bold"></span>
                </div>
            </div>

            <div class="modal-body">
                <!-- Export Buttons for Modal Table -->
                <div class="mb-3 d-flex justify-content-between align-items-center">
                    <div id="modalTableButtons" class="btn-group"></div>
                </div>

                <!-- Dynamic Item Details Table -->
                <table class="table table-bordered" id="itemDetailsTable">
                    <thead class="table-dark">
                        <tr>
                            <th><input type="checkbox" id="selectAllModalItemsConfirm" /></th>
                            <th>Sr No</th>
                            <th>Item Code</th>
                            <th>Item Name</th>
                            <th>Quality Check Date</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>

                <div id="noDataMessage" class="text-center text-muted" style="display:none;">
                    No item details found for this GRN Code.
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    div.dataTables_wrapper div.dataTables_paginate {
        text-align: right;
    }

    div.dataTables_filter input {
        width: auto;
        display: inline-block;
    }

    div.dt-buttons {
        margin-bottom: 0 !important;
    }

    #toast-container {
        z-index: 99999 !important;
    }

    #itemDetailsTable th,
    #itemDetailsTable td {
        vertical-align: middle;
        text-align: center;
    }

    /*  Confirm Item Table ke liye */
    #confirmItemTable th,
    #confirmItemTable td {
        vertical-align: middle !important;
        text-align: center;
    }

    /*  Modal ke andar ka table ke liye */
    #itemDetailsTable th,
    #itemDetailsTable td {
        vertical-align: middle !important;
        text-align: center;
    }

    div.dataTables_wrapper div.dataTables_paginate {
        text-align: right !important;
    }

    .tooltip-inner {
        font-weight: 600 !important;
        font-family: 'Arial', sans-serif;
        font-size: 13px;
    }

    /* Smaller checkbox styling for all tables */
    .small-checkbox {
        width: 16px !important;
        height: 16px !important;
        transform: scale(0.7);
        margin: 0 auto;
        display: block;
        cursor: pointer;
    }

    /* Ensure proper alignment */
    #confirmItemTable th:first-child,
    #confirmItemTable td:first-child,
    #itemDetailsTable th:first-child,
    #itemDetailsTable td:first-child {
        width: 20px !important;
        text-align: center !important;
        padding: 8px 4px !important;
    }

    /* Select All checkbox specific styling */
    #selectAllConfirm,
    #selectAllModalItemsConfirm {
        width: 16px !important;
        height: 16px !important;
        transform: scale(0.7);
        margin: 0 auto;
        display: block;
        cursor: pointer;
    }

    /* Table cell padding adjustment for checkboxes */
    #confirmItemTable td:first-child,
    #itemDetailsTable td:first-child {
        padding: 8px 4px !important;
    }

    /* Modal positioning */
    .modal-dialog-centered {
        display: flex;
        align-items: center;
        min-height: calc(100% - 1rem);
    }

    button.dt-button.processing,
    div.dt-button.processing {
        pointer-events: auto !important;
        opacity: 1 !important;
        background: none !important;
    }

        button.dt-button.processing:after {
            content: none !important;
        }

    /* Search input styling  */
    .input-group-text {
        background-color: #f8f9fa;
        border: 1px solid #ced4da;
    }
</style>

<script>
    $(document).ready(function () {
        //  Toastr Configuration
        toastr.options = {
            "closeButton": true,
            "progressBar": true,
            "positionClass": "toast-top-right",
            "timeOut": "3000"
        };

        //   Initialize Date Range Picker with the format you provided
        $('#tblConfirm').daterangepicker({
            autoUpdateInput: false,
            alwaysShowCalendars: false,
            locale: {
                cancelLabel: 'Clear',
                format: 'DD-MM-YYYY',
                applyLabel: 'Apply',
                customRangeLabel: 'Custom Range'
            },
            ranges: {
                'Today': [moment(), moment()],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
                'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
                'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]
            }
        }, function (start, end) {
            // Set the date range in the input field
            $('#tblConfirm').val(start.format('DD-MM-YYYY') + ' - ' + end.format('DD-MM-YYYY'));

            // Store the dates in data attributes for filtering
            $('#tblConfirm').data('start', start);
            $('#tblConfirm').data('end', end);

            // Trigger table redraw
            $('#confirmItemTable').DataTable().draw();
        });

        // Handle cancel event
        $('#tblConfirm').on('cancel.daterangepicker', function () {
            $(this).val('Select Date Range');
            $(this).removeData('start').removeData('end');
            $('#confirmItemTable').DataTable().draw();
        });

        // Set initial placeholder value
        $('#tblConfirm').val('Select Date Range');

        //  Custom filter for Add Date column - UPDATED for DD-MM-YYYY format
        $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
            if (settings.nTable.id !== 'confirmItemTable') return true;

            const start = $('#tblConfirm').data('start');
            const end = $('#tblConfirm').data('end');
            const addDateStr = data[4]; // Add Date column

            // If no date range selected, show all rows
            if (!start || !end) return true;

            // If no date in the row, exclude it
            if (!addDateStr || addDateStr.trim() === '') return false;

            // Try multiple common date formats with priority to DD-MM-YYYY
            const addDate = moment(addDateStr, ['DD-MM-YYYY', 'YYYY-MM-DD', 'MM/DD/YYYY', 'DD/MM/YYYY', 'YYYY/MM/DD'], true);

            if (!addDate.isValid()) {
                console.warn('Invalid date format in table:', addDateStr);
                return false;
            }

            return addDate.isSameOrAfter(start) && addDate.isSameOrBefore(end);
        });

        //  Initialize Main DataTable
        const table = $('#confirmItemTable').DataTable({
            processing: true,
            serverSide: false,
            responsive: true,
            dom: '<"d-flex justify-content-between align-items-center mb-2"Bf>rt<"d-flex justify-content-between align-items-center mt-2"ip>',
            ajax: {
                url: '@Url.Action("ConfirmItemsPSR", "Quality")',
                type: "GET",
                datatype: "json",
                error: function (xhr) {
                    console.log("Ajax Error:", xhr.responseText);
                    alert("Error: " + xhr.status + " - " + xhr.statusText);
                }
            },
            columns: [
                {
                    data: null,
                    orderable: false,
                    searchable: false,
                    className: "dt-center",
                    render: function (data, type, row) {
                        return `<input type="checkbox" class="row-checkbox small-checkbox" data-id="${row.GRNCode}">`;
                    }
                },
                {
                    data: null,
                    title: 'Sr No',
                    orderable: false,
                    searchable: false,
                    className: "dt-center",
                    render: function (data, type, row, meta) {
                        return meta.row + 1;
                    }
                },
                { data: "GRNCode", orderable: false, className: "dt-center" },
                { data: "VenderName", orderable: false, className: "dt-center" },
                { data: "AddDate", orderable: false, className: "dt-center" },
                {
                    data: null,
                    title: 'Action',
                    orderable: false,
                    searchable: false,
                    className: "dt-center",
                    render: function (data, type, row) {
                        return `<button
                            class="btn btn-sm btn-primary open-view-modal"
                            data-grn="${row.GRNCode}"
                            data-bs-toggle="tooltip"
                            data-bs-placement="top"
                            title="View Item Details"
                        >
                            <i class="bi bi-eye-fill"></i>
                        </button>`;
                    }
                }
            ],
            buttons: [
                // PRINT - Main Table
                {
                    extend: 'print',
                    text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                    title: '',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('.row-checkbox').prop('checked');
                        },
                        columns: ':not(:first-child):not(:last-child)',
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 1) {
                                    const $node = $(node);
                                    if ($node.closest('tr').find('.row-checkbox').prop('checked')) {
                                        const selectedRows = $('#confirmItemTable tbody input.row-checkbox:checked');
                                        const currentRow = $node.closest('tr');
                                        const currentIndex = selectedRows.index(currentRow.find('.row-checkbox'));
                                        return currentIndex + 1;
                                    }
                                    return '';
                                }
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        const selected = $('input.row-checkbox:checked').length;
                        if (selected === 0) {
                            toastr.warning('Please select at least one row before exporting.');
                            return;
                        }
                        $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                    },
                    customize: function (win) {
                        var $body = $(win.document.body);

                        $body.append(`
                            <style>
                                thead th {
                                    background-color: black !important;
                                    color: white !important;
                                    text-align: center !important;
                                }
                                table {
                                    border-collapse: collapse !important;
                                    width: 100% !important;
                                }
                                td, th {
                                    border: 1px solid #000 !important;
                                    padding: 6px !important;
                                    text-align: center !important;
                                }
                                .centered-content {
                                    text-align: center !important;
                                }
                            </style>
                        `);

                        $body.prepend(`
                            <div style="text-align: center; margin-bottom: 20px;">
                                <h2>Confirm Item List</h2>
                                <p>Generated on: ${moment().format("DD/MM/YYYY")}</p>
                            </div>
                        `);

                        $body.find('table').addClass('centered-content');
                        $body.find('td, th').css('text-align', 'center');

                        const $table = $body.find('table');
                        let serialNo = 1;
                        $table.find('tbody tr').each(function () {
                            const $row = $(this);
                            $row.find('td:first').text(serialNo++);
                        });

                        $body.find('h1').remove();
                    }
                },
                // PDF - Main Table
                {
                    extend: 'pdfHtml5',
                    text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                    title: 'Confirm Item List',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('.row-checkbox').prop('checked');
                        },
                        columns: ':not(:first-child):not(:last-child)',
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 1) {
                                    const $node = $(node);
                                    if ($node.closest('tr').find('.row-checkbox').prop('checked')) {
                                        const selectedRows = $('#confirmItemTable tbody input.row-checkbox:checked');
                                        const currentRow = $node.closest('tr');
                                        const currentIndex = selectedRows.index(currentRow.find('.row-checkbox'));
                                        return currentIndex + 1;
                                    }
                                    return '';
                                }
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        const selected = $('input.row-checkbox:checked').length;
                        if (selected === 0) {
                            toastr.warning('Please select at least one row before exporting.');
                            return;
                        }
                        $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                    },
                    customize: function (doc) {
                        doc.pageMargins = [40, 60, 40, 40];

                        doc.content[0] = {
                            text: 'Confirm Item List\nGenerated on: ' + moment().format("DD/MM/YYYY"),
                            alignment: 'center',
                            margin: [0, 0, 0, 10],
                            fontSize: 14,
                            bold: true
                        };

                        const table = doc.content.find(n => n.table);
                        if (table) {
                            table.table.widths = Array(table.table.body[0].length).fill('*');
                            table.layout = {
                                hLineWidth: () => 0.5,
                                vLineWidth: () => 0.5,
                                hLineColor: () => '#aaa',
                                vLineColor: () => '#aaa',
                                fillColor: (i) => i === 0 ? '#343a40' : null,
                                paddingLeft: () => 5,
                                paddingRight: () => 5
                            };

                            table.table.body[0].forEach(cell => {
                                cell.fillColor = '#343a40';
                                cell.color = 'white';
                                cell.alignment = 'center';
                                cell.fontSize = 11;
                                cell.bold = true;
                            });

                            let serialNo = 1;
                            table.table.body.forEach((row, rowIndex) => {
                                if (rowIndex > 0) {
                                    row[0].text = serialNo++;
                                }
                                row.forEach(cell => {
                                    cell.alignment = 'center';
                                });
                            });

                            table.alignment = 'center';
                        }

                        doc.defaultStyle = {
                            alignment: 'center'
                        };
                    }
                },
                // EXCEL - Main Table
                {
                    extend: 'excelHtml5',
                    text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                    title: 'Confirm Item List',
                    messageTop: `Generated Date: ${moment().format("DD/MM/YYYY")}`,
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('.row-checkbox').prop('checked');
                        },
                        columns: ':not(:first-child):not(:last-child)',
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 1) {
                                    const $node = $(node);
                                    if ($node.closest('tr').find('.row-checkbox').prop('checked')) {
                                        const selectedRows = $('#confirmItemTable tbody input.row-checkbox:checked');
                                        const currentRow = $node.closest('tr');
                                        const currentIndex = selectedRows.index(currentRow.find('.row-checkbox'));
                                        return currentIndex + 1;
                                    }
                                    return '';
                                }
                                return data;
                            }
                        }
                    },
                    customize: function (xlsx) {
                        let sheet = xlsx.xl.worksheets['sheet1.xml'];

                        // Insert "Sr. No" column at start and make it bold (s="2")
                        let serial = 1;
                        $('row', sheet).each(function () {
                            let rowIndex = parseInt($(this).attr('r'));

                            if (rowIndex === 1) {
                                // Title row - center align and bold
                                $(this).find('c').attr('s', '51');
                            } else if (rowIndex === 2) {
                                // Generated date row - center align and bold
                                $(this).find('c').attr('s', '51');
                            } else if (rowIndex === 3) {
                                // Header row: Add Sr. No column
                                $(this).find('c:first').before(`<c t="inlineStr" s="2"><is><t>Sr. No</t></is></c>`);
                                // Make all header cells bold and centered
                                $(this).find('c').attr('s', '2');
                            } else if (rowIndex > 3) {
                                // Data rows: Add serial numbers
                                $(this).find('c:first').before(`<c t="inlineStr"><is><t>${serial}</t></is></c>`);
                                serial++;
                            }
                        });

                        // Center align title and date rows
                        $('row[r="1"] c', sheet).attr('s', '51'); 
                        $('row[r="2"] c', sheet).attr('s', '51');
                    },
                    action: function (e, dt, button, config) {
                        const selected = $('input.row-checkbox:checked').length;
                        if (selected === 0) {
                            toastr.warning('Please select at least one row before exporting.');
                            return;
                        }
                        $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                    }
                },
                // CSV - Main Table
                {
                    extend: 'csvHtml5',
                    text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                    title: 'Confirm Item List - ' + moment().format("DD/MM/YYYY"),
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('.row-checkbox').prop('checked');
                        },
                        columns: ':not(:first-child):not(:last-child)',
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 1) {
                                    const $node = $(node);
                                    if ($node.closest('tr').find('.row-checkbox').prop('checked')) {
                                        const selectedRows = $('#confirmItemTable tbody input.row-checkbox:checked');
                                        const currentRow = $node.closest('tr');
                                        const currentIndex = selectedRows.index(currentRow.find('.row-checkbox'));
                                        return currentIndex + 1;
                                    }
                                    return '';
                                }
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        const selected = $('input.row-checkbox:checked').length;
                        if (selected === 0) {
                            toastr.warning('Please select at least one row before exporting.');
                            return;
                        }
                        $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                    }
                }
            ]
        });

        //  Select All Main Table
        $('#selectAllConfirm').on('click', function () {
            const isChecked = $(this).is(':checked');
            $('.row-checkbox').prop('checked', isChecked);
        });

        $('#confirmItemTable tbody').on('change', '.row-checkbox', function () {
            const all = $('.row-checkbox').length;
            const checked = $('.row-checkbox:checked').length;
            $('#selectAllConfirm').prop('checked', all === checked);
        });

        //  Modal View Item Logic
        $('#confirmItemTable').on('click', '.open-view-modal', function () {
            const grnCode = $(this).data('grn');
            $('#modalGRNCode').text(grnCode);
            const tbody = $('#itemDetailsTable tbody');
            tbody.empty().append('<tr><td colspan="6" class="text-center">Loading...</td></tr>');
            $('#noDataMessage').hide();

           $.ajax({
    url: '@Url.Action("ConfirmedItemsDetailsPR", "Quality")',
    type: 'GET',
    data: { grnCode },
    success: function (response) {
        tbody.empty();
        if ($.fn.DataTable.isDataTable('#itemDetailsTable')) {
            $('#itemDetailsTable').DataTable().clear().destroy();
        }
        $('#modalTableButtons').empty();
        $('#selectAllModalItemsConfirm').prop('checked', false);

        if (response.success && response.data.length > 0) {
            response.data.forEach((item, i) => {
                tbody.append(`
                    <tr>
                        <td class="dt-center"><input type="checkbox" class="modal-confirm-checkbox small-checkbox" value="${item.ItemCode}" /></td>
                        <td class="dt-center">${i + 1}</td>
                        <td class="dt-center">${item.ItemCode}</td>
                        <td class="dt-center">${item.ItemName}</td>
                        <td class="dt-center">${item.QualityCheckDate}</td>
                    </tr>
                `);
            });

            
            // Reinitialize DataTable with proper DOM including search
            const modalTable = $('#itemDetailsTable').DataTable({
                processing: true,
                serverSide: false,
                responsive: true,
                paging: true,
                searching: true,
                ordering: false,
                lengthChange: false,
                pageLength: 5,
                dom: '<"d-flex justify-content-end align-items-center mb-2"<"button-group">f>rt<"d-flex justify-content-between align-items-center mt-2"ip>',
                language: {
                    search: "Search:",
                },
                buttons: [
                    // PRINT - Modal Table
                    {
                        extend: 'print',
                        text: '<i class="bi bi-printer-fill text-dark fs-6"></i>',
                        title: '',
                        exportOptions: {
                            rows: function (idx, data, node) {
                                return $(node).find('.modal-confirm-checkbox').prop('checked');
                            },
                            columns: ':not(:first-child)',
                            format: {
                                body: function (data, row, column, node) {
                                    if (column === 1) {
                                        const $node = $(node);
                                        if ($node.closest('tr').find('.modal-confirm-checkbox').prop('checked')) {
                                            const selectedRows = $('.modal-confirm-checkbox:checked');
                                            const currentRow = $node.closest('tr');
                                            const currentIndex = selectedRows.index(currentRow.find('.modal-confirm-checkbox'));
                                            return currentIndex + 1;
                                        }
                                        return '';
                                    }
                                    return data;
                                }
                            }
                        },
                        action: function (e, dt, button, config) {
                            const selected = $('.modal-confirm-checkbox:checked').length;
                            if (selected === 0) {
                                toastr.warning('Please select at least one item to export.');
                                return;
                            }
                            $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                        },
                        customize: function (win) {
                            var $body = $(win.document.body);

                            $body.append(`
                    <style>
                        thead th {
                            background-color: black !important;
                            color: white !important;
                            text-align: center !important;
                        }
                        table {
                            border-collapse: collapse !important;
                            width: 100% !important;
                        }
                        td, th {
                            border: 1px solid #000 !important;
                            padding: 6px !important;
                            text-align: center !important;
                        }
                        .centered-content {
                            text-align: center !important;
                        }
                    </style>
                `);

                            $body.prepend(`
                    <div style="text-align: center; margin-bottom: 20px;">
                        <h2>Confirm Item Details - ${$('#modalGRNCode').text()}</h2>
                        <p>Generated on: ${moment().format("DD/MM/YYYY")}</p>
                    </div>
                `);

                            $body.find('table').addClass('centered-content');
                            $body.find('td, th').css('text-align', 'center');

                            const $table = $body.find('table');
                            let serialNo = 1;
                            $table.find('tbody tr').each(function () {
                                const $row = $(this);
                                $row.find('td:first').text(serialNo++);
                            });
                        }
                    },
                    // PDF - Modal Table
                    {
                        extend: 'pdfHtml5',
                        text: '<i class="bi bi-file-earmark-pdf text-danger fs-6"></i>',
                        title: 'Confirm Item Details',
                        exportOptions: {
                            rows: function (idx, data, node) {
                                return $(node).find('.modal-confirm-checkbox').prop('checked');
                            },
                            columns: ':not(:first-child)',
                            format: {
                                body: function (data, row, column, node) {
                                    if (column === 1) {
                                        const $node = $(node);
                                        if ($node.closest('tr').find('.modal-confirm-checkbox').prop('checked')) {
                                            const selectedRows = $('.modal-confirm-checkbox:checked');
                                            const currentRow = $node.closest('tr');
                                            const currentIndex = selectedRows.index(currentRow.find('.modal-confirm-checkbox'));
                                            return currentIndex + 1;
                                        }
                                        return '';
                                    }
                                    return data;
                                }
                            }
                        },
                        action: function (e, dt, button, config) {
                            const selected = $('.modal-confirm-checkbox:checked').length;
                            if (selected === 0) {
                                toastr.warning('Please select at least one item to export.');
                                return;
                            }
                            $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                        },
                        customize: function (doc) {
                            doc.pageMargins = [40, 80, 40, 40];

                            doc.content[0] = {
                                text: `Confirm Item Details - ${$('#modalGRNCode').text()}\nGenerated on: ${moment().format("DD/MM/YYYY")}`,
                                alignment: 'center',
                                margin: [0, 0, 0, 10],
                                fontSize: 14,
                                bold: true
                            };

                            const table = doc.content.find(n => n.table);
                            if (table) {
                                table.table.widths = Array(table.table.body[0].length).fill('*');
                                table.layout = {
                                    hLineWidth: () => 0.5,
                                    vLineWidth: () => 0.5,
                                    hLineColor: () => '#aaa',
                                    vLineColor: () => '#aaa',
                                    fillColor: (i) => i === 0 ? '#343a40' : null,
                                    paddingLeft: () => 5,
                                    paddingRight: () => 5
                                };

                                table.table.body[0].forEach(cell => {
                                    cell.fillColor = '#343a40';
                                    cell.color = 'white';
                                    cell.alignment = 'center';
                                    cell.fontSize = 11;
                                    cell.bold = true;
                                });

                                let serialNo = 1;
                                table.table.body.forEach((row, rowIndex) => {
                                    if (rowIndex > 0) {
                                        row[0].text = serialNo++;
                                    }
                                    row.forEach(cell => {
                                        cell.alignment = 'center';
                                    });
                                });

                                table.alignment = 'center';
                            }

                            doc.defaultStyle = {
                                alignment: 'center'
                            };
                        }
                    },
                    // EXCEL - Modal Table
                    {
                        extend: 'excelHtml5',
                        text: '<i class="bi bi-file-earmark-excel text-success fs-6"></i>',
                        title: 'Confirm Item Details - ' + $('#modalGRNCode').text(),
                        messageTop: `Generated Date: ${moment().format("DD/MM/YYYY")}`,
                        exportOptions: {
                            rows: function (idx, data, node) {
                                return $(node).find('.modal-confirm-checkbox').prop('checked');
                            },
                            columns: ':not(:first-child)',
                            format: {
                                body: function (data, row, column, node) {
                                    if (column === 1) {
                                        const $node = $(node);
                                        if ($node.closest('tr').find('.modal-confirm-checkbox').prop('checked')) {
                                            const selectedRows = $('.modal-confirm-checkbox:checked');
                                            const currentRow = $node.closest('tr');
                                            const currentIndex = selectedRows.index(currentRow.find('.modal-confirm-checkbox'));
                                            return currentIndex + 1;
                                        }
                                        return '';
                                    }
                                    return data;
                                }
                            }
                        },
                        customize: function (xlsx) {
                            let sheet = xlsx.xl.worksheets['sheet1.xml'];

                            // Insert "Sr. No" column at start and make it bold
                            let serial = 1;
                            $('row', sheet).each(function () {
                                let rowIndex = parseInt($(this).attr('r'));

                                if (rowIndex === 1) {
                                    // Title row - center align and bold
                                    $(this).find('c').attr('s', '51');
                                } else if (rowIndex === 2) {
                                    // Generated date row - center align and bold
                                    $(this).find('c').attr('s', '51');
                                } else if (rowIndex === 3) {
                                    // Header row: Add Sr. No column
                                    $(this).find('c:first').before(`<c t="inlineStr" s="2"><is><t>Sr. No</t></is></c>`);
                                    // Make all header cells bold and centered
                                    $(this).find('c').attr('s', '2');
                                } else if (rowIndex > 3) {
                                    // Data rows: Add serial numbers
                                    $(this).find('c:first').before(`<c t="inlineStr"><is><t>${serial}</t></is></c>`);
                                    serial++;
                                }
                            });

                            // Center align title and date rows
                            $('row[r="1"] c', sheet).attr('s', '51');
                            $('row[r="2"] c', sheet).attr('s', '51');
                        },
                        action: function (e, dt, button, config) {
                            const selected = $('.modal-confirm-checkbox:checked').length;
                            if (selected === 0) {
                                toastr.warning('Please select at least one item to export.');
                                return;
                            }
                            $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                        }
                    },
                    // CSV - Modal Table
                    {
                        extend: 'csvHtml5',
                        text: '<i class="bi bi-filetype-csv text-success fs-6"></i>',
                        title: 'Confirm Item Details - ' + $('#modalGRNCode').text() + ' - ' + moment().format("DD/MM/YYYY"),
                        exportOptions: {
                            rows: function (idx, data, node) {
                                return $(node).find('.modal-confirm-checkbox').prop('checked');
                            },
                            columns: ':not(:first-child)',
                            format: {
                                body: function (data, row, column, node) {
                                    if (column === 1) {
                                        const $node = $(node);
                                        if ($node.closest('tr').find('.modal-confirm-checkbox').prop('checked')) {
                                            const selectedRows = $('.modal-confirm-checkbox:checked');
                                            const currentRow = $node.closest('tr');
                                            const currentIndex = selectedRows.index(currentRow.find('.modal-confirm-checkbox'));
                                            return currentIndex + 1;
                                        }
                                        return '';
                                    }
                                    return data;
                                }
                            }
                        },
                        action: function (e, dt, button, config) {
                            const selected = $('.modal-confirm-checkbox:checked').length;
                            if (selected === 0) {
                                toastr.warning('Please select at least one item to export.');
                                return;
                            }
                            $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                        }
                    }
                ],
                initComplete: function () {
                    // Buttons aur search box ko align karne ke liye
                    $('.dataTables_filter').addClass('ms-3');
                }
            });

                        modalTable.buttons().container().appendTo('#modalTableButtons');

                        // Modal checkbox logic
                        $('#selectAllModalItemsConfirm').on('click', function () {
                            $('.modal-confirm-checkbox').prop('checked', this.checked);
                        });

                        $('#itemDetailsTable tbody').on('change', '.modal-confirm-checkbox', function () {
                            const total = $('.modal-confirm-checkbox').length;
                            const selected = $('.modal-confirm-checkbox:checked').length;
                            $('#selectAllModalItemsConfirm').prop('checked', total === selected);
                        });

                    } else {
                        $('#noDataMessage').show();
                    }
                },
                error: function () {
                    tbody.empty().append('<tr><td colspan="6" class="text-danger text-center">Failed to load item details.</td></tr>');
                }
            });

            // Show modal
            new bootstrap.Modal(document.getElementById('viewItemModal')).show();
        });

        // Debug function to check date formats
        table.on('draw', function () {
            console.log('Table redrawn with date filter');
            const start = $('#tblConfirm').data('start');
            const end = $('#tblConfirm').data('end');
            if (start && end) {
                console.log('Active date filter:', {
                    start: start.format('DD-MM-YYYY'),
                    end: end.format('DD-MM-YYYY')
                });
            }
        });
    });
</script>