@{
    Layout = null;
}

<div class="card shadow p-3">
    <!-- 🔹 PO & GRN Information -->
    <div class="border rounded-3 p-3 mb-3 bg-light-subtle">
        <h6 class="fw-bold text-dark mb-2">PO & GRN Information</h6>

        <div class="row g-3">
            <div class="col-md-4">
                <label class="fw-semibold">PO No:</label>
                <input type="text" id="txtPOCode" class="form-control form-control-sm bg-secondary-subtle" value="@ViewBag.POCode" readonly>
            </div>
            <div class="col-md-4">
                <label class="fw-semibold">GRN No:</label>
                <input type="text" id="txtGRNCode" class="form-control form-control-sm bg-secondary-subtle" value="@ViewBag.GRNCode" readonly>
            </div>
            <div class="col-md-4">
                <label class="fw-semibold">PO Date:</label>
                <input type="text"
                       id="txtPODate"
                       class="form-control form-control-sm bg-secondary-subtle"
                       value="@Convert.ToDateTime(ViewBag.PODate).ToString("dd\\/MM\\/yyyy")"
                       readonly>
            </div>
        </div>

        <div class="row g-3 mt-1">
            <div class="col-md-4">
                <label class="fw-semibold">Vendor Name:</label>
                <input type="text" id="txtVendorName" class="form-control form-control-sm bg-secondary-subtle" value="@ViewBag.VendorName" readonly>
            </div>
            <div class="col-md-4">
                <label class="fw-semibold">Company Address:</label>
                <textarea id="txtCompanyAddress"
                          class="form-control form-control-sm bg-secondary-subtle"
                          rows="2"
                          readonly>@ViewBag.CompanyAddress</textarea>
            </div>
            <div class="col-md-4">
                <label class="fw-semibold">Billing Address:</label>
                <textarea id="txtBillingAddress"
                          class="form-control form-control-sm bg-secondary-subtle"
                          rows="2"
                          readonly>@ViewBag.BillingAddress</textarea>
            </div>
        </div>

        <div class="row g-3 mt-1">
            <div class="col-md-4">
                <label class="fw-semibold">Warehouse Name:</label>
                <input type="text"
                       id="txtWarehouseName"
                       class="form-control form-control-sm bg-secondary-subtle"
                       readonly
                       value="@ViewBag.WarehouseName" />
            </div>
            <div class="col-md-4">
                <label class="fw-semibold">Invoice No:<span class="text-danger">*</span></label>
                <input type="text" id="txtInvoiceNo" class="form-control form-control-sm bg-white" placeholder="Enter Invoice Number">
            </div>
            <div class="col-md-4">
                <label class="fw-semibold">Invoice Date:<span class="text-danger">*</span></label>
                <input type="date" id="txtInvoiceDate" class="form-control form-control-sm bg-white"
                       max="@DateTime.Now.ToString("yyyy-MM-dd")">
            </div>
        </div>
    </div>

    <!-- 🔹 Add Item Details -->
    <div class="border rounded-3 p-3 bg-light-subtle">
        <h6 class="fw-bold text-dark mb-2">Add Item Details</h6>

        <div class="row g-3">
            <div class="col-md-4">
                <label class="fw-semibold">Item Name:<span class="text-danger">*</span></label>
                <select id="itemDropdown" class="form-select form-select-sm bg-white">
                    <option value="">Select Item</option>
                </select>
            </div>
            <div class="col-md-4">
                <label class="fw-semibold">Quantity:<span class="text-danger">*</span></label>
                <input type="number" id="txtQty" class="form-control form-control-sm bg-white" placeholder="Enter Quantity">
            </div>
            <div class="col-md-4">
                <label class="fw-semibold">Unit Rate (₹):</label>
                <input type="text" id="txtUnitRate" class="form-control form-control-sm bg-secondary-subtle" readonly>
            </div>
        </div>

        <div class="row g-3 mt-1">
            <div class="col-md-4">
                <label class="fw-semibold">Discount (%):</label>
                <input type="text" id="txtDiscount" class="form-control form-control-sm bg-secondary-subtle" readonly>
            </div>
            <div class="col-md-4">
                <label class="fw-semibold">GST (%):</label>
                <input type="text" id="txtGST" class="form-control form-control-sm bg-secondary-subtle" readonly>
            </div>
            <div class="col-md-4">
                <label class="fw-semibold">Amount (₹):</label>
                <input type="text" id="txtAmount" class="form-control form-control-sm bg-secondary-subtle" readonly>
            </div>
        </div>

        <div class="row g-3 mt-1">
            <div class="col-md-4">
                <label class="fw-semibold">UOM:</label>
                <input type="text" id="txtUOM" class="form-control form-control-sm bg-secondary-subtle" readonly>
            </div>
            <div class="col-md-4">
                <label class="fw-semibold">Quality Check:</label>
                <input type="text" id="txtQC" class="form-control form-control-sm bg-secondary-subtle" readonly>
            </div>
            <div class="col-md-4">
                <label class="fw-semibold">Item Description:</label>
                <textarea id="txtItemDesc" class="form-control form-control-sm bg-secondary-subtle" readonly rows="2"></textarea>
            </div>
        </div>

        <div class="text-end mt-3">
            <button type="button" id="btnAddItem" class="btn btn-success btn-sm px-4">
                <i class="bi bi-plus-circle"></i> Add Item
            </button>
        </div>
    </div>

    <!-- Items DataTable -->
    <div class="table-responsive">
        <table id="itemTable" class="table table-bordered table-striped text-center align-middle" style="width:100%">
            <thead class="table-dark">
                <tr>
                    <th>Sr. No.</th>
                    <th>Item Name</th>
                    <th>Description</th>
                    <th>Quantity</th>
                    <th>Unit Rate (₹)</th>
                    <th>Discount</th>
                    <th>GST %</th>
                    <th>Amount</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
    <div class="text-end mt-3 mb-3">

        <!-- Assign Button -->
        <button type="button" id="btnCreateGRN" class="btn btn-success btn-lg fw-bold" data-bs-toggle="tooltip"
                data-bs-placement="top" title="Create Goods Receipt Note for selected items">
            <i class="bi bi-check-circle me-1"></i> Create GRN
        </button>
    </div>
</div>

<!-- Toast container -->
<div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3" style="z-index:1100;"></div>

<script>
document.addEventListener("DOMContentLoaded", function() {

    const txtDisplay = document.getElementById("txtInvoiceDateDisplay");
    const txtHidden = document.getElementById("txtInvoiceDate");


    // Function to format yyyy-mm-dd -> dd/mm/yyyy
    function formatDate(dateStr) {
        if(!dateStr) return "";
        const [year, month, day] = dateStr.split("-");
        return `${day}/${month}/${year}`;
    }

    // Function to parse dd/mm/yyyy -> yyyy-mm-dd
    function parseDate(displayStr) {
        if(!displayStr) return "";
        const [day, month, year] = displayStr.split("/");
        return `${year}-${month}-${day}`;
    }

    // If server has a preloaded date
    const serverDate = '@(ViewBag.InvoiceDate != null ? Convert.ToDateTime(ViewBag.InvoiceDate).ToString("yyyy-MM-dd") : "")';
    if(serverDate) {
        txtHidden.value = serverDate;
        txtDisplay.value = formatDate(serverDate);
    }

    // When user clicks text input, trigger calendar
    if(txtDisplay && txtHidden){
        txtDisplay.addEventListener("click", () => {
            txtHidden.focus();
            txtHidden.click();
        });

        txtHidden.addEventListener("change", () => {
            txtDisplay.value = formatDate(txtHidden.value);
        });
    }

});

$(document).ready(function () {

    // Initialize Bootstrap tooltips
    function initTooltips() {
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    }

    initTooltips();

    const POCode = '@ViewBag.POCode';
    let POItems = [], selectedItems = new Set();

    const num = v => parseFloat(String(v).replace(/[, ]/g,'').replace('%','')) || 0;

    // Load PO Items into dropdown
    const loadPOItems = (code) => {
        if(!code) return;
        $.get('/GRN/POItemsSSG', { POCode: code }, res=>{
            POItems = res.data || [];
            const dropdown = $('#itemDropdown').empty().append('<option value="">Select Item</option>');
            POItems.forEach(i=> dropdown.append(`<option value="${i.ItemCode}">${i.ItemName}</option>`));
        });
    };

    loadPOItems(POCode);

    // Initialize DataTable for items
    const itemTable = $('#itemTable').DataTable({
        ordering: false,
        responsive: true,
        dom: '<"row mb-2"<"col-md-6"><"col-md-6 d-flex justify-content-end"f>>t<"row mt-2"<"col-md-6"i><"col-md-6 d-flex justify-content-end"p>>',
        columns: [
            { data: null, render: (data, type, row, meta) => meta.row + 1, className: 'text-center' },
            { data: 'ItemName', className: 'text-center' },
            {
                data: 'Description',
                className: 'text-center',
                render: data => `<span data-bs-toggle="tooltip" title="${data}">${data}</span>`
            },
            { data: 'Quantity', className: 'text-center' },
            { data: 'UnitRate', className: 'text-center', render: data => `₹${data}` },
            { data: 'Discount', className: 'text-center', render: data => `${data}%` },
            { data: 'GST', className: 'text-center' },
            { data: 'Amount', className: 'text-center', render: data => `₹${data}` },
            { data: null, render: () => `<button class="btn btn-danger btn-sm deleteRow" data-bs-toggle="tooltip" title="Delete this item"><i class="bi bi-trash3"></i></button>`, orderable: false, className: 'text-center' }
        ]
    });

    // Update total amount after rows change
    const updateTotal = () => {
        let total = 0;
        itemTable.rows().every(function () {
            total += num(this.data().Amount);
        });

        $('#totalAmount').remove();
        $('#itemTable_wrapper').after(`
            <div id="totalAmount" class="d-flex justify-content-end mt-2 mb-2">
                <div class="fw-bold p-2 bg-primary text-white rounded">
                    Total Amount: ₹${total.toFixed(2)}
                </div>
            </div>
        `);
    };

    // When item dropdown changes, fill the fields
    $('#itemDropdown').change(function () {
        const item = POItems.find(x => x.ItemCode == $(this).val());
        if (!item) return;

        $('#txtQty').val(item.Quantity);
        $('#txtUnitRate').val(item.CostPerUnit);
        $('#txtDiscount').val(item.Discount + "%");
        $('#txtGST').val(item.GST);
        $('#txtAmount').val(item.TotalAmount);
        $('#txtItemDesc').val(item.Description);
        $('#txtQC').val(item.IsQuality);
        $('#txtUOM').val(item.UOMName);
    });

    // Qty validation against PO Qty
    $('#txtQty').on('input', function(){
        const entered = num($(this).val());
        const item = POItems.find(x=>x.ItemCode==$('#itemDropdown').val());
        if(item && entered>num(item.Quantity)){
            Swal.fire({ icon:'warning', title:`Qty cannot exceed PO Qty (${item.Quantity})`, showConfirmButton:false, timer:1800 });
            $(this).val(item.Quantity);
        }
    });

    // Auto add % when typing in Discount textbox
    $('#txtDiscount').on('input', function(){
        let val = $(this).val().replace('%','');
        if(val && !isNaN(val)) {
            $(this).val(val + '%');
        }
    });

    // Add item to DataTable with validation
    $('#btnAddItem').click(() => {
        const itemCode = $('#itemDropdown').val();
        if (!itemCode) {
            Swal.fire({ icon: 'warning', title: 'Please select an item', showConfirmButton: false, timer: 1800 });
            return;
        }

        const qty = num($('#txtQty').val());
        if (qty <= 0) {
            Swal.fire({ icon: 'warning', title: 'Enter valid quantity', showConfirmButton: false, timer: 1800 });
            return;
        }

        if (selectedItems.has(itemCode)) {
            Swal.fire({ icon: 'warning', title: 'Item already added', showConfirmButton: false, timer: 1800 });
            return;
        }

        const item = POItems.find(x => x.ItemCode === itemCode);
        if (!item) return;

        selectedItems.add(itemCode);

        itemTable.row.add({
            ItemCode: itemCode,
            ItemName: item.ItemName,
            Description: item.Description,
            Quantity: qty,
            UnitRate: item.CostPerUnit,
            Discount: item.DiscountPercent,
            GST: item.GST,
            Amount: item.TotalAmount
        }).draw(false);

        updateTotal();
        Swal.fire({ icon: 'success', title: 'Item added!', showConfirmButton: false, timer: 1500 });
    });

    // Delete row from DataTable
    $('#itemTable tbody').on('click', '.deleteRow', function(){
        const row = itemTable.row($(this).parents('tr'));
        selectedItems.delete(row.data().ItemCode);
        row.remove().draw();
        updateTotal();
    });

    // Create GRN with proper validations
    $('#btnCreateGRN').click(function () {
        const invoiceNo = $('#txtInvoiceNo').val().trim();
        const invoiceDate = $('#txtInvoiceDate').val();

     if (!invoiceNo) {
    Swal.fire({ icon: 'warning', title: 'Please enter Invoice No', showConfirmButton: false, timer: 1800 });
    return;
    }

     const invoicePattern = /^[a-zA-Z0-9\-\/]+$/;

     if (!invoicePattern.test(invoiceNo)) {
    Swal.fire({ icon: 'warning', title: 'Enter correct Invoice No', showConfirmButton: false, timer: 1800 });
    return;
     }


        if (!invoiceDate) {
            Swal.fire({ icon: 'warning', title: 'Please select Invoice Date', showConfirmButton: false, timer: 1800 });
            return;
        }
        if (itemTable.rows().count() === 0) {
            Swal.fire({ icon: 'warning', title: 'Please add at least one item', showConfirmButton: false, timer: 1800 });
            return;
        }

        // Existing GRN creation code continues here
        var grnHeader = {
            GRNCode: $('#txtGRNCode').val(),
            POCode: $('#txtPOCode').val(),
            InvoiceNo: invoiceNo,
            InvoiceDate: invoiceDate,
            AddedDate: new Date().toISOString(),
            Items: []
        };

        itemTable.rows().every(function () {
            var d = this.data();
            grnHeader.Items.push({ ItemCode: d.ItemCode, Quantity: parseFloat(d.Quantity) });
        });

        var formData = new FormData();
        formData.append('GRNCode', grnHeader.GRNCode);
        formData.append('POCode', grnHeader.POCode);
        formData.append('InvoiceNo', grnHeader.InvoiceNo);
        formData.append('InvoiceDate', grnHeader.InvoiceDate);
        formData.append('AddedDate', grnHeader.AddedDate);

        grnHeader.Items.forEach(function (item, index) {
            formData.append(`Items[${index}].ItemCode`, item.ItemCode);
            formData.append(`Items[${index}].Quantity`, item.Quantity);
        });

        $.ajax({
            url: '/GRN/CreateSSG',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function (res) {
                if (res.success) {
                    Swal.fire({ icon: 'success', title: 'GRN created successfully!', showConfirmButton: false, timer: 1500 }).then(() => {
                        var grnModalEl = document.getElementById('createGrnModal');
                        var grnModal = bootstrap.Modal.getInstance(grnModalEl) || new bootstrap.Modal(grnModalEl);
                        grnModal.hide();
                        itemTable.clear().draw();
                        selectedItems.clear();
                        $('#totalAmount').remove();
                        if ($.fn.DataTable.isDataTable('#approvedPoTable')) $('#approvedPoTable').DataTable().ajax.reload(null, false);
                        if ($.fn.DataTable.isDataTable('#grnTable')) $('#grnTable').DataTable().ajax.reload(null, false);
                    });
                } else {
                    Swal.fire({ icon: 'error', title: res.message, showConfirmButton: false, timer: 2000 });
                }
            }
        });
    });

    // Custom tooltip initialization
    function initTooltips() {
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(function (el) {
            if (el._tooltip) el._tooltip.dispose();
            el._tooltip = new bootstrap.Tooltip(el, {
                template: '<div class="tooltip" role="tooltip">' +
                    '<div class="tooltip-arrow"></div>' +
                    '<div class="tooltip-inner" style="background-color:#000; color:#fff;"></div>' +
                    '</div>'
            });
        });
    }

    initTooltips();
    $('#itemTable').on('draw.dt', function () { initTooltips(); });

});
</script>





