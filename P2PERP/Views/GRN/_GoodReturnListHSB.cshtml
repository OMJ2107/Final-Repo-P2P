<h4 class="text-center text-primary fw-bold">Goods Return List</h4>

<!-- Date Filters -->
<div class="mb-3 d-flex gap-2">
    <div class="input-group" style="max-width: 280px;">
        <span class="input-group-text bg-primary text-white">
            <i class="bi bi-calendar-date"></i> <!-- Bootstrap icon -->
        </span>
        <input type="text" id="returnGoodsRange" class="form-control" placeholder="Select date range" readonly />
    </div>
    <!-- Reset Filter Button -->
    @*<button id="resetFilter" class="btn btn-primary">
            <i class="bi bi-arrow-repeat"></i> Reset
        </button>*@
</div>



<div class="row">
    <div class="col-12">
        <div class="table-responsive">
            <table id="ReturnGoods" class="table table-striped table-bordered text-center">
                <thead class="table-dark dt-head-center">
                    <tr>
                        <th><input type="checkbox" id="selectAllReturn"></th> <!-- checkbox now matches DataTable column -->
                        <th>SR.NO</th>
                        <th>GR Date</th>
                        <th>GRN Code</th>
                        <th>Reason Of Rejection</th>
                        <th>Vendor Name</th>
                        <th>Invoice No</th>
                        <th>Status</th>
                        <th>Action</th>
                    </tr>
                </thead>

                <tbody></tbody>
            </table>
        </div>
    </div>
</div>

<!-- Universal Modal for Print/Dispatch -->
<div class="modal fade" id="packingSlipModal" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
        <div class="modal-content">

            <!-- Header -->
            <div class="modal-header bg-gradient bg-primary text-white d-flex justify-content-center align-items-center">
                <h5 id="modalHeading" class="modal-title fw-bold text-uppercase text-white mb-2  heading"></h5>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3" data-bs-dismiss="modal"></button>
            </div>

            <!-- Body -->
            <div class="modal-body" id="PrintContainer">
                <!-- Partial will be injected here -->
            </div>
        </div>
    </div>
</div>



<script>
    $(document).ready(function () {


        // Reusable PDF/Print customization function
        function customizeDoc(doc) {
            // Title Styling
            doc.styles.title = {
                color: '#000000',
                fontSize: 16,
                bold: true,
                alignment: 'center'
            };

            // Generated on date
            doc.content.splice(1, 0, {
                text: 'Generated on: ' + new Date().toISOString().split('T')[0],
                fontSize: 10,
                italics: true,
                alignment: 'center',
                margin: [0, 0, 0, 12]
            });

            // Table Header Styling
            doc.styles.tableHeader = {
                fillColor: '#000000',
                color: 'white',
                bold: true,
                fontSize: 11,
                alignment: 'center'
            };

            // Table Border + Padding
            var objLayout = {};
            objLayout['hLineWidth'] = function () { return .5; };
            objLayout['vLineWidth'] = function () { return .5; };
            objLayout['hLineColor'] = function () { return '#aaa'; };
            objLayout['vLineColor'] = function () { return '#aaa'; };
            objLayout['paddingLeft'] = function () { return 6; };
            objLayout['paddingRight'] = function () { return 6; };

            // Get the table
            var tableNode = doc.content[doc.content.length - 1];
            tableNode.layout = objLayout;

            // Set fixed widths for all columns
            var colCount = tableNode.table.body[0].length;
            tableNode.table.widths = Array(colCount).fill('*');

            // Wrap in margin to simulate center alignment
            tableNode.alignment = 'center';
            tableNode.margin = [0, 0, 0, 0];
        }

        // Clear processing state for all DataTable buttons
        window.__dt_clearAllProcessing = function () {
            try {
                // Try to clear via DataTables API
                var tables = $.fn.dataTable.tables();
                for (var i = 0; i < tables.length; i++) {
                    try {
                        var api = $(tables[i]).DataTable();
                        if (!api || !api.buttons) continue;
                        var btnCount = (api.buttons().nodes && api.buttons().nodes().length) || 0;
                        for (var j = 0; j < btnCount; j++) {
                            try { api.button(j).processing(false); } catch (e) { }
                        }
                    } catch (e) { }
                }
            } catch (e) { }

            // Fallback DOM cleanup
            try {
                $('.dt-button').removeClass('dt-button-processing');
                $('.dt-button').prop('disabled', false);
            } catch (e) { }
        };

        // Listen for print-done message from print window
        window.addEventListener('message', function (ev) {
            if (ev && ev.data === 'dt_print_done') {
                window.__dt_clearAllProcessing();
            }
        });

        // Store original button actions if not already stored
        if (!$.fn.dataTable.ext.buttons.pdfHtml5.__originalAction) {
            $.fn.dataTable.ext.buttons.pdfHtml5.__originalAction =
                $.fn.dataTable.ext.buttons.pdfHtml5.action;
        }
        if (!$.fn.dataTable.ext.buttons.print.__originalAction) {
            $.fn.dataTable.ext.buttons.print.__originalAction =
                $.fn.dataTable.ext.buttons.print.action;
        }
        if (!$.fn.dataTable.ext.buttons.excelHtml5.__originalAction) {
            $.fn.dataTable.ext.buttons.excelHtml5.__originalAction =
                $.fn.dataTable.ext.buttons.excelHtml5.action;
        }
        if (!$.fn.dataTable.ext.buttons.csvHtml5.__originalAction) {
            $.fn.dataTable.ext.buttons.csvHtml5.__originalAction =
                $.fn.dataTable.ext.buttons.csvHtml5.action;
        }

        // Toast notification function
        // ✅ Configure toastr once
        toastr.options = {
            closeButton: true,
            progressBar: true,
            newestOnTop: true,
            positionClass: "toast-top-right",
            preventDuplicates: true,
            timeOut: 3000,
            extendedTimeOut: 1000,
            showDuration: 300,
            hideDuration: 300,
            showMethod: "slideDown",
            hideMethod: "fadeOut"
        };



        // Date Range Setup
        let startDate = null;
        let endDate = null;

        function cb(start, end) {
            $('#returnGoodsRange').val(start.format('DD/MM/YYYY') + ' - ' + end.format('DD/MM/YYYY'));
            startDate = start;
            endDate = end;
            if ($.fn.DataTable.isDataTable('#ReturnGoods')) {
                table.draw();
            }
        }

        // Clear date range on cancel
        $('#returnGoodsRange').on('cancel.daterangepicker', function (ev, picker) {
            startDate = null;
            endDate = null;
            $(this).val('');
            table.draw();
        });

        // Initialize daterangepicker (empty input initially)
        $('#returnGoodsRange').daterangepicker({
            autoUpdateInput: false,
            locale: { cancelLabel: 'Clear' },// keep input empty at first
            ranges: {
                'Today': [moment(), moment()],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
                'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
                'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]
            }
        }, cb);

        // Custom Filter
        $.fn.dataTable.ext.search.push(function (settings, data) {
            if (settings.nTable.id !== 'ReturnGoods') return true;
            const addedDate = moment(data[3], ["DD/MM/YYYY", "DD/MM/YYYY HH:mm:ss"]); // index 3 = "GR Date"
            if (!startDate || !endDate) return true; // no filter on first load
            if (!addedDate.isValid()) return true;
            return addedDate.isSameOrAfter(startDate, 'day') && addedDate.isSameOrBefore(endDate, 'day');
        });

        // DataTable Init
        var table = $('#ReturnGoods').DataTable({
            dom: '<"d-flex justify-content-between align-items-center mb-2"Bf>rt<"d-flex justify-content-between align-items-center mt-2"ip>',
            responsive: true,
            ajax: "/GRN/getReturnGoodsList",
            columns: [
                {
                    data: null,
                    orderable: false,
                    render: (data, type, row) => `<input type="checkbox" class="row-select" value="${row.GRNCode}">`
                },
                {
                    data: null,
                    title: "SR.NO",
                    orderable: false,
                    render: function (data, type, row, meta) {
                        return meta.row + 1;
                    }
                },
                { data: "GoodReturnCode", title: "GR Code" },
                {
                    data: "AddedDate",
                    title: "GR Date",
                    render: function (data, type, row) {
                        // Check if date is valid
                        if (!data) return "";
                        return moment(data).format("DD/MM/YYYY"); // Change to your desired format
                    }
                },
                { data: "GRNCode", title: "GRN Code" },
                {
                    data: "ReasonOfRejection",
                    title: "Reason Of Rejection",

                },
                { data: "VenderName", title: "Vendor Name" },
                { data: "InvoiceNo", title: "Invoice No" },
                {
                    data: 'StatusName',
                    className: 'text-center fw-bold',
                    render: function (data) {
                        let statusText = data || 'Unknown';
                        let statusLower = statusText.trim().toLowerCase();

                        let bgColor = '#198754'; // default gray


                        if (statusLower == 'assign') bgColor = '#0d6efd';       // blue (primary)
                        else if (statusLower === 'dispatch') bgColor = '#198754';     // green (success)

                        return `<span class="px-2 py-1 rounded text-white" style="background-color:${bgColor}">${statusText}</span>`;
                    }
                },
                {
                    data: null,
                    title: "Action",
                    orderable: false,
                    render: (data, type, row) => {
                        if (row.StatusName === "Dispatch") {
                            return `
                <button type="button"
                        class="btn btn-success btn-sm btn-print square-pill d-inline-flex align-items-center px-3 shadow-sm"
                        data-grn="${row.GRNCode}"
                        data-bs-toggle="tooltip"
                        data-bs-placement="top"
                        title="Print Good Return">
                    <i class="bi bi-printer-fill fs-5"></i>
                </button>`;
                        } else if (row.StatusName === "Assign") {
                            return `
                <button type="button"
                        class="btn btn-primary btn-sm btn-dispatch square-pill d-inline-flex align-items-center px-3 shadow-sm"
                        data-grn="${row.GRNCode}"
                        data-bs-toggle="tooltip"
                        data-bs-placement="top"
                        title="Dispatch Good Return">
                    <i class="bi bi-truck-front-fill fs-5"></i>
                </button>`;
                        } else {
                            return `<span class="text-muted">No Action</span>`;
                        }
                    }
                }
            ],

            columnDefs: [
                { targets: "_all", className: "text-center" } // center all columns
            ],
            ordering: false,
            buttons: [
                // Print button
                {
                    extend: 'print',
                    text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                    title: 'Return Goods Report',
                    exportOptions: {
                        columns: [1, 2, 3, 4, 5, 6, 7],
                        rows: selectedRows,
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                if (colIdx === 1) return getExportSrNo(rowIdx, table);
                                return data;
                            }
                        }
                    },
                    customize: function (win) {
                        var $body = $(win.document.body);

                        // Add header
                        $body.prepend(`
            <h1 style="text-align:center;">Return Goods Report</h1>
            <div style="text-align:center;font-style:italic;font-size:10pt;margin-bottom:12px;">
                Generated on: ${moment().format("DD/MM/YYYY")}
            </div>
        `);

                        // Style table
                        $body.find('table')
                            .addClass('table table-bordered table-striped')
                            .css({ width: '100%', 'border-collapse': 'collapse' });

                        $body.append(`
            <style>
                thead th {
                    background-color: black !important;
                    color: white !important;
                    text-align: center !important;
                    -webkit-print-color-adjust: exact !important;
                    print-color-adjust: exact !important;
                }
                td, th {
                    border: 1px solid #000 !important;
                    padding: 6px !important;
                    text-align:center !important;
                }
            </style>
        `);

                        $body.css('font-size', '12pt');
                    },
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);

                        if (selected === 0) {
                            showExportToast();
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        // Show spinner
                        try { btnApi.processing(true); } catch (err) { }

                        // Call original print action
                        try {
                            $.fn.dataTable.ext.buttons.print.__originalAction.call(this, e, dt, button, config);
                        } catch (err) {
                            // Ensure spinner not left running
                            setTimeout(function () { try { btnApi.processing(false); } catch (e) { } }, 300);
                            throw err;
                        }

                        // Final fallback: if print window never reports, clear after 2s
                        setTimeout(function () { try { btnApi.processing(false); } catch (err) { } }, 2000);
                    }
                },

                // PDF Export
                {
                    extend: 'pdfHtml5',
                    text: '<i class="bi bi-file-earmark-pdf-fill text-danger fs-5"></i>',
                    titleAttr: 'PDF',
                    title: 'Return Goods Report',
                    orientation: 'landscape',
                    pageSize: 'A4',
                    exportOptions: {
                        columns: [1, 2, 3, 4, 5, 6, 7],
                        rows: selectedRows,
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                if (colIdx === 1) return getExportSrNo(rowIdx, table);
                                return data;
                            }
                        }
                    },
                    customize: function (doc) {
                        doc.pageMargins = [40, 60, 40, 40];
                        doc.styles.title = { fontSize: 16, bold: true, alignment: 'center', margin: [0, 0, 0, 12] };
                        doc.content.splice(1, 0, {
                            text: `Generated on: ${moment().format("DD/MM/YYYY")}`,
                            alignment: 'center',
                            italics: true,
                            fontSize: 10
                        });

                        let tableNode = doc.content.find(n => n.table);
                        if (tableNode) {
                            tableNode.table.widths = ['10%', '15%', '15%', '15%', '15%', '15%', '15%'];
                            tableNode.layout = {
                                hLineWidth: () => 0.5,
                                vLineWidth: () => 0.8,
                                hLineColor: () => '#ccc',
                                vLineColor: () => '#ccc',
                                fillColor: rowIdx => rowIdx === 0 ? '#343a40' : null
                            };

                            // Header styling
                            tableNode.table.body[0].forEach(cell => {
                                cell.color = 'white';
                                cell.alignment = 'center';
                                cell.bold = true;
                                cell.fontSize = 11;
                            });

                            // Body styling
                            tableNode.table.body.slice(1).forEach((row, idx) => {
                                row.forEach(cell => { cell.alignment = 'center'; cell.fontSize = 10; cell.margin = [5, 3, 5, 3]; });
                                if (idx % 2 === 0) row.forEach(cell => { cell.fillColor = '#f9f9f9'; });
                            });
                        }
                    },
                    action: function (e, dt, button, config) {
                        var selected = dt.$('.row-select:checked', { page: 'all' }).length;
                        var btnApi = dt.button(button);
                        if (selected === 0) { showExportToast(); btnApi.processing(false); return; }
                        btnApi.processing(true);

                        if (window.pdfMake && pdfMake.createPdf && !pdfMake._patchedForDT) {
                            (function () {
                                var origCreate = pdfMake.createPdf;
                                pdfMake.createPdf = function (docDefinition) {
                                    var pdfDoc = origCreate.call(pdfMake, docDefinition);
                                    var origDownload = pdfDoc.download;
                                    pdfDoc.download = function (filename, cb) {
                                        origDownload.call(pdfDoc, filename, function () {
                                            try { btnApi.processing(false); } catch (err) { }
                                            if (typeof cb === 'function') cb();
                                        });
                                    };
                                    return pdfDoc;
                                };
                                pdfMake._patchedForDT = true;
                            })();
                        }

                        $.fn.dataTable.ext.buttons.pdfHtml5.__originalAction.call(this, e, dt, button, config);
                        setTimeout(function () { try { btnApi.processing(false); } catch (err) { } }, 1500);
                    }
                },

                // Excel Export
                {
                    extend: 'excelHtml5',
                    text: '<i class="bi bi-file-earmark-excel-fill text-success fs-5"></i>',
                    titleAttr: 'Excel',
                    title: `Return Goods Report Generated on: ${moment().format("DD/MM/YYYY")}`,
                    exportOptions: {
                        columns: [1, 2, 3, 4, 5, 6, 7],
                        rows: selectedRows,
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                if (colIdx === 1) return getExportSrNo(rowIdx, table);
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        var selected = dt.$('.row-select:checked', { page: 'all' }).length;
                        var btnApi = dt.button(button);
                        if (selected === 0) { showExportToast(); try { btnApi.processing(false); } catch (err) { } return; }
                        try { btnApi.processing(true); } catch (err) { }
                        $.fn.dataTable.ext.buttons.excelHtml5.__originalAction.call(this, e, dt, button, config);
                        setTimeout(function () { try { btnApi.processing(false); } catch (err) { } }, 300);
                    }
                },

                // CSV Export
                {
                    extend: 'csvHtml5',
                    text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                    titleAttr: 'CSV',
                    title: 'Return_Goods_Report',
                    exportOptions: {
                        columns: [1, 2, 3, 4, 5, 6, 7],
                        rows: selectedRows,
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                if (colIdx === 1) return getExportSrNo(rowIdx, table);
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);

                        if (selected === 0) {
                            showExportToast();
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        try { btnApi.processing(false); } catch (err) { }

                        $.fn.dataTable.ext.buttons.csvHtml5.__originalAction.call(this, e, dt, button, config);

                        // Stop spinner almost immediately (no real callback exists)
                        setTimeout(function () {
                            try { btnApi.processing(false); } catch (err) { }
                        }, 300);
                    }
                }
            ],
            drawCallback: function (settings) {
                // Recalculate Sr.No
                var api = this.api();
                api.column(1, { page: 'current' }).nodes().each((cell, i) => cell.innerHTML = i + 1 + settings._iDisplayStart);
                // Initialize tooltips
                $('[data-bs-toggle="tooltip"]').tooltip({ customClass: 'tooltip-dark' });
            }

        });

        // Configure toastr once
        toastr.options = {
            closeButton: true,
            progressBar: true,
            preventDuplicates: true,
            newestOnTop: true,
            positionClass: "toast-top-right",
            timeOut: "3000" // 3 seconds
        };

        // Helper function for warning toast
        function showExportToast() {
            toastr.warning("Please select at least one row before exporting.");
        }

        // Reset Filter Button
        $('#resetFilter').on('click', function () {
            startDate = null;
            endDate = null;
            $('#returnGoodsRange').val(''); // clear input
            table.draw(); // reload all rows
        });

        // Init Bootstrap tooltips for DataTable
        $('#ReturnGoods').on('draw.dt', function () {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(el => new bootstrap.Tooltip(el));
        });
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(el => new bootstrap.Tooltip(el));

        // Row Selection
        $('#ReturnGoods thead').on('change', '#selectAllReturn', function () {
            const isChecked = $(this).is(':checked');
            $('#ReturnGoods .row-select').prop('checked', isChecked);
        });
        $('#ReturnGoods tbody').on('change', '.row-select', function () {
            const all = $('#ReturnGoods .row-select').length;
            const checked = $('#ReturnGoods .row-select:checked').length;
            $('#selectAllReturn').prop('checked', all === checked);
        });

        // Action Buttons
        $('#ReturnGoods tbody').on('click', '.btn-print', function () {
            const rowData = table.row($(this).closest('tr')).data();
            $.get("/GRN/PrintReturnListHSB", { grCode: rowData.GoodReturnCode }, function (html) {
                $("#PrintContainer").html(html);
                $("#modalHeading").text("Return Goods Print");
                $("#packingSlipModal").modal("show");
            });
        });
        $('#ReturnGoods tbody').on('click', '.btn-dispatch', function () {
            const rowData = table.row($(this).closest('tr')).data();
            $.get("/GRN/DispatchGRForm", { grCode: rowData.GoodReturnCode }, function (html) {
                $("#PrintContainer").html(html);
                $("#modalHeading").text("Return Goods Dispatch");
                $("#packingSlipModal").modal("show");
            });
        });

        // Export Without Loader
        function exportWithoutLoader(buttonType) {
            return function (e, dt, button, config) {
                if ($('.row-select:checked').length === 0) {
                    showToast("Please select at least one row to export!");
                    return;
                }
                const buttonsApi = dt.button(buttonType);
                if (buttonsApi) {
                    const originalAction = $.fn.dataTable.ext.buttons[buttonType].action;
                    originalAction.call(this, e, dt, button, config);
                }
            };
        }
    });

    // Row selector function
    function selectedRows(idx, data, node) {
        return $(node).find('.row-select').prop('checked');
    }



    // toaster show
    function showToast(message, type = 'danger') {
        const toastHTML = `
    <div class="toast align-items-center text-white bg-${type} border-0 mb-2" role="alert">
        <div class="d-flex">
            <div class="toast-body">${message}</div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    </div>`;
        const $toast = $(toastHTML);
        $('#toastContainer').append($toast);
        new bootstrap.Toast($toast[0], { delay: 3000 }).show();
        $toast.on('hidden.bs.toast', function () { $(this).remove(); });
    }

    // Helper function to recalc SrNo for export across all pages
    function getExportSrNo(rowIdx, tbl) {
        // Get all rows nodes
        let allRows = tbl.rows({ order: 'applied', search: 'applied' }).nodes().toArray();
        // Filter only the checked rows
        let checkedRows = allRows.filter(row => $(row).find('input.row-select').prop('checked'));
        // Find the position of this row in the checkedRows array
        let sr = checkedRows.findIndex(row => tbl.row(row).index() === rowIdx) + 1;
        return sr; // consecutive Sr.No
    }
</script>


