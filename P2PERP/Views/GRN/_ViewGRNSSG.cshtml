@{
    Layout = null;
}

<div class="card shadow p-4">
    <!-- Header info -->
    <div class="row mb-2">
        <div class="col-md-4">
            <label class="fw-semibold">PONO:</label>
            <input type="text" class="form-control form-control-sm bg-light" id="txtPONumberUnique" value="@ViewBag.POCode" readonly>
        </div>
        <div class="col-md-4">
            <label class="fw-semibold">PODATE:</label>
            <input type="date" class="form-control form-control-sm bg-light" id="txtPODateUnique" value="@ViewBag.PODate" readonly>
        </div>
        <div class="col-md-4">
            <label class="fw-semibold">VENDOR NAME:</label>
            <input type="text" class="form-control form-control-sm bg-light" id="txtVendorNameUnique" value="@ViewBag.VendorName" readonly>
        </div>
    </div>

    <!-- GRN / Invoice info -->
    <div class="row mb-2">
        <div class="col-md-4">
            <label class="fw-semibold">GRNNO:</label>
            <input type="text" class="form-control form-control-sm bg-light" id="txtGRNNumberUnique" value="@ViewBag.GRNCode" readonly>
        </div>
        <div class="col-md-4">
            <label class="fw-semibold">INVOICE NO:</label>
            <input type="text" class="form-control form-control-sm bg-light" id="txtInvoiceNumberUnique" value="@ViewBag.InvoiceNo" readonly>
        </div>
        <div class="col-md-4">
            <label class="fw-semibold">INVOICE DATE:</label>
            <input type="date" class="form-control form-control-sm bg-light" id="txtInvoiceDateUnique" value="@ViewBag.InvoiceDate" readonly>
        </div>
    </div>

    <!-- Addresses -->
    <div class="row mb-2">
        <div class="col-md-6">
            <label class="fw-semibold">COMPANY ADDRESS:</label>
            <textarea class="form-control form-control-sm bg-light" rows="2" id="txtCompanyAddressUnique" readonly>@ViewBag.CompanyAddress</textarea>
        </div>
        <div class="col-md-6">
            <label class="fw-semibold">BILLING ADDRESS:</label>
            <textarea class="form-control form-control-sm bg-light" rows="2" id="txtBillingAddressUnique" readonly>@ViewBag.BillingAddress</textarea>
        </div>
    </div>

    <h4 class="mb-3">GRN Items</h4>

    <div class="table-responsive p-2 bg-white rounded">
        <table class="table table-bordered table-striped text-center align-middle" id="tblGRNItemsUnique">
            <thead class="table-dark">
                <tr>
                    <th><input type="checkbox" id="chkSelectAllUnique" /></th>
                    <th>Sr. No.</th>
                    <th>Item Name</th>
                    <th>Quality Check</th>
                    <th>PO Qty</th>
                    <th>GRN Qty</th>
                    <th>Remaining Qty</th>
                    <th>Unit Rate</th>
                    <th>Discount %</th>
                    <th>GST %</th>
                    <th>Amount (₹)</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>


    <div class="row mt-2">
        <div class="col-md-3 offset-md-9">
            <div class="p-2 rounded-3 text-center" style="background-color:#8a4fff; color:white; font-size:1rem; font-weight:500;">
                Total Amount : ₹<span id="txtTotalAmountUniqueDisplay">0.00</span>
            </div>
        </div>
    </div>


</div>
<style>
    button.dt-button.processing,
    div.dt-button.processing {
        pointer-events: auto !important;
        opacity: 1 !important;
        background: none !important;
    }

        button.dt-button.processing:after {
            content: none !important;
        }
</style>
<script>
$(document).ready(function () {
    const GRNCode = '@ViewBag.GRNCode';
    toastr.options = { closeButton: true, progressBar: true, positionClass: "toast-top-right", timeOut: "3000" };

    const parseNum = val => !val ? 0 : parseFloat(String(val).replace(/[,₹\s%]+/g,'').replace(/[^0-9.\-]/g,'')) || 0;

    // Initialize DataTable
    const tableUnique = $('#tblGRNItemsUnique').DataTable({
          ordering: false,

        ajax: {
            url: '/GRN/GetGRNItemsSSG',
            type: 'GET',
            data: { GRNCode },
            dataSrc: json => (json && json.success && Array.isArray(json.items)) ? json.items : []
        },
        columns: [
            { data: "ItemCode", orderable: false, className: 'text-center', render: d => `<input type="checkbox" class="chkRowUnique" value="${d}" />` },
            { data: null, className: 'text-center', render: (d, t, r, m) => m.row + 1 },
            { data: "ItemName", className: 'text-center' },
            {
                data: "qc",
                className: 'text-center',
                render: d => {
                    const val = String(d || '').trim().toLowerCase();
                    if (val === 'true' || val === '1' || val === 'yes') return 'Yes';
                    return 'No';
                }
            },

            { data: "POQuantity", className: 'text-center' },
            { data: "GRNQuantity", className: 'text-center' },
            { data: "RemainingQuantity", className: 'text-center' },
            {
                data: "UnitRate",
                className: 'text-center',
                render: d => `₹ ${parseNum(d).toFixed(2)}`  
            },            { data: "Discount", className: 'text-center', render: d => parseNum(d).toFixed(2) + " %" },
            { data: "GST", className: 'text-center', render: d => parseNum(d).toFixed(2) + " %" },
            {
                data: null,
                className: 'text-center',
                render: d => {
                    const qty = parseNum(d.GRNQuantity),
                        rate = parseNum(d.UnitRate),
                        discount = parseNum(d.Discount),
                        gst = parseNum(d.GST),
                        base = qty * rate,
                        afterDiscount = base - (base * discount / 100),
                        total = afterDiscount + (afterDiscount * gst / 100);
                    return `₹ ${total.toFixed(2)}`;
                }
            }

        ],

        dom:'<"row mb-3"<"col-md-6 d-flex gap-2 align-items-center"B><"col-md-6 d-flex justify-content-end"f>>t<"row mt-3"<"col-md-6"i><"col-md-6 d-flex justify-content-end"p>>',
         buttons: [
             // --- PRINT ---
             {
                 extend: 'print',
                 text: '<i class="bi bi-printer-fill fs-5"></i>',
                 title: '', 
                 exportOptions: {
                     columns: [2, 3, 4, 5, 6, 7, 8, 9, 10], 
                     rows: (idx, data, node) => $(node).find('.chkRowUnique').is(':checked')
                 },
                 customize: function (win) {
                     const formattedDate = moment().format("DD/MM/YYYY");
                     let body = $(win.document.body);
                     body.find('h1').remove();

                     body.prepend(
                         '<h2 style="text-align:center; color:black; margin-bottom: 0;">GRN Items List</h2>' +
                         '<h5 style="text-align:center; color:black; margin-top: 0; margin-bottom: 10px;">Generated Date: ' + formattedDate + '</h5>'
                     );

                     body.find('table thead tr').prepend('<th style="background-color:#000; color:#fff; text-align:center;">Sr.No.</th>');
                     let counter = 0;
                     body.find('table tbody tr').each(function () {
                         $(this).prepend('<td style="text-align:center;">' + (++counter) + '</td>');
                     });

                     let css = `
                        table {
                            border-collapse: collapse !important;
                            width: 100% !important;
                            font-size: 12px !important;
                        }
                        table thead th {
                            background-color: #000 !important;
                            color: #fff !important;
                            text-align: center !important;
                            padding: 6px !important;
                            -webkit-print-color-adjust: exact !important;
                            print-color-adjust: exact !important;
                        }
                        table tbody td {
                            border: 1px solid #000 !important;
                            text-align: center !important;
                            padding: 4px !important;
                            background-color: #fff !important;
                        }
                        `;
                     $(win.document.head).append('<style>' + css + '</style>');
                 },
                 action: function (e, dt, btn, config) {
                     if ($('#tblGRNItemsUnique tbody .chkRowUnique:checked').length === 0) {
                         toastr.warning("Select at least one row before printing!");
                         return;
                     }
                     $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, btn, config);
                 }
             },

             //pdf
             {
                 extend: 'pdfHtml5',
                 text: '<i class="bi bi-file-earmark-pdf fs-5 text-danger"></i>',
                 title: '',
                 filename: `GRN Items List - ${moment().format("DD-MM-YYYY")}`,
                 exportOptions: {
                     columns: [2, 3, 4, 5, 6, 7, 8, 9, 10],
                     rows: (idx, data, node) => $(node).find('.chkRowUnique').is(':checked')
                 },
                 customize: function (doc) {
                     let sn = 0;
                     doc.content.unshift(
                         {
                             text: 'GRN Items List',
                             fontSize: 16,
                             bold: true,
                             alignment: 'center',
                             margin: [0, 0, 0, 5]
                         },
                         {
                             text: 'Generated Date: ' + moment().format("DD/MM/YYYY"),
                             fontSize: 12,
                             alignment: 'center',
                             margin: [0, 0, 0, 10]
                         }
                     );
                     const tableContent = doc.content[doc.content.length - 1];
                     const table = tableContent.table;

                     table.body[0].unshift({
                         text: 'Sr.No.',
                         bold: true,
                         fillColor: '#000',
                         color: '#fff',
                         alignment: 'center'
                     });

                     table.body.forEach((row, i) => {
                         if (i === 0) return; 
                         row.unshift({
                             text: (++sn).toString(),
                             alignment: 'center',
                             color: '#000',
                             fillColor: '#fff'
                         });
                     });
                     table.body.forEach((row, i) => {
                         row.forEach(cell => {
                             cell.alignment = 'center';
                             cell.border = [true, true, true, true];
                             if (i === 0) {
                                 cell.fillColor = '#000';
                                 cell.color = '#fff';
                                 cell.bold = true;
                             } else {
                                 cell.fillColor = '#fff';
                                 cell.color = '#000';
                             }
                         });
                     });
                     tableContent.layout = {
                         hLineWidth: () => 0.5,
                         vLineWidth: () => 0.5,
                         hLineColor: () => '#000',
                         vLineColor: () => '#000',
                         paddingLeft: () => 4,
                         paddingRight: () => 4,
                         paddingTop: () => 3,
                         paddingBottom: () => 3
                     };
                     doc.pageMargins = [40, 40, 40, 40];
                 },
                 action: function (e, dt, btn, config) {
                     if ($('#tblGRNItemsUnique tbody .chkRowUnique:checked').length === 0) {
                         toastr.warning("Select at least one row before exporting PDF!");
                         return;
                     }
                     $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, btn, config);
                 }
             },

             // --- Excel Export Button ---
             {
                 extend: 'excelHtml5',
                 text: '<i class="bi bi-file-earmark-excel fs-5 text-success"></i>',
                 title: '', 
                 filename: `GRN_Items_List_${moment().format("DD-MM-YYYY")}`,
                 exportOptions: {
                     columns: [2, 3, 4, 5, 6, 7, 8, 9, 10], 
                     rows: (idx, data, node) => $(node).find('.chkRowUnique').is(':checked') 
                 },
                 customize: function (xlsx) {
                     var sheet = xlsx.xl.worksheets['sheet1.xml'];
                     var $sheet = $(sheet);

                     var colCount = $('row:first c', sheet).length;
                     if (colCount === 0) colCount = 5;
                     var lastCol = String.fromCharCode(64 + colCount); 

                     var title = 'GRN Items List';
                     var generatedDate = 'Generated Date: ' + moment().format('DD/MM/YYYY');
                     $sheet.find('sheetData row').each(function () {
                         var r = parseInt($(this).attr('r'));
                         $(this).attr('r', r + 2);
                         $(this).find('c').each(function () {
                             var cellRef = $(this).attr('r');
                             var col = cellRef.replace(/\d+/g, '');
                             var row = parseInt(cellRef.replace(/\D/g, '')) + 2;
                             $(this).attr('r', col + row);
                         });
                     });
                     var titleRow = `
            <row r="1">
                <c t="inlineStr" r="A1" s="2"><is><t>${title}</t></is></c>
            </row>`;
                     var dateRow = `
            <row r="2">
                <c t="inlineStr" r="A2" s="2"><is><t>${generatedDate}</t></is></c>
            </row>`;

                     $sheet.find('sheetData').prepend(titleRow + dateRow);

                     var mergeCells = $sheet.find('mergeCells');
                     if (mergeCells.length === 0) {
                         mergeCells = $('<mergeCells count="0"></mergeCells>');
                         $sheet.append(mergeCells);
                     }
                     mergeCells.append(`<mergeCell ref="A1:${lastCol}1"/>`);
                     mergeCells.append(`<mergeCell ref="A2:${lastCol}2"/>`);
                     mergeCells.attr('count', mergeCells.find('mergeCell').length);

                     var sn = 0;
                     var updatedRows = $('row', sheet);
                     var header = updatedRows.eq(2); 
                     header.prepend('<c r="A3" t="inlineStr"><is><t>Sr.No.</t></is></c>');
                     updatedRows.each(function (i) {
                         if (i <= 2) return;
                         var rowNum = $(this).attr('r');
                         $(this).prepend('<c r="A' + rowNum + '" t="n"><v>' + (++sn) + '</v></c>');
                     });

                     updatedRows.each(function () {
                         var rowNum = $(this).attr('r');
                         var colCode = 65; 
                         $('c', this).each(function () {
                             $(this).attr('r', String.fromCharCode(colCode) + rowNum);
                             colCode++;
                         });
                     });

                     var styles = xlsx.xl['styles.xml'];
                     var $styles = $(styles);
                     var cellXfs = $styles.find('cellXfs');
                     var count = parseInt(cellXfs.attr('count'));

                     cellXfs.append(`
            <xf numFmtId="0" fontId="0" fillId="0" borderId="0" applyAlignment="1">
                <alignment horizontal="center" vertical="center"/>
            </xf>
        `);
                     var newStyleIndex = count;
                     cellXfs.attr('count', count + 1);

                     $sheet.find('c[r="A1"]').attr('s', newStyleIndex);
                     $sheet.find('c[r="A2"]').attr('s', newStyleIndex);
                 },
                 action: function (e, dt, btn, config) {
                     if ($('#tblGRNItemsUnique tbody .chkRowUnique:checked').length === 0) {
                         toastr.warning("Select at least one row before exporting Excel!");
                         return;
                     }
                     $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, btn, config);
                 }
             },




             // --- CSV ---
             {
                 extend: 'csvHtml5',
                 text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                 title: `GRN_Items_List_${moment().format("YYYY-MM-DD")}`,
                 bom: true,
                 exportOptions: {
                     columns: [2, 3, 4, 5, 6, 7, 8, 9, 10],
                     rows: (idx, data, node) => $(node).find('.chkRowUnique').is(':checked')
                 },
                 customize: function (csv) {
                     let lines = csv.split('\n');
                     if (lines.length > 0) {
                         lines[0] = 'Sr.No.,' + lines[0];
                     }
                     for (let i = 1; i < lines.length; i++) {
                         if (lines[i].trim() !== '') {
                             lines[i] = i + ',' + lines[i];
                         }
                     }
                     return lines.join('\n');
                 },
                 action: function (e, dt, btn, config) {
                     if ($('#tblGRNItemsUnique tbody .chkRowUnique:checked').length === 0) {
                         toastr.warning("Select at least one row before exporting CSV!");
                         return;
                     }
                     $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, btn, config);
                 }
             }
        ],

        order:[[1,'asc']], paging:true, searching:true, info:false, lengthChange:false, responsive:true
    });

    function updateTotalAmountUnique() {
        let total = 0;

        tableUnique.rows().every(function () {
            const row = this.data();
            const qty = parseNum(row.GRNQuantity);
            const rate = parseNum(row.UnitRate);
            const discount = parseNum(row.Discount);
            const gst = parseNum(row.GST);

            const base = qty * rate;
            const afterDiscount = base - (base * discount / 100);
            total += afterDiscount + (afterDiscount * gst / 100);
        });

        // Update span with formatted value
        $('#txtTotalAmountUniqueDisplay').text(total.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
    }


    // Also call after every draw (e.g., pagination)
    tableUnique.on('draw', updateTotalAmountUnique);
    $(document).on('change', '#chkSelectAllUnique', function () {
        const checked = $(this).is(':checked');
        $('#tblGRNItemsUnique tbody .chkRowUnique').prop('checked', checked);
    });
    $(document).on('change', '.chkRowUnique', function () {
        const allChecked = $('#tblGRNItemsUnique tbody .chkRowUnique').length ===
            $('#tblGRNItemsUnique tbody .chkRowUnique:checked').length;
        $('#chkSelectAllUnique').prop('checked', allChecked);
    });

});
</script>
