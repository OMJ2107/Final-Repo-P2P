@{
    Layout = "";
}


<!-- Approved PO List Card -->
<div class="table-responsive card shadow p-3 bg-white rounded">
    <h4 class="text-primary text-center fw-bolder">Approved PO List</h4>

    <div class="d-flex justify-content-between align-items-center mb-5 flex-wrap pe-3">
        <!-- Date Range Picker -->
        <div class="d-flex align-items-center gap-3">
            <div class="input-group" style="height: 40px; max-width: 280px;">
                <span class="input-group-text bg-primary text-white">
                    <i class="bi bi-calendar-date"></i>
                </span>
                <input type="text" id="Purchasedatepicker" class="form-control" placeholder="Select date range" readonly />
            </div>
        </div>

        <!-- Export buttons -->
        <div id="exportContainer" class="d-flex" style="height: 40px; align-items: center;"></div>
    </div>

    <table id="approvedPoTable" class="table table-bordered table-striped text-center align-middle">
        <thead class="table-dark">
            <tr>
                <th><input type="checkbox" id="selectAllApprovedPO" /></th>
                <th>Sr. No.</th>
                <th>PO Code</th>
                <th>Vendor</th>
                <th>Total Amount</th>
                <th>PO Date</th>
                <th>PO Status</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>

<!-- Create GRN Modal -->
<div class="modal fade" id="createGrnModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary py-2 px-3" style="min-height:50px;">
                <h5 class="modal-title m-0 flex-grow-1 text-center fs-5 text-white">Create GRN</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>

            <div class="modal-body" id="grnModalBody"></div>
        </div>
    </div>
</div>
<style>
    button.dt-button.processing,
    div.dt-button.processing {
        pointer-events: auto !important;
        opacity: 1 !important;
        background: none !important;
    }

        button.dt-button.processing:after {
            content: none !important;
        }
</style>
<script>
toastr.options = {
    closeButton: true,
    progressBar: true,
    preventDuplicates: true,
    newestOnTop: true,
    positionClass: "toast-top-right",
    timeOut: "3000"
};

function showExportWarning(msg="Please select at least one row before exporting.") { toastr.warning(msg); }
function showExportSuccess(msg="Export completed.") { toastr.success(msg,"Success"); }

$(document).ready(function () {

    let selectedPOs = new Set();
    let exportSerialCounter = 0;
    let fromDatePO = null;
    let toDatePO = null;

    // Initialize DataTable
    let table = $('#approvedPoTable').DataTable({
        ordering: false,
        ajax: {
            url: '@Url.Action("ApprovedpoListSSG","GRN")',
            type: 'GET',
            data: function(d) {
                d.fromDate = fromDatePO ? fromDatePO.format("YYYY-MM-DD") : '';
                d.toDate = toDatePO ? toDatePO.format("YYYY-MM-DD") : '';
            },
            dataSrc: function(json){
                if (!json || !json.data) return [];
                if (json.data.length === 0) toastr.info("No records found for selected date range.");
                return json.data;
            },
            error: function(){ toastr.error("Failed to load Approved PO list. Please try again.","Error"); }
        },
        columns: [
            {
                data: 'POCode', orderable: false, className: 'text-center',
                render: data => `<input type="checkbox" class="rowCheckboxApprovedPO" value="${data}"/>`
            },
            { data: null, className: 'text-center', render: (data, type, row, meta) => meta.row + 1 },
            { data: 'POCode', className: 'text-center' },
            { data: 'VendorName', className: 'text-center' },

            {
                data: 'TotalAmount', className: 'text-center',
                render: data => `₹ ${parseFloat(data).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`
            },
            {
                data: 'PODate',
                className: 'text-center',
                render: function (data) {
                    return data ? moment(data, "YYYY-MM-DD").format("DD/MM/YYYY") : "";
                }
            },
            {
                data: 'POStatus',
                className: 'text-center',
                render: data => {
                    if (!data) return data;

                    const status = data.toLowerCase();
                    if (status === 'approved') {
                        return `<span class="fw-bold text-white bg-success px-2 py-1 rounded">${data}</span>`;
                    }
                    else if (status === 'open') {
                        return `<span class="fw-bold text-white bg-primary px-2 py-1 rounded">${data}</span>`;
                    }
                    return data;
                }
            },

            {
                data: 'POCode',
                className: 'text-center',
                render: data => `
        <button class="btn btn-success btn-sm createGRNBtn"
                data-bs-toggle="tooltip"
                data-bs-placement="top"
                title="Create GRN for: ${data}">
            <i class="bi bi-file-earmark-plus-fill fs-5"></i>
        </button>`
            }

        ],

        dom:'<"row mb-3"<"col-md-6 d-flex gap-2 align-items-center"B><"col-md-6 d-flex justify-content-end"f>>t<"row mt-3"<"col-md-6"i><"col-md-6 d-flex justify-content-end"p>>',
        buttons: [
            // --- PRINT ---
            {
                extend: 'print',
                text: '<i class="bi bi-printer-fill fs-5"></i>',
                title: '',
                exportOptions: {
                    columns: [2, 3, 4, 5, 6],
                    rows: (idx, data, node) => selectedPOs.has(data.POCode)
                },
                customize: function (win) {
                    let body = $(win.document.body);
                    body.find('h1').remove();
                    body.prepend(
                        '<h2 style="text-align:center; color:black;">Approved PO List</h2>' +
                        '<h5 style="text-align:center; color:black; margin-top:-10px;">Generated Date: ' + moment().format("DD/MM/YYYY") + '</h5>'
                    );
                    const headerRow = body.find('table thead tr');
                    headerRow.each(function () {
                        $(this).prepend('<th>Sr.No.</th>');
                    });
                    let exportSerialCounter = 0;
                    body.find('table tbody tr').each(function () {
                        $(this).prepend('<td>' + (++exportSerialCounter) + '</td>');
                    });
                    let css = `
            table {
                border-collapse: collapse;
                width: 100%;
                font-size: 12px;
            }
            table thead th {
                background-color: #000 !important;
                color: #fff !important;
                text-align: center !important;
                font-weight: bold !important;
                border: 1px solid #000 !important;
                padding: 6px !important;
                -webkit-print-color-adjust: exact !important;
                print-color-adjust: exact !important;
            }
            table tbody td {
                text-align: center;
                border: 1px solid #ccc !important;
                padding: 4px !important;
            }
        `;
                    $(win.document.head).append('<style>' + css + '</style>');
                },
                action: function (e, dt, btn, config) {
                    if (selectedPOs.size === 0) {
                        showExportWarning();
                        return;
                    }
                    $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, btn, config);
                }
            },

            // PDF
            {
                extend: 'pdfHtml5',
                text: '<i class="bi bi-file-earmark-pdf fs-5 text-danger"></i>',
                title: '',
                filename: `Approved PO List - ${moment().format("DD-MM-YYYY")}`,
                exportOptions: {
                    columns: [2, 3, 4, 5, 6],
                    rows: (idx, data, node) => selectedPOs.has(data.POCode)
                },
                customize: function (doc) {
                    exportSerialCounter = 0;
                    doc.content.unshift(
                        { text: 'Approved PO List', style: 'title', alignment: 'center', margin: [0, 0, 0, 5], fontSize: 16, bold: true },
                        { text: 'Generated Date: ' + moment().format("DD/MM/YYYY"), style: 'subTitle', alignment: 'center', margin: [0, 0, 0, 10], fontSize: 12 }
                    );
                    doc.content[2].table.body[0].unshift({ text: 'Sr.No.', bold: true, fillColor: '#000', color: '#fff', alignment: 'center' });
                    doc.content[2].table.body.forEach(function (row, idx) {
                        if (idx === 0) return;
                        row.unshift({ text: (++exportSerialCounter).toString(), alignment: 'center' });
                    });
                    doc.content[2].table.body[0].forEach(function (headerCell) {
                        headerCell.fillColor = '#000';
                        headerCell.color = '#fff';
                        headerCell.alignment = 'center';
                        headerCell.bold = true;
                    });
                    doc.content[2].table.body.forEach(function (row, idx) {
                        if (idx === 0) return; 
                        row.forEach(function (cell) {
                            if (cell.text) cell.alignment = 'center'; 
                        });
                    });
                    doc.content[2].table.alignment = 'center';
                    doc.content[2].table.widths = Array(doc.content[2].table.body[0].length).fill('*');
                    doc.content[2].layout = {
                        hLineWidth: function (i, node) { return 1; },
                        vLineWidth: function (i, node) { return 1; },
                        hLineColor: function (i, node) { return '#000'; },
                        vLineColor: function (i, node) { return '#000'; },
                        paddingLeft: function (i, node) { return 5; },
                        paddingRight: function (i, node) { return 5; },
                        paddingTop: function (i, node) { return 4; },
                        paddingBottom: function (i, node) { return 4; }
                    };
                    doc.pageMargins = [40, 40, 40, 40];
                },
                action: function (e, dt, btn, config) {
                    if (selectedPOs.size === 0) { showExportWarning(); return; }
                    $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, btn, config);
                }
            },

            // Excel
            {
                extend: 'excelHtml5',
                text: '<i class="bi bi-file-earmark-excel fs-5 text-success"></i>',
                title: '',
                filename: `Approved_PO_List_${moment().format("DD/MM/YYYY")}`,
                titleAttr: 'Export Excel',
                exportOptions: {
                    columns: [0, 2, 3, 4, 5,6],
                    rows: (idx, data, node) => selectedPOs.has(data.POCode),
                    format: {
                        header: function (data, colIdx) {
                            if (colIdx === 0) return 'Sr.No.';
                            return data;
                        },
                        body: function (data, row, colIdx) {
                            let plain = $('<div>').html(data).text().trim();
                            plain = plain.replace(/â‚¹|&amp;#8377;/g, '₹');
                            if (colIdx === 0) return ++exportSerialCounter;
                            return plain;
                        }
                    }
                },
                customize: function (xlsx) {
                    const sheet = xlsx.xl.worksheets['sheet1.xml'];
                    const dateStr = moment().format("DD/MM/YYYY");
                    $(sheet).find('row').each(function () {
                        const r = parseInt($(this).attr('r'));
                        $(this).attr('r', r + 2);
                        $(this).find('c').each(function () {
                            const cellRef = $(this).attr('r');
                            const col = cellRef.replace(/\d+/g, '');
                            const row = parseInt(cellRef.replace(/\D/g, '')) + 2;
                            $(this).attr('r', col + row);
                        });
                    });

                    const titleRow = `<row r="1">
                    <c t="inlineStr" r="C1" s="2"><is><t>Approved PO List</t></is></c>
                </row>`;
                                    const dateRow = `<row r="2">
                    <c t="inlineStr" r="C2" s="2"><is><t>Generated Date: ${dateStr}</t></is></c>
                </row>`;

                    sheet.childNodes[0].childNodes[1].innerHTML = titleRow + dateRow + sheet.childNodes[0].childNodes[1].innerHTML;
                },
                action: function (e, dt, btn, config) {
                    if (selectedPOs.size === 0) {
                        showExportWarning("Select at least one row to export.");
                        return;
                    }
                    exportSerialCounter = 0;
                    $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, btn, config);
                }
            },


            // --- CSV EXPORT ---
            {
                extend: 'csvHtml5',
                text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                title: null,
                filename: `Approved_PO_List_${moment().format("DD-MM-YYYY")}`,
                bom: true,
                exportOptions: {
                    columns: [0, 2, 3, 4, 5],
                    rows: (idx, data, node) => selectedPOs.has(data.POCode),
                    format: {
                        header: function (data, colIdx) {
                            if (colIdx === 0) return 'Sr.No.';
                            return data;
                        },
                        body: function (data, row, colIdx) {
                            let plain = $('<div>').html(data).text().trim();

                            plain = plain.replace(/â‚¹|&amp;#8377;/g, '₹');
                            if (colIdx === 0) return ++exportSerialCounter;

                            if (colIdx === 4) {
                                const dt = moment(plain, ["YYYY-MM-DD", "DD-MM-YYYY", "MM/DD/YYYY"]);
                                if (dt.isValid()) return dt.format("DD/MM/YYYY");
                            }

                            return plain;
                        }
                    },
                    customize: function (xlsx) {
                        var sheet = xlsx.xl.worksheets['sheet1.xml'];
                        var $sheet = $(sheet);

                        $sheet.find('row c').each(function () {
                            var $c = $(this);
                            var col = $c.attr('r').replace(/[0-9]/g, '');
                            if (col === 'G' || col === 'H') {
                                $c.attr('t', 'inlineStr'); 
                                var v = $c.find('v').text();
                                $c.empty().append(`<is><t>${v}</t></is>`);
                            }
                        });
                    },
                },
                action: function (e, dt, btn, config) {
                    if (selectedPOs.size === 0) {
                        showExportWarning("Select at least one row to export.");
                        return;
                    }
                    exportSerialCounter = 0;
                    $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, btn, config);
                }
            }



        ],
        rowCallback:function(row,data){
            $(row).find('.rowCheckboxApprovedPO').prop('checked', selectedPOs.has(data.POCode));
        },
        drawCallback: function(){
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) { return new bootstrap.Tooltip(tooltipTriggerEl); });
        }
    });

    // Custom date range filter
    $.fn.dataTable.ext.search.push(function(settings,data,dataIndex){
        if(!fromDatePO || !toDatePO) return true;
        let poDateStr=data[5];
        if(!poDateStr) return false;
        let poDate=moment(poDateStr,"DD-MM-YYYY");
        return poDate.isSameOrAfter(fromDatePO) && poDate.isSameOrBefore(toDatePO);
    });

    // Initialize Date Range Picker
    $('#Purchasedatepicker').daterangepicker({
        autoUpdateInput: false,
        opens: "center",
        drops: "down",
        locale: { format: "DD-MM-YYYY", cancelLabel: "Clear" },
        ranges: {
            'Today': [moment(), moment()],
            'Last 7 Days': [moment().subtract(6, 'days'), moment()],
            'Last 1 Month': [moment().subtract(1, 'month'), moment()],
            'Last 3 Months': [moment().subtract(3, 'month'), moment()],
            'Last 1 Year': [moment().subtract(1, 'year'), moment()]
        }
    },function(start,end){
        fromDatePO=start.startOf('day');
        toDatePO=end.endOf('day');
        $('#Purchasedatepicker').val(start.format("DD-MM-YYYY")+" - "+end.format("DD-MM-YYYY"));
        table.draw();
    });

    $('#Purchasedatepicker').on('cancel.daterangepicker', function(){
        $(this).val('');
        fromDatePO=null;
        toDatePO=null;
        table.draw();
    });

    //  Row checkbox, select all 
    $(document).on('change', '.rowCheckboxApprovedPO', function () {
        const poCode = $(this).val();
        $(this).is(':checked') ? selectedPOs.add(poCode) : selectedPOs.delete(poCode);

        const allVisibleChecked = table.rows({ page: 'current' }).nodes().to$().find('.rowCheckboxApprovedPO').length ===
            table.rows({ page: 'current' }).nodes().to$().find('.rowCheckboxApprovedPO:checked').length;
        $('#selectAllApprovedPO').prop('checked', allVisibleChecked);
    });

    $(document).on('change', '#selectAllApprovedPO', function () {
        const checked = $(this).is(':checked');

        table.rows({ page: 'current' }).nodes().to$().find('.rowCheckboxApprovedPO').prop('checked', checked);
        table.rows({ page: 'current' }).data().each(d => {
            if (checked) selectedPOs.add(d.POCode);
            else selectedPOs.delete(d.POCode);
        });
    });


    //  Create GRN modal
    $(document).on("click",".createGRNBtn", function(){
        const poCode=$(this).closest('tr').find('td:eq(2)').text().trim();
        $('#createGrnModal').modal('show');
        $('#grnModalBody').html('<p class="text-center py-3">Loading...</p>');
        $.get('@Url.Action("CreateGRNSSG","GRN")',{POCode:poCode})
        .done(data=>$('#grnModalBody').html(data))
        .fail(()=>$('#grnModalBody').html('<p class="text-danger text-center">Failed to load GRN form. Check your network.</p>'));
    });

});
    function initDescriptionTooltips() {
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.forEach(function (el) {
            if (el._tooltip) el._tooltip.dispose();
            el._tooltip = new bootstrap.Tooltip(el, {
                template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner" style="background-color:black; color:white;"></div></div>'
            });
        });
    }

    initDescriptionTooltips();

    $('#qcItemsTable').on('draw.dt', function () {
        initDescriptionTooltips();
    });

</script>

